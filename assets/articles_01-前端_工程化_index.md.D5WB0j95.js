import{_ as a,a as e,o as l,aR as i}from"./chunks/framework.kUD5hkPg.js";const m=JSON.parse('{"title":"前端工程化","description":"","frontmatter":{},"headers":[],"relativePath":"articles/01-前端/工程化/index.md","filePath":"articles/01-前端/工程化/index.md"}'),t={name:"articles/01-前端/工程化/index.md"},o=i('<h1 id="前端工程化" tabindex="-1">前端工程化 <a class="header-anchor" href="#前端工程化" aria-label="Permalink to &quot;前端工程化&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>前端工程化 相关笔记</p></div><h2 id="什么是-前端工程化" tabindex="-1">什么是&quot;前端工程化&quot; <a class="header-anchor" href="#什么是-前端工程化" aria-label="Permalink to &quot;什么是&quot;前端工程化&quot;&quot;">​</a></h2><p>在一个大型前端开发的过程中遇到的<strong>痛点</strong>是什么，那么工程化的过程在我的理解就是将<strong>痛点</strong>标准化、规划化。其主要目的为了<strong>提高效率和降低成本，即提高开发过程中的开发效率，减少不必要的重复工作时间</strong>。</p><p>所以我认为一位新入职的员工首先要做的就是了解入职团队的规范和标准，当前团队的 git 版本管理是如何进行的、组件是如何封装的、自动化测试是如何进行的，在了解后思考是否有不足的地方，如果有的话如何提升团队的开发效率和降低运维成本。</p><p>那么如何取做到优化整个项目的实施过程就是前端工程化。前端工程化主要分为模块化、组件化、规范化、自动化四个方面。</p><h2 id="模块化" tabindex="-1">模块化 <a class="header-anchor" href="#模块化" aria-label="Permalink to &quot;模块化&quot;">​</a></h2><p>简单来说，模块化就是将一个大文件拆分成相互依赖的小文件，再进行统一的拼装和加载。只有这样，才有多人协作的可能。</p><h3 id="js-的模块化" tabindex="-1">JS 的模块化 <a class="header-anchor" href="#js-的模块化" aria-label="Permalink to &quot;JS 的模块化&quot;">​</a></h3><p>在 ES6 之前，JavaScript 一直没有模块系统，这对开发大型复杂的前端工程造成了巨大的障碍。对此社区制定了一些模块加载方案，如 CommonJS、AMD 和 CMD 等，某些框架也会有自己模块系统，比如 Angular1.x。</p><p>现在 ES6 已经在语言层面上规定了模块系统，完全可以取代现有的 CommonJS 和 AMD 规范，而且使用起来相当简洁，并且有静态加载的特性。</p><p>规范确定了，然后就是模块的打包和加载问题：</p><ol><li>用 Webpack+Babel 将所有模块打包成一个文件同步加载，也可以打成多个 chunk 异步加载；</li><li>用 SystemJS+Babel 主要是分模块异步加载；</li><li>用浏览器的<code>&lt;script type=&quot;module&quot;&gt;</code>加载目前 Webpack 远比 SystemJS 流行。Safari 已经支持用<code>type=&quot;module&quot;</code>加载了。</li></ol><h3 id="css-的模块化" tabindex="-1">CSS 的模块化 <a class="header-anchor" href="#css-的模块化" aria-label="Permalink to &quot;CSS 的模块化&quot;">​</a></h3><p>虽然 SASS、LESS、Stylus 等预处理器实现了 CSS 的文件拆分，但没有解决 CSS 模块化的一个重要问题：选择器的全局污染问题。</p><p>按道理，一个模块化的文件应该要隐藏内部作用域，只暴露少量接口给使用者。而按照目前预处理器的方式，导入一个 CSS 模块后，已存在的样式有被覆盖的风险。虽然重写样式是 CSS 的一个优势，但这并不利于多人协作。</p><p>从工具层面，社区又创造出 Shadow DOM、CSS in JS 和 CSS Modules 三种解决方案。</p><ul><li>Shadow DOM 是 WebComponents 的标准。它能解决全局污染问题，但目前很多浏览器不兼容，对我们来说还很久远；</li><li>CSS in JS 是彻底抛弃 CSS，使用 JS 或 JSON 来写样式。这种方法很激进，不能利用现有的 CSS 技术，而且处理伪类等问题比较困难；</li><li>CSS Modules 仍然使用 CSS，只是让 JS 来管理依赖。它能够最大化地结合 CSS 生态和 JS 模块化能力，目前来看是最好的解决方案。Vue 的 scoped style 也算是一种。</li></ul><h3 id="资源的模块化" tabindex="-1">资源的模块化 <a class="header-anchor" href="#资源的模块化" aria-label="Permalink to &quot;资源的模块化&quot;">​</a></h3><p>Webpack 的强大之处不仅仅在于它统一了 JS 的各种模块系统，取代了 Browserify、RequireJS、SeaJS 的工作。更重要的是它的万能模块加载理念，即所有的资源都可以且也应该模块化。</p><p>资源模块化后，优点是：</p><ul><li>依赖关系单一化。所有 CSS 和图片等资源的依赖关系统一走 JS 路线，无需额外处理 CSS 预处理器的依赖关系，也不需处理代码迁移时的图片合并、字体图片等路径问题；</li><li>资源处理集成化。现在可以用 loader 对各种资源做各种事情，比如复杂的 vue-loader 等等；</li><li>项目结构清晰化。使用 Webpack 后，你的项目结构总可以表示成这样的函数： <code>dest = webpack(src, config)</code>。</li></ul><h2 id="组件化" tabindex="-1">组件化 <a class="header-anchor" href="#组件化" aria-label="Permalink to &quot;组件化&quot;">​</a></h2><p>从 UI 拆分下来的每个包含模板(HTML)+样式(CSS)+逻辑(JS)功能完备的结构单元，我们称之为组件。</p><p><strong>组件化 ≠ 模块化。模块化只是在文件层面上，对代码或资源的拆分；而组件化是在设计层面上，对 UI（用户界面）的拆分。</strong></p><p>页面上所有的东西都是组件。页面是个大型组件，可以拆成若干个中型组件，然后中型组件还可以再拆，拆成若干个小型组件，小型组件也可以再拆，直到拆成 DOM 元素为止。DOM 元素可以看成是浏览器自身的组件，作为组件的基本单元。</p><p>传统前端框架/类库的思想是先组织 DOM，然后把某些可复用的逻辑封装成组件来操作 DOM，是 DOM 优先；而组件化框架/类库的思想是先来构思组件，然后用 DOM 这种基本单元结合相应逻辑来实现组件，是组件优先。这是两者本质的区别。</p><p>其次，组件化实际上是一种按照模板(HTML)+样式(CSS)+逻辑(JS)三位一体的形式对面向对象的进一步抽象。</p><p>所以我们除了封装组件本身，还要合理处理组件之间的关系，比如 （逻辑）继承、（样式）扩展、（模板）嵌套和包含等，这些关系都可以归为依赖。</p><p>目前市面上的组件化框架很多，主要的有 Vue、React、Angular。Vue 文档中的对比其他框架一文已经讲得很详细了。</p><h2 id="规范化" tabindex="-1">规范化 <a class="header-anchor" href="#规范化" aria-label="Permalink to &quot;规范化&quot;">​</a></h2><p>规范化其实是工程化中很重要的一个部分，项目初期规范制定的好坏会直接影响到后期的开发质量。</p><ul><li>目录结构的制定</li><li>编码规范</li><li>前后端接口规范</li><li>文档规范</li><li>组件管理</li><li>git 分支管理</li><li>commit 描述规范</li><li>视觉图标规范</li></ul><p><strong>例子</strong></p><ul><li><a href="https://eggjs.org/zh-cn/intro/index.html" target="_blank" rel="noreferrer">egg</a>对 koa 做了重新封装，最基本的目的就是<strong>帮助开发团队和开发人员降低开发和维护成本</strong>，如果做到的呢？就是基于目录结构的的规范制定，开发插件的规范制定。</li><li>编码规范采用 ESLint 和 StyleLint 等强制措施，不允许不规范代码的上传</li></ul><h2 id="自动化" tabindex="-1">自动化 <a class="header-anchor" href="#自动化" aria-label="Permalink to &quot;自动化&quot;">​</a></h2><p>前端工程化的很多脏活累活都应该交给自动化工具来完成。需要秉持的一个理念是:<strong>任何简单机械的重复劳动都应该让机器去完成</strong>。</p><ul><li>图标合并</li><li>持续继承</li><li>自动化构建</li><li>自动化部署</li><li>自动化测试</li></ul><p><strong>例子</strong></p><ul><li>自动化部署——在开发完成后的编译部署实现自动化，例如本博客使用的 vitepress，每次提交后会自动构建和部署。其他方式：github CI、Jenkins 等等</li><li>自动化测试——常用框架 karma、mocha、jest、ava 等等</li></ul>',40),r=[o];function s(n,S,p,c,d,h){return l(),e("div",null,r)}const b=a(t,[["render",s]]);export{m as __pageData,b as default};
