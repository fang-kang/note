import{_ as a,a as t,o as i,aR as o}from"./chunks/framework.kUD5hkPg.js";const b=JSON.parse('{"title":"01.JDBC 概述","description":"","frontmatter":{},"headers":[],"relativePath":"articles/02-后端/Java/02-JDBC核心技术/01.JDBC 概述.md","filePath":"articles/02-后端/Java/02-JDBC核心技术/01.JDBC 概述.md"}'),e={name:"articles/02-后端/Java/02-JDBC核心技术/01.JDBC 概述.md"},n=o('<h1 id="_01-jdbc-概述" tabindex="-1">01.JDBC 概述 <a class="header-anchor" href="#_01-jdbc-概述" aria-label="Permalink to &quot;01.JDBC 概述&quot;">​</a></h1><h2 id="_1-1-数据的持久化" tabindex="-1">1.1 数据的持久化 <a class="header-anchor" href="#_1-1-数据的持久化" aria-label="Permalink to &quot;1.1 数据的持久化&quot;">​</a></h2><ul><li>持久化(persistence)：<strong>把数据保存到可掉电式存储设备中以供之后使用</strong>。大多数情况下，特别是企业级应用，<strong>数据持久化意味着将内存中的数据保存到硬盘</strong>上加以”固化”<strong>，而持久化的实现过程大多通过各种关系数据库来完成</strong>。</li><li>持久化的主要应用是将内存中的数据存储在关系型数据库中，当然也可以存储在磁盘文件、XML 数据文件中。 <img src="https://fang-kang.gitee.io/blog-img/jdbc/1566741430592.png#id=hNJbu&amp;originHeight=292&amp;originWidth=467&amp;originalType=binary&amp;ratio=1&amp;status=done&amp;style=none" alt="" data-fancybox="gallery"></li></ul><h2 id="_1-2-java-中的数据存储技术" tabindex="-1">1.2 Java 中的数据存储技术 <a class="header-anchor" href="#_1-2-java-中的数据存储技术" aria-label="Permalink to &quot;1.2 Java 中的数据存储技术&quot;">​</a></h2><ul><li>在 Java 中，数据库存取技术可分为如下几类： <ul><li><strong>JDBC</strong>直接访问数据库</li><li><code>JDO</code> (Java Data Object )技术</li><li><strong>第三方 O/R 工具</strong>，如 <code>Hibernate</code>, <code>Mybatis</code> 等</li></ul></li><li><code>JDBC</code> 是 <code>java</code> 访问数据库的基石，<code>JDO</code>、<code>Hibernate</code>、<code>MyBatis</code> 等只是更好的封装了<code>JDBC</code>。</li></ul><h2 id="_1-3-jdbc-介绍" tabindex="-1">1.3 JDBC 介绍 <a class="header-anchor" href="#_1-3-jdbc-介绍" aria-label="Permalink to &quot;1.3 JDBC 介绍&quot;">​</a></h2><ul><li>JDBC(Java Database Connectivity)是一个<strong>独立于特定数据库管理系统、通用的 SQL 数据库存取和操作的公共接口</strong>（一组 API），定义了用来访问数据库的标准 Java 类库，（<strong>java.sql,javax.sql</strong>）使用这些类库可以以一种<strong>标准</strong>的方法、方便地访问数据库资源。</li><li>JDBC 为访问不同的数据库提供了一种<strong>统一的途径</strong>，为开发者屏蔽了一些细节问题。</li><li>JDBC 的目标是使 Java 程序员使用 JDBC 可以连接任何<strong>提供了 JDBC 驱动程序</strong>的数据库系统，这样就使得程序员无需对特定的数据库系统的特点有过多的了解，从而大大简化和加快了开发过程。</li><li>如果没有 JDBC，那么 Java 程序访问数据库时是这样的：</li></ul><p><img src="https://fang-kang.gitee.io/blog-img/jdbc/1555575760234.png#id=wFzdF&amp;originHeight=398&amp;originWidth=576&amp;originalType=binary&amp;ratio=1&amp;status=done&amp;style=none" alt="" data-fancybox="gallery"></p><hr><ul><li>有了 JDBC，Java 程序访问数据库时是这样的：</li></ul><p><img src="https://fang-kang.gitee.io/blog-img/jdbc/1555575981203.png#id=DUvmP&amp;originHeight=437&amp;originWidth=615&amp;originalType=binary&amp;ratio=1&amp;status=done&amp;style=none" alt="" data-fancybox="gallery"></p><hr><ul><li>总结如下：</li></ul><p><img src="https://fang-kang.gitee.io/blog-img/jdbc/1566741692804.png#id=gvI42&amp;originHeight=513&amp;originWidth=815&amp;originalType=binary&amp;ratio=1&amp;status=done&amp;style=none" alt="" data-fancybox="gallery"></p><h2 id="_1-4-jdbc-体系结构" tabindex="-1">1.4 JDBC 体系结构 <a class="header-anchor" href="#_1-4-jdbc-体系结构" aria-label="Permalink to &quot;1.4 JDBC 体系结构&quot;">​</a></h2><ul><li>JDBC 接口（API）包括两个层次： <ul><li><strong>面向应用的 API</strong>：Java API，抽象接口，供应用程序开发人员使用（连接数据库，执行 SQL 语句，获得结果）。</li><li><strong>面向数据库的 API</strong>：Java Driver API，供开发商开发数据库驱动程序用。</li></ul></li></ul><blockquote><p><strong>JDBC 是 sun 公司提供一套用于数据库操作的接口，java 程序员只需要面向这套接口编程即可。</strong></p><p><strong>不同的数据库厂商，需要针对这套接口，提供不同实现。不同的实现的集合，即为不同数据库的驱动。 ————面向接口编程</strong></p></blockquote><h2 id="_1-5-jdbc-程序编写步骤" tabindex="-1">1.5 JDBC 程序编写步骤 <a class="header-anchor" href="#_1-5-jdbc-程序编写步骤" aria-label="Permalink to &quot;1.5 JDBC 程序编写步骤&quot;">​</a></h2><p><img src="https://fang-kang.gitee.io/blog-img/jdbc/1565969323908.png#id=ktHPo&amp;originHeight=368&amp;originWidth=780&amp;originalType=binary&amp;ratio=1&amp;status=done&amp;style=none" alt="" data-fancybox="gallery"></p><blockquote><p>补充：ODBC(<strong>Open Database Connectivity</strong>，开放式数据库连接)，是微软在 Windows 平台下推出的。使用者在程序中只需要调用 ODBC API，由 ODBC 驱动程序将调用转换成为对特定的数据库的调用请求。</p></blockquote>',20),r=[n];function l(s,g,d,c,p,m){return i(),t("div",null,r)}const J=a(e,[["render",l]]);export{b as __pageData,J as default};
