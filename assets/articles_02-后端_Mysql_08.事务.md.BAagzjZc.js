import{_ as s,a,o as i,aR as e}from"./chunks/framework.kUD5hkPg.js";const u=JSON.parse('{"title":"08.事务","description":"","frontmatter":{},"headers":[],"relativePath":"articles/02-后端/Mysql/08.事务.md","filePath":"articles/02-后端/Mysql/08.事务.md"}'),n={name:"articles/02-后端/Mysql/08.事务.md"},t=e(`<h1 id="_08-事务" tabindex="-1">08.事务 <a class="header-anchor" href="#_08-事务" aria-label="Permalink to &quot;08.事务&quot;">​</a></h1><h2 id="_1-相关概念" tabindex="-1">1. 相关概念 <a class="header-anchor" href="#_1-相关概念" aria-label="Permalink to &quot;1. 相关概念&quot;">​</a></h2><ul><li>事务：一个或一组 sql 语句组成的一个 <strong>执行单元</strong>，这个执行单元 <strong>要么全部执行，要么全部不执行</strong>。</li><li>TCL：Transaction Control Language，事务控制语言</li><li>事务由单独单元的一个或多个 SQL 语句组成，在这个单元中,每个 MySQL 语句是相互依赖的。而整个单独单元作为一个不可分割的整体，如果单元中某条 SQL 语句 <strong>一旦执行失败或产生错误</strong>，整个单元将会 <strong>回滚</strong>。所有受到影响的数据将返回到事物开始以前的状态；如果单元中的所有 SQL 语句均执行成功，则事物被顺利执行。</li></ul><p>案例：转账</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>张三丰  1000</span></span>
<span class="line"><span>郭襄 1000</span></span>
<span class="line"><span>update 表 set 张三丰的余额=500 where name=&#39;张三丰&#39;</span></span>
<span class="line"><span>意外</span></span>
<span class="line"><span>update 表 set 郭襄的余额=1500 where name=&#39;郭襄&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="_2-存储引擎" tabindex="-1">2. 存储引擎 <a class="header-anchor" href="#_2-存储引擎" aria-label="Permalink to &quot;2. 存储引擎&quot;">​</a></h2><p>1、概念：在 mysql 中的数据用各种不同的技术存储在文件(或内存)中 2、通过 show engines; 来查看 mysq1 支持的存储引擎。 3、 在 mysq1 中用的最多的存储引擎有: innodb，myisam，memory 等。其中 innodb 支持事务，而 myIsam，memory 等不支持事务</p><h2 id="_3-事务的特性" tabindex="-1">3. 事务的特性 <a class="header-anchor" href="#_3-事务的特性" aria-label="Permalink to &quot;3. 事务的特性&quot;">​</a></h2><p>事务的特性：ACID</p><ul><li>原子性（A）：一个事务不可再分割，要么都执行要么都不执行</li><li>一致性（C）：一个事务执行会使数据从一个一致状态切换到另外一个一致状态</li><li>隔离性（I）：一个事务的执行不受其他事务的干扰</li><li>持久性（D）：一个事务一旦提交，则会永久的改变数据库的数据。</li></ul><h2 id="_4-事务的创建" tabindex="-1">4. 事务的创建 <a class="header-anchor" href="#_4-事务的创建" aria-label="Permalink to &quot;4. 事务的创建&quot;">​</a></h2><h3 id="_4-1-隐式事务" tabindex="-1">4.1 隐式事务 <a class="header-anchor" href="#_4-1-隐式事务" aria-label="Permalink to &quot;4.1 隐式事务&quot;">​</a></h3><p>隐式事务：事务没有明显的开启和结束的标记,比如 insert、update、delete 语句。默认一个命令是一个事务。</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">delete</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 表 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_4-2-显式事务" tabindex="-1">4.2 显式事务 <a class="header-anchor" href="#_4-2-显式事务" aria-label="Permalink to &quot;4.2 显式事务&quot;">​</a></h3><p>显式事务：事务具有明显的开启和结束的标记 前提：必须先设置自动提交功能为禁用</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> autocommit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>步骤 1：开启事务</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> autocommit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">start transaction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 可选的</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>步骤 2：编写事务中的 sql 语句（select insert update delete）</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">语句1;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">语句2;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>步骤 3：结束事务</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">commit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 提交事务</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">rollback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 回滚事务</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">savepoint 节点名; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 设置保存点</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="_5-数据库的隔离级别" tabindex="-1">5. 数据库的隔离级别 <a class="header-anchor" href="#_5-数据库的隔离级别" aria-label="Permalink to &quot;5. 数据库的隔离级别&quot;">​</a></h2><ul><li>对于同时运行的多个事务,当这些事务访问数据库中相同的数据时，如果没有采取必要的隔离机制，就会导致各种并发问题： <ul><li><strong>脏读</strong>：对于两个事务 T1, T2, T1 读取了已经被 T2 更新但还没有被提交的字段之后，若 T2 回滚, T1 读取的内容就是临时且无效的.</li><li><strong>不可重复读</strong>：对于两个事务 T1, T2, T1 读取了一个字段,然后 T2 更新了该字段之后, T1 再次读取同一个字段,值就不同了.</li><li><strong>幻读</strong>：对于两个事务 T1,T2, T1 从一个表中读取了一个字段然后 T2 在该表中插入了一些新的行之后，如果 T1 再次读取同一个表,就会多出几行.</li></ul></li><li><strong>数据库事务的隔离性</strong>：数据库系统必须具有隔离并发运行各个事务的能力，使它们不会相互影响,避免各种并发问题。</li><li><strong>数据库隔离级别</strong>：一个事务与其他事务隔离的程度称为隔离级别。数据库规定了多种事务隔离级别,不同隔离级别对应不同的干扰程度，<strong>隔离级别越高，数据一致性就越好</strong>，但 <strong>并发性越弱</strong>。</li><li>查看当前的隔离级别：</li></ul><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@@tx_isolation;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>设置当前 mySQL 连接的隔离级别:</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> transaction</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> isolation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> level</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> read</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> committed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>设置数据库系统的全局的隔离级别:</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> global</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> transaction</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> isolation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> level</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> read</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> committed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>每启动一个 mysql 程序,就会获得一一个单独的数据库连接。每个数据库连接都有一个全局变量 <code>@@tx__isolation</code>，表示当前的 事务隔离级别。</p><table><thead><tr><th>事务的隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>read uncommitted</td><td>√</td><td>√</td><td>√</td></tr><tr><td>read committed</td><td>×</td><td>√</td><td>√</td></tr><tr><td>repeatable read</td><td>×</td><td>×</td><td>√</td></tr><tr><td>serializable</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><ul><li>mysql 中默认 第三个隔离级别 <code>repeatable read</code></li><li>oracle 中默认第二个隔离级别 <code>read committed</code> 查看隔离级别</li></ul><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @@tx_isolation;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>设置隔离级别</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> session</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">global</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> transaction</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> isolation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> level</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 隔离级别;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div>`,36),l=[t];function p(h,r,d,o,k,c){return i(),a("div",null,l)}const b=s(n,[["render",p]]);export{u as __pageData,b as default};
