import{_ as t,a,o as e,aR as l}from"./chunks/framework.kUD5hkPg.js";const h="/note/assets/31.DHKl1KmB.png",r="/note/assets/32.p2rvjsTJ.png",d="/note/assets/33.Dk6Qw-AM.png",i="/note/assets/34.BhKaYLQ-.png",s="/note/assets/35.DSwCbsGw.png",o="/note/assets/36.BdylbXtG.png",n="/note/assets/37.QWlG1F0m.png",k=JSON.parse('{"title":"十二、二叉树","description":"","frontmatter":{},"headers":[],"relativePath":"articles/04-其他/算法/12-12.二叉树.md","filePath":"articles/04-其他/算法/12-12.二叉树.md"}'),c={name:"articles/04-其他/算法/12-12.二叉树.md"},p=l('<h1 id="十二、二叉树" tabindex="-1">十二、二叉树 <a class="header-anchor" href="#十二、二叉树" aria-label="Permalink to &quot;十二、二叉树&quot;">​</a></h1><h2 id="二叉树" tabindex="-1">二叉树 <a class="header-anchor" href="#二叉树" aria-label="Permalink to &quot;二叉树&quot;">​</a></h2><p>如果树中的每一个节点最多只能由两个子节点，这样的树就称为二叉树；</p><h3 id="二叉树的组成" tabindex="-1">二叉树的组成 <a class="header-anchor" href="#二叉树的组成" aria-label="Permalink to &quot;二叉树的组成&quot;">​</a></h3><ul><li>二叉树可以为空，也就是没有节点；</li><li>若二叉树不为空，则它由根节点和称为其左子树 TL 和右子树 TR 的两个不相交的二叉树组成；</li></ul><h3 id="二叉树的五种形态" tabindex="-1">二叉树的五种形态 <a class="header-anchor" href="#二叉树的五种形态" aria-label="Permalink to &quot;二叉树的五种形态&quot;">​</a></h3><p><img src="'+h+'" alt="image" data-fancybox="gallery"></p><p>上图分别表示：空的二叉树、只有一个节点的二叉树、只有左子树 TL 的二叉树、只有右子树 TR 的二叉树和有左右两个子树的二叉树。</p><h3 id="二叉树的特性" tabindex="-1">二叉树的特性 <a class="header-anchor" href="#二叉树的特性" aria-label="Permalink to &quot;二叉树的特性&quot;">​</a></h3><ul><li>一个二叉树的第 i 层的最大节点树为：2^(i-1)^，i &gt;= 1；</li><li>深度为 k 的二叉树的最大节点总数为：2^k^ - 1 ，k &gt;= 1；</li><li>对任何非空二叉树，若 n<s>0</s> 表示叶子节点的个数，n<s>2</s>表示度为 2 的非叶子节点个数，那么两者满足关系：n<s>0</s> = n<s>2</s> + 1；如下图所示：H，E，I，J，G 为叶子节点，总数为 5；A，B，C，F 为度为 2 的非叶子节点，总数为 4；满足 n<s>0</s> = n<s>2</s> + 1 的规律。</li></ul><p><img src="'+r+'" alt="image" data-fancybox="gallery"></p><h3 id="特殊的二叉树" tabindex="-1">特殊的二叉树 <a class="header-anchor" href="#特殊的二叉树" aria-label="Permalink to &quot;特殊的二叉树&quot;">​</a></h3><h4 id="完美二叉树" tabindex="-1">完美二叉树 <a class="header-anchor" href="#完美二叉树" aria-label="Permalink to &quot;完美二叉树&quot;">​</a></h4><p>完美二叉树（Perfect Binary Tree）也成为满二叉树（Full Binary Tree），在二叉树中，除了最下一层的叶子节点外，每层节点都有 2 个子节点，这就构成了完美二叉树。</p><p><img src="'+d+'" alt="image" data-fancybox="gallery"></p><h4 id="完全二叉树" tabindex="-1">完全二叉树 <a class="header-anchor" href="#完全二叉树" aria-label="Permalink to &quot;完全二叉树&quot;">​</a></h4><p>完全二叉树（Complete Binary Tree）:</p><ul><li>除了二叉树最后一层外，其他各层的节点数都达到了最大值；</li><li>并且，最后一层的叶子节点从左向右是连续存在，只缺失右侧若干叶子节点；</li><li>完美二叉树是特殊的完全二叉树；</li></ul><p><img src="'+i+'" alt="image" data-fancybox="gallery"></p><p>在上图中，由于 H 缺失了右子节点，所以它不是完全二叉树。</p><h3 id="二叉树的数据存储" tabindex="-1">二叉树的数据存储 <a class="header-anchor" href="#二叉树的数据存储" aria-label="Permalink to &quot;二叉树的数据存储&quot;">​</a></h3><p>常见的二叉树存储方式为数组和链表：</p><h4 id="使用数组" tabindex="-1">使用数组 <a class="header-anchor" href="#使用数组" aria-label="Permalink to &quot;使用数组&quot;">​</a></h4><ul><li>完全二叉树：按从上到下，从左到右的方式存储数据。</li></ul><p><img src="'+s+'" alt="image" data-fancybox="gallery"></p><table><thead><tr><th>节点</th><th>A</th><th>B</th><th>C</th><th>D</th><th>E</th><th>F</th><th>G</th><th>H</th><th>I</th></tr></thead><tbody><tr><td>序号</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td><td>8</td><td>9</td></tr></tbody></table><p>使用数组存储时，取数据的时候也十分方便：左子节点的序号等于父节点序号 <em>2，右子节点的序号等于父节点序号</em> 2 + 1 。</p><ul><li>非完全二叉树：非完全二叉树需要转换成完全二叉树才能按照上面的方案存储，这样会浪费很大的存储空间。</li></ul><p><img src="'+o+'" alt="image" data-fancybox="gallery"></p><table><thead><tr><th>节点</th><th>A</th><th>B</th><th>C</th><th>^</th><th>^</th><th>F</th><th>^</th><th>^</th><th>^</th><th>^</th><th>^</th><th>^</th><th>M</th></tr></thead><tbody><tr><td>序号</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td><td>8</td><td>9</td><td>10</td><td>11</td><td>12</td><td>13</td></tr></tbody></table><h4 id="使用链表" tabindex="-1">使用链表 <a class="header-anchor" href="#使用链表" aria-label="Permalink to &quot;使用链表&quot;">​</a></h4><p>二叉树最常见的存储方式为链表：每一个节点封装成一个 Node，Node 中包含存储的数据、左节点的引用和右节点的引用。</p><p><img src="'+n+'" alt="image" data-fancybox="gallery"></p>',33),m=[p];function _(b,u,g,f,q,y){return e(),a("div",null,m)}const P=t(c,[["render",_]]);export{k as __pageData,P as default};
