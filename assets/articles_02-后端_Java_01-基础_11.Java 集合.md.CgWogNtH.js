import{_ as s,a as i,o as a,aR as n}from"./chunks/framework.kUD5hkPg.js";const g=JSON.parse('{"title":"11.Java 集合","description":"","frontmatter":{},"headers":[],"relativePath":"articles/02-后端/Java/01-基础/11.Java 集合.md","filePath":"articles/02-后端/Java/01-基础/11.Java 集合.md"}'),e={name:"articles/02-后端/Java/01-基础/11.Java 集合.md"},l=n(`<h1 id="_11-java-集合" tabindex="-1">11.Java 集合 <a class="header-anchor" href="#_11-java-集合" aria-label="Permalink to &quot;11.Java 集合&quot;">​</a></h1><h2 id="一-数组与集合" tabindex="-1">一.数组与集合 <a class="header-anchor" href="#一-数组与集合" aria-label="Permalink to &quot;一.数组与集合&quot;">​</a></h2><h3 id="_1-集合与数组存储数据概述" tabindex="-1">1.集合与数组存储数据概述 <a class="header-anchor" href="#_1-集合与数组存储数据概述" aria-label="Permalink to &quot;1.集合与数组存储数据概述&quot;">​</a></h3><p>集合、数组都是对多个数据进行存储操作的结构，简称<code>Java容器</code>。</p><p><strong>说明</strong>：此时的存储，主要指的是内存层面的存储，不涉及到持久化的存储（<code>.txt</code>,<code>.jpg</code>,<code>.avi</code>,<code>数据库</code>）</p><h3 id="_2-数组存储的特点" tabindex="-1">2.数组存储的特点 <a class="header-anchor" href="#_2-数组存储的特点" aria-label="Permalink to &quot;2.数组存储的特点&quot;">​</a></h3><ul><li>一旦初始化以后，其长度就确定了。</li><li>数组一旦定义好，其元素的类型也就确定了。我们也就只能操作指定类型的数据了。 比如：<code>String [] arr;int[] arr1;Object[] arr2;</code></li></ul><h3 id="_3-数组存储的弊端" tabindex="-1">3.数组存储的弊端 <a class="header-anchor" href="#_3-数组存储的弊端" aria-label="Permalink to &quot;3.数组存储的弊端&quot;">​</a></h3><ul><li>一旦初始化以后，其长度就不可修改。</li><li>数组中提供的方法非常有限，对于添加、删除、插入数据等操作，非常不便，同时效率不高。</li><li>获取数组中实际元素个数的需求，数组没有现成的属性或方法可用。</li><li>数组存储数据的特点：有序、可重复。对于无序、不可重复的需求，不能满足。</li></ul><h3 id="_4-集合存储的优点" tabindex="-1">4.集合存储的优点 <a class="header-anchor" href="#_4-集合存储的优点" aria-label="Permalink to &quot;4.集合存储的优点&quot;">​</a></h3><p>解决数组存储数据方面的弊端。</p><h2 id="二-collection-接口" tabindex="-1">二.Collection 接口 <a class="header-anchor" href="#二-collection-接口" aria-label="Permalink to &quot;二.Collection 接口&quot;">​</a></h2><h3 id="_1-单列集合框架结构" tabindex="-1">1.单列集合框架结构 <a class="header-anchor" href="#_1-单列集合框架结构" aria-label="Permalink to &quot;1.单列集合框架结构&quot;">​</a></h3><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">---</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Collection接口：单列集合，用来存储一个一个的对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |---</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> List接口：存储有序的、可重复的数据。 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 动态数组</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">             |---</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ArrayList、LinkedList、Vector</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |---</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Set接口：存储无序的、不可重复的数据</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          |---</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HashSet、LinkedHashSet、TreeSet</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><strong>对应图示</strong></p><p><img src="https://fang-kang.gitee.io/blog-img/java20.bmp#id=VEi1h&amp;originHeight=396&amp;originWidth=782&amp;originalType=binary&amp;ratio=1&amp;status=done&amp;style=none" alt="" data-fancybox="gallery"></p><h3 id="_2-collection-接口常用方法" tabindex="-1">2.Collection 接口常用方法 <a class="header-anchor" href="#_2-collection-接口常用方法" aria-label="Permalink to &quot;2.Collection 接口常用方法&quot;">​</a></h3><ul><li><code>add(Object obj)</code></li><li><code>addAll(Collection coll)</code></li><li><code>size()</code></li><li><code>isEmpty()</code></li><li><code>clear()</code></li><li><code>contains(Object obj)</code></li><li><code>containsAll(Collection coll)</code></li><li><code>remove(Object obj)</code></li><li><code>removeAll(Collection coll)</code></li><li><code>retainsAll(Collection coll)</code></li><li><code>equals(Object obj)</code></li><li><code>hasCode()</code></li><li><code>toArray()</code></li><li><code>interator</code></li></ul><h3 id="_3-colletion-集合与数组间的转换" tabindex="-1">3.Colletion 集合与数组间的转换 <a class="header-anchor" href="#_3-colletion-集合与数组间的转换" aria-label="Permalink to &quot;3.Colletion 集合与数组间的转换&quot;">​</a></h3><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 集合 =&gt; 数组：toArray()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> coll.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr.length;i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr[i]);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 扩展：数组 =&gt; 集合：调用Arrays类的静态方法asList()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">List&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; list </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Arrays.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">asList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[]{</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;AA&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;BB&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;CC&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(list);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">List arr1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Arrays.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">asList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[]{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">456</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">List arr2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Arrays.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">asList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[]{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">456</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr2.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="_4-使用-colletion-集合存储对象-要求对象所属的类满足" tabindex="-1">4.使用 Colletion 集合存储对象，要求对象所属的类满足 <a class="header-anchor" href="#_4-使用-colletion-集合存储对象-要求对象所属的类满足" aria-label="Permalink to &quot;4.使用 Colletion 集合存储对象，要求对象所属的类满足&quot;">​</a></h3><p>向<code>Collection</code>接口的实现类的对象中添加数据<code>obj</code>时，要求<code>obj</code>所在类要重写<code>equals()</code></p><h3 id="_5-本章节对大家的要求" tabindex="-1">5.本章节对大家的要求 <a class="header-anchor" href="#_5-本章节对大家的要求" aria-label="Permalink to &quot;5.本章节对大家的要求&quot;">​</a></h3><ul><li>层次一：选择合适的集合类去实现数据的保存，调用其内部的相关方法。</li><li>层次二：不同的集合类底层的数据结构为何？如何实现数据的操作：增删改查等。</li></ul><h2 id="三-iterator-接口与-foreach-循环" tabindex="-1">三.Iterator 接口与 forEach 循环 <a class="header-anchor" href="#三-iterator-接口与-foreach-循环" aria-label="Permalink to &quot;三.Iterator 接口与 forEach 循环&quot;">​</a></h2><h3 id="_1-遍历-collection-的两种方式" tabindex="-1">1.遍历 Collection 的两种方式 <a class="header-anchor" href="#_1-遍历-collection-的两种方式" aria-label="Permalink to &quot;1.遍历 Collection 的两种方式&quot;">​</a></h3><ul><li>使用迭代器<code>Iterator</code></li><li><code>forEach</code>循环（或增强<code>for</code>循环）</li></ul><h3 id="_2-java-utils-包下定义的迭代器接口-iterator" tabindex="-1">2.java.utils 包下定义的迭代器接口：Iterator <a class="header-anchor" href="#_2-java-utils-包下定义的迭代器接口-iterator" aria-label="Permalink to &quot;2.java.utils 包下定义的迭代器接口：Iterator&quot;">​</a></h3><h4 id="_2-1-说明" tabindex="-1">2.1 说明 <a class="header-anchor" href="#_2-1-说明" aria-label="Permalink to &quot;2.1 说明&quot;">​</a></h4><ul><li><code>Iterator</code>对象称为迭代器（设计模式的一种），主要用于遍历<code>Collection</code>集合中的元素。</li><li><code>GOF</code>给迭代器模式的定义：提供一种方法访问一个容器(<code>container</code>)对象中各个元素，而又不需暴露该对象的内部细节。迭代器模式，就是为容器而生。</li></ul><h4 id="_2-2-作用-遍历集合-collection-元素" tabindex="-1">2.2 作用：遍历集合 Collection 元素 <a class="header-anchor" href="#_2-2-作用-遍历集合-collection-元素" aria-label="Permalink to &quot;2.2 作用：遍历集合 Collection 元素&quot;">​</a></h4><h4 id="_2-3-如何获取实例" tabindex="-1">2.3 如何获取实例 <a class="header-anchor" href="#_2-3-如何获取实例" aria-label="Permalink to &quot;2.3 如何获取实例&quot;">​</a></h4><p><code>coll.iterator()</code>返回一个迭代器实例</p><h4 id="_2-4-遍历的代码实现" tabindex="-1">2.4 遍历的代码实现 <a class="header-anchor" href="#_2-4-遍历的代码实现" aria-label="Permalink to &quot;2.4 遍历的代码实现&quot;">​</a></h4><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Iterator iterator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> coll.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">iterator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//hasNext():判断是否还有下一个元素</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(iterator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hasNext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //next():①指针下移 ②将下移以后集合位置上的元素返回</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(iterator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="_2-5remove-的使用" tabindex="-1">2.5remove()的使用 <a class="header-anchor" href="#_2-5remove-的使用" aria-label="Permalink to &quot;2.5remove()的使用&quot;">​</a></h4><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//如果还未调用next()或上一次调用next方法之后已经调用了remove方法，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//再调用remove都会报IllegalStateException。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//内部定义了remove(),可以在遍历的时候，删除集合中的元素。此方法不同于集合直接调用remove()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Collection coll </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ArrayList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    coll.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    coll.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">456</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    coll.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Tom&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    coll.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //删除集合中&quot;Tom&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Iterator iterator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> coll.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">iterator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(iterator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hasNext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     Object obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> iterator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Tom&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj)){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            iterator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">remove</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h3 id="_3-jdk5-0-新特性-增强-for-循环-foreach-循环" tabindex="-1">3.jdk5.0 新特性--增强 for 循环:(forEach 循环) <a class="header-anchor" href="#_3-jdk5-0-新特性-增强-for-循环-foreach-循环" aria-label="Permalink to &quot;3.jdk5.0 新特性--增强 for 循环:(forEach 循环)&quot;">​</a></h3><h4 id="_3-1-遍历集合举例" tabindex="-1">3.1 遍历集合举例 <a class="header-anchor" href="#_3-1-遍历集合举例" aria-label="Permalink to &quot;3.1 遍历集合举例&quot;">​</a></h4><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Collection coll </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ArrayList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    coll.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    coll.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">456</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    coll.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Tom&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    coll.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   //for(集合元素的类型 局部变量: 集合对象)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Object obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> coll){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p><strong>说明</strong>：内部仍然调用了迭代器</p><h4 id="_3-2-遍历数组举例" tabindex="-1">3.2 遍历数组举例 <a class="header-anchor" href="#_3-2-遍历数组举例" aria-label="Permalink to &quot;3.2 遍历数组举例&quot;">​</a></h4><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[]{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //for(数组元素的类型 局部变量 : 数组对象)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="四-collection-子接口-list-接口" tabindex="-1">四.Collection 子接口：List 接口 <a class="header-anchor" href="#四-collection-子接口-list-接口" aria-label="Permalink to &quot;四.Collection 子接口：List 接口&quot;">​</a></h2><h3 id="_1-存储的数据特点" tabindex="-1">1.存储的数据特点 <a class="header-anchor" href="#_1-存储的数据特点" aria-label="Permalink to &quot;1.存储的数据特点&quot;">​</a></h3><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">---</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Collection接口：单列集合，用来存储一个一个的对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |---</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> List接口：存储有序的、可重复的数据。 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 动态数组</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">             |---</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ArrayList</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">作为List接口的主要实现类：线程不安全的，效率高；底层使用Object[] elementData存储</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          |---</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LinkedList</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">对于频繁的插入、删除操作，使用此类效率比ArrayList高；底层使用双向链表存储</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">             |---</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Vector</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">作为List接口的古老实现类；线程安全的，效率低；底层使用Object[] elementData存储</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="_2-常用方法-记住" tabindex="-1">2.常用方法:(记住) <a class="header-anchor" href="#_2-常用方法-记住" aria-label="Permalink to &quot;2.常用方法:(记住)&quot;">​</a></h3><ul><li>增：<code>add(Object obj)</code></li><li>删：<code>remove(int index)</code></li><li>改：<code>set(int index,Object ele)</code></li><li>查：<code>get(int index)</code></li><li>插：<code>add(int index,Object ele)</code></li><li>长度：<code>size()</code></li><li>遍历： <ul><li><code>Iterator</code>迭代器方式</li><li>增强<code>for</code>循环</li><li>普通的循环</li></ul></li></ul><h3 id="_3-源码分析-难点" tabindex="-1">3.源码分析(难点) <a class="header-anchor" href="#_3-源码分析-难点" aria-label="Permalink to &quot;3.源码分析(难点)&quot;">​</a></h3><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//jdk 7</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ArrayList list </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ArrayList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//底层创建了长度是10的Object[] elementData</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//elementData[0] = new Integer(123);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//如果此次的添加导致底层elementData数组容量不够，则扩容。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//默认情况下，扩容为原来的容量的1.5倍，同时需要将原有数组中的数据复制到新的数组中。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//结论：建议开发中使用带参的构造器：ArrayList list = new ArrayList(int capacity);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//jdk 8中ArrayList的变化</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ArrayList list </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ArrayList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//底层Object[] elementData初始化为{},没有创建长度是10的数组</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//第一次调用add()时,底层才创建了长度10的数组，并将数据123添加到elementData[0]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//后续的添加操作与jdk7无异</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//结论：jdk7中的ArrayList的对象的创建类似于单利的饿汉式，而jdk8中的ArrayList的对象的创建类似于单例的懒汉式，延迟了数组的创建，节省内存。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p><strong>LinkedList 源码分析</strong>：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">LinkedList list </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LinkedList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//内部声明了Node类型的first和last属性，默认值为nulllist.add(123);//将123封装到Node中，创建了Node对象。//其中，Node定义为：体现了LinkedList的双向链表的说法private static class Node&lt;E&gt;{    E item;    Node&lt;E&gt; next;    Node&lt;E&gt; prev;    Node(Node&lt;E&gt; prev,E element ,Node&lt;E&gt; next){        this.item = element;        this.next = next;        this.prev = prev;    }}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>Vector 源码分析</strong>：</p><p><code>jdk7</code>和<code>jdk8</code>中通过<code>Vector</code>构造器创建对象时，底层都创建了长度为 10 的数组。 在扩容方面，默认扩容为原来的数组长度的 2 倍。</p><h3 id="_4-存储的元素的要求" tabindex="-1">4.存储的元素的要求 <a class="header-anchor" href="#_4-存储的元素的要求" aria-label="Permalink to &quot;4.存储的元素的要求&quot;">​</a></h3><p>添加的对象，所在的类要重写<code>equals()</code>方法</p><h3 id="_5-面试题-arraylist、linkedlist、vector-三者的异同" tabindex="-1">5.面试题:ArrayList、LinkedList、Vector 三者的异同？ <a class="header-anchor" href="#_5-面试题-arraylist、linkedlist、vector-三者的异同" aria-label="Permalink to &quot;5.面试题:ArrayList、LinkedList、Vector 三者的异同？&quot;">​</a></h3><ul><li>相同点：这三个类都实现了<code>List</code>接口，存储数据的特点相同：存储有序的、可重复的数据。</li><li>不同：见上(第 1 部分+第 3 部分)</li></ul><h2 id="五-collection-子接口-set-接口" tabindex="-1">五.Collection 子接口：Set 接口 <a class="header-anchor" href="#五-collection-子接口-set-接口" aria-label="Permalink to &quot;五.Collection 子接口：Set 接口&quot;">​</a></h2><h3 id="_1-存储的数据特点-1" tabindex="-1">1.存储的数据特点 <a class="header-anchor" href="#_1-存储的数据特点-1" aria-label="Permalink to &quot;1.存储的数据特点&quot;">​</a></h3><p>无序的、不可重复的元素</p><p><strong>具体的</strong>：</p><p>以<code>HashSet</code>为例说明：</p><ul><li>无序性：不等于随机性。存储的数据在底层数组中并非按照数组索引的顺序添加，而是根据数组的哈希值决定的。</li><li>不可重复性：保证添加的元素按<code>equals()</code>判断时，不能返回<code>true</code>。即：相同的元素只能添加一个。</li></ul><h3 id="_2-元素添加过程-以-hashset-为例" tabindex="-1">2.元素添加过程(以 HashSet 为例) <a class="header-anchor" href="#_2-元素添加过程-以-hashset-为例" aria-label="Permalink to &quot;2.元素添加过程(以 HashSet 为例)&quot;">​</a></h3><p>我们向<code>HashSet</code>中添加元素<code>a</code>，首先调用元素<code>a</code>所在类的<code>hashCode()</code>方法，计算元素<code>a</code>的哈希值，此哈希值接着通过某种算法计算出在<code>HashSet</code>底层数组中的存放位置(即为:索引位置，判断数组此位置上是否已经有元素)： 如果此位置上没有其他元素，则元素<code>a</code>添加成功。 <code>=&gt;</code> 情况 1 如果此位置上有其他元素<code>b</code>(或以链表形式存在的多个元素，则比较元素<code>a</code>与元素<code>b</code>的<code>hash</code>值)： 如果<code>hash</code>值不相同，则元素<code>a</code>添加成功。 <code>=&gt;</code> 情况 2 如果<code>hash</code>值相同，进而需要调用元素<code>a</code>所在类的<code>equals()</code>方法： <code>equals()</code>返回<code>true</code>,元素<code>a</code>添加失败。 <code>equals()</code>返回<code>false</code>,则元素<code>a</code>添加成功。 <code>=&gt;</code> 情况 3</p><p>对于添加成功的情况 2 和情况 3 而言：元素<code>a</code>与已经存在指定索引位置上数据以链表的方式存储。 <code>jdk7</code>：元素<code>a</code>放到数组中，指向原来的元素。 <code>jdk8</code>：原来的元素在数组中，指向元素<code>a</code>。</p><p>总结：七上八下</p><p><code>HashSet</code>底层：数组+链表的结构。(前提：<code>jdk7</code>)</p><h3 id="_3-常用方法" tabindex="-1">3.常用方法 <a class="header-anchor" href="#_3-常用方法" aria-label="Permalink to &quot;3.常用方法&quot;">​</a></h3><p><code>Set</code>接口中没额外定义新的方法，使用的都是<code>Collection</code>中声明过的方法。</p><h3 id="_4-常用实现类" tabindex="-1">4.常用实现类 <a class="header-anchor" href="#_4-常用实现类" aria-label="Permalink to &quot;4.常用实现类&quot;">​</a></h3><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">---</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Collection接口：单列集合，用来存储一个一个的对象       </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|---</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Set接口：存储无序的、不可重复的数据。             </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|---</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HashSet</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">作为Set接口的主要实现类：线程不安全的，可以存储null值                </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|---</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LinkedHashSet</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">作为HashSet的子类；遍历其内部数据时，可以按照添加的顺序遍历。在添加数据的同时，每个数据还维护了两个引用，记录此数据前一个数据和后一个数据。对于频繁的遍历操作，LinkedHashSet效率高于HashSet。             </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|---</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TreeSet</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">可以按照添加对象的指定属性，进行排序。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_5-存储对象所在类的要求" tabindex="-1">5.存储对象所在类的要求 <a class="header-anchor" href="#_5-存储对象所在类的要求" aria-label="Permalink to &quot;5.存储对象所在类的要求&quot;">​</a></h3><p><strong>HashSet/LinkedHashSet</strong>：</p><ul><li>要求：向<code>Set</code>(主要指：<code>HashSet/LinkedHashSet</code>)中添加的数据，其所在的类一定要重写<code>hashCode()</code>和<code>equals()</code></li><li>要求：重写的<code>hashCode()</code>和<code>equals()</code>尽可能保持一致性：相等的对象必须具有相等的散列码</li><li>重写两个方法的小技巧：对象中用作<code>equals()</code>方法比较的<code>Field</code>,都应该用来计算<code>hashCode</code>值。</li></ul><p><strong>TreeSet</strong>：</p><ul><li>自然排序中，比较两个对象是否相同的标准为：<code>compareTo()</code>返回 0,不再是<code>equals()</code></li><li>定制排序中，比较两个对象是否相同的标准为：<code>compare()</code>返回 0,不再是<code>equals()</code></li></ul><h3 id="_6-treeset-的使用" tabindex="-1">6.TreeSet 的使用 <a class="header-anchor" href="#_6-treeset-的使用" aria-label="Permalink to &quot;6.TreeSet 的使用&quot;">​</a></h3><h4 id="_6-1-使用说明" tabindex="-1">6.1 使用说明 <a class="header-anchor" href="#_6-1-使用说明" aria-label="Permalink to &quot;6.1 使用说明&quot;">​</a></h4><ul><li>向<code>TreeSet</code>中添加的数据，要求是相同类的对象。</li><li>两种排序方式：自然排序(实现<code>Comparable</code>接口和定制排序(<code>Comparator</code>))</li></ul><h4 id="_6-2-常用的排序方式" tabindex="-1">6.2 常用的排序方式 <a class="header-anchor" href="#_6-2-常用的排序方式" aria-label="Permalink to &quot;6.2 常用的排序方式&quot;">​</a></h4><p><strong>方式一:自然排序</strong></p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Testpublic</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){    TreeSet set </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TreeSet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//失败 不能添加不同类的对象    //set.add(123);    //set.add(456);    //set.add(&quot;AA&quot;);    set.add(new User(&quot;Tom&quot;,12));    set.add(new User(&quot;Jeck&quot;,22));    set.add(new User(&quot;Jim&quot;,32));    Iterator iterator = set.iterator();    while(iterator.hasNext()){        System.out.println(iterator.next());    }}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>方式二:定制排序</strong></p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Testpublic</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){ Comparator com </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Comparator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> compare</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Object o1,Object o2){        </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(o1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> User </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> o2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> User){            User u1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (User)o1;            User u2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (User)o2;            </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Integer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">compare</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(u1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),u2.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());        }</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{            </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RuntimeException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;输入的数据类型不匹配&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);        }   }    set.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Tom&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));    set.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Jeck&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">22</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));    set.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Jim&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));    Iterator iterator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> set.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">iterator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();    </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(iterator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hasNext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()){        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(iterator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());    }}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="六-map-接口" tabindex="-1">六.Map 接口 <a class="header-anchor" href="#六-map-接口" aria-label="Permalink to &quot;六.Map 接口&quot;">​</a></h2><h3 id="_1-常用实现类结构" tabindex="-1">1.常用实现类结构 <a class="header-anchor" href="#_1-常用实现类结构" aria-label="Permalink to &quot;1.常用实现类结构&quot;">​</a></h3><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">---</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Map：双列数据，存储key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">value对的数据 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">---</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">类似与高中的函数：y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x)     </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|---</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">HashMap</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">作为Map的主要实现类；线程不安全的，效率高；存储null的key和value            </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|---</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">LinkedHashMap：保证在遍历map元素时，可以按照添加的顺序实现遍历。原因：在原有的HashMap底层结构基础上，添加了一对指针，指向前一个和后一个元素。对于频繁的遍历操作，此类执行效率高于HashMap。        </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|---</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">TreeMap：保证按照添加的key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">value对进行排序，实现排序遍历。此时考虑key的自然排序或定制排序        </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|---</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Hashtable</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">作为古老的实现类；线程安全的，效率低；不能存储null的key和value   </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|---</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Properties：常用来处理配置文件。key和value都是String类型</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>HsahMap</code>的底层：数组+链表(<code>jdk7</code>及之前)</p><p>数组+链表+红黑树(<code>jdk8</code>)</p><p><strong>面试题</strong>：</p><ul><li><code>HashMap</code>的底层实现原理？</li><li><code>HashMap</code>和<code>Hashtable</code>的异同？</li><li><code>CurrentHashMap</code>与<code>Hashtable</code>的异同？</li></ul><h3 id="_2-存储结构的理解" tabindex="-1">2.存储结构的理解 <a class="header-anchor" href="#_2-存储结构的理解" aria-label="Permalink to &quot;2.存储结构的理解&quot;">​</a></h3><ul><li><code>Map</code>中的<code>key</code>：无序的、不可重复的，使用<code>Set</code>存储所在的<code>key</code> <code>=&gt;</code> <code>key</code>所在的类要重写<code>equals()</code>和<code>hashCode()</code> (以<code>HashMap</code>为例)</li><li><code>Map</code>中的<code>value</code>：无序的、可重复的，使用<code>Collection</code>存储所在的<code>value</code> <code>=&gt;</code> <code>value</code>所在的类要重写<code>equals()</code></li><li>一个键值对：<code>key-value</code>构成了一个<code>Entry</code>对象</li><li><code>Map</code>中的<code>entry</code>：无序的、不可重复的，使用<code>Set</code>存储所有的<code>entry</code></li></ul><h3 id="_3-常用方法-1" tabindex="-1">3.常用方法 <a class="header-anchor" href="#_3-常用方法-1" aria-label="Permalink to &quot;3.常用方法&quot;">​</a></h3><ul><li>添加：<code>put(Object key,Object value)</code></li><li>删除：<code>remove(Object key)</code></li><li>修改：<code>put(Object key,Object value)</code></li><li>查询：<code>get(Object key)</code></li><li>长度：<code>size()</code></li><li>遍历：<code>keySet()</code>、<code>values()</code>、<code>entrySet()</code></li></ul><h3 id="_4-内存结构说明-难点" tabindex="-1">4.内存结构说明(难点) <a class="header-anchor" href="#_4-内存结构说明-难点" aria-label="Permalink to &quot;4.内存结构说明(难点)&quot;">​</a></h3><h4 id="_4-1hashmap-在-jdk7-中实现原理" tabindex="-1">4.1HashMap 在 jdk7 中实现原理 <a class="header-anchor" href="#_4-1hashmap-在-jdk7-中实现原理" aria-label="Permalink to &quot;4.1HashMap 在 jdk7 中实现原理&quot;">​</a></h4><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">HashMap map </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HashMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">在实例化以后，底层创建了长度是16的一维数组Entry[] table</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">...可能已经执行过多次put...</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">map.put(key1,value1);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">首先，调用key1所在类的hashCode()计算key1哈希值，此哈希值经过某种算法计算以后，得到Entry数组中的存放位置。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">如果此位置上的数据为空，此时的key1-value1添加成功。 ---情况1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">如果此位置上的数据不为空，(意味着此位置上存在一个或多个数据(以链表形式存在)),比较key1和已经存在的一个或多个数据的哈希值：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">如果key1的哈希值与已经存在的数据的哈希值都不相同，此时key1-value1添加成功。    ---情况2</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">如果key1的哈希值与已经存在的某一个数据(key2-value2)的哈希值相同，继续比较：调用key1所在类的equals(key2)方法，比较：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">如果equals()返回false：此时key1-value1添加成功。---情况3</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">如果equals()返回ture：此时value1替换value2。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">补充：关于情况2和情况3：此时key1-value1和原来的数据以链表的方式存储。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">在不断的添加过程中，会涉及到扩容问题，当超出临界值(且要存放的位置非空)时，扩容。默认的扩容方式：扩容为原来容量的2倍，并将原有的数据复制过来。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*/</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h4 id="_4-2hashmap-在-jdk8-中相较于-jdk7-在底层实现方面的不同" tabindex="-1">4.2HashMap 在 jdk8 中相较于 jdk7 在底层实现方面的不同 <a class="header-anchor" href="#_4-2hashmap-在-jdk8-中相较于-jdk7-在底层实现方面的不同" aria-label="Permalink to &quot;4.2HashMap 在 jdk8 中相较于 jdk7 在底层实现方面的不同&quot;">​</a></h4><ul><li><code>new HashMap()</code>：底层没有创建一个长度为 16 的数组</li><li><code>jdk8</code>底层的数组 是：<code>Node[]</code>,而非<code>Entry[]</code></li><li>首次调用<code>put()</code>方法时，底层创建长度为 16 的数组</li><li><code>jdk7</code>底层结构只有：数组+链表。<code>jdk8</code>中底层结构：数组+链表+红黑树。 <ul><li>形成链表时，七上八下(<code>jdk7</code>:新的元素指向旧的元素。<code>jdk8</code>:旧的元素指向新的元素)</li><li>当数组的某一个索引位置上的元素以链表形式存在的数据个数 &gt;8 且当前数组的长度 &gt; 64 时，此时此索引位置上的所有数据改为使用红黑树存储。</li></ul></li></ul><h4 id="_4-3hashmap-底层典型属性的属性的说明" tabindex="-1">4.3HashMap 底层典型属性的属性的说明 <a class="header-anchor" href="#_4-3hashmap-底层典型属性的属性的说明" aria-label="Permalink to &quot;4.3HashMap 底层典型属性的属性的说明&quot;">​</a></h4><ul><li><code>DEFAULT_INITIAL_CAPACITY</code>:<code>HashMap</code>的默认容量：16</li><li><code>DEFAULT_LOAD_FACTOR</code>:<code>HashMap</code>的默认加载因子：0.75</li><li><code>threshold</code>:扩容的临界值 = 容量<em>加载因子：16</em> 0.75 =&gt; 12</li><li><code>TREEIFY_THRESHOLD</code>:<code>Bucket</code>中链表长度大于该默认值，转换为红黑树：8</li><li><code>MIN_TREEIFY_CAPACITY</code>:桶中的<code>Node</code>被树化时最小的<code>hash</code>表容量：64</li></ul><h4 id="_4-4linkedhashmap-的底层实现原理-了解" tabindex="-1">4.4LinkedHashMap 的底层实现原理(了解) <a class="header-anchor" href="#_4-4linkedhashmap-的底层实现原理-了解" aria-label="Permalink to &quot;4.4LinkedHashMap 的底层实现原理(了解)&quot;">​</a></h4><p><code>LinkedHashMap</code>底层使用的结构与<code>HashMap</code>相同，因为<code>LinkedHashMap</code>继承于<code>HashMap</code></p><p>区别就在于：<code>LinkedHashMap</code>内部提供了<code>Entry</code>,替换<code>HashMap</code>中的<code>Node</code></p><p><code>HashMap</code>中的内部类：<code>Node</code></p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">K</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">V</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Map.Entry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">K</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">V</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hash;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> K key;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    V value;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Node&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">K</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">V</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; next;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><code>LinkedHashMap</code>中的内部类：<code>Entry</code></p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Entry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">K</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">V</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HashMap.Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">K</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">V</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Entry&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">K</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">V</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; before,after;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Entry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> hash</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,K </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,V </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,Node&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">K</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">V</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(hash,key,value,next);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_5-treemap-的使用" tabindex="-1">5.TreeMap 的使用 <a class="header-anchor" href="#_5-treemap-的使用" aria-label="Permalink to &quot;5.TreeMap 的使用&quot;">​</a></h3><ul><li>向<code>TreeMap</code>中添加<code>key-value</code>,要求<code>key</code>必须是由同一个类创建的对象</li><li>因为要按照<code>key</code>进行排序：自然排序、定制排序</li></ul><h3 id="_6-使用-properties-读取配置文件" tabindex="-1">6.使用 Properties 读取配置文件 <a class="header-anchor" href="#_6-使用-properties-读取配置文件" aria-label="Permalink to &quot;6.使用 Properties 读取配置文件&quot;">​</a></h3><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Properties:常用来处理配置文件。key和value都是String类型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] args){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    FileInputStream fis </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Properties pros </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Properties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        fis </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FileInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jdbc.properties&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        pros.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fis);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 加载流对应的文件</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        String name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pros.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        String password </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pros.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;password&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(IoException </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printStackTrace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">finally</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fis </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                fis.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(IoException </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printStackTrace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h2 id="七-collection-工具类的使用" tabindex="-1">七.Collection 工具类的使用 <a class="header-anchor" href="#七-collection-工具类的使用" aria-label="Permalink to &quot;七.Collection 工具类的使用&quot;">​</a></h2><h3 id="_1-作用" tabindex="-1">1.作用 <a class="header-anchor" href="#_1-作用" aria-label="Permalink to &quot;1.作用&quot;">​</a></h3><p>操作<code>Collection</code>和<code>Map</code>的工具类</p><h3 id="_2-常用方法" tabindex="-1">2.常用方法 <a class="header-anchor" href="#_2-常用方法" aria-label="Permalink to &quot;2.常用方法&quot;">​</a></h3><ul><li><code>reverse(List)</code>:反转<code>List</code>中元素的顺序</li><li><code>shuffle(List)</code>:对<code>List</code>集合元素进行随机排序</li><li><code>sort(List)</code>:根据元素的自然顺序对指定<code>List</code>集合元素进行排序</li><li><code>sort(List,Comparator)</code>:根据指定的<code>Comparator</code>产生的顺序对<code>List</code>集合元素进行排序</li><li><code>swap(List,int i,int j)</code>:将指定的<code>List</code>集合中的<code>i</code>处元素和<code>j</code>处元素进行交换</li><li><code>Object max(Collection)</code>:根据元素的自然顺序，返回给定集合中的最大元素</li><li><code>Object max(Collection,Comparator)</code>:根据<code>Comparator</code>指定的顺序，返回给定集合中的最大元素</li><li><code>Object min(Collection)</code></li><li><code>Object min(Collection,Comparator)</code></li><li><code>int frequency(Collection,Object)</code>:返回指定集合中指定元素的出现次数</li><li><code>void copy(List dest,List src)</code>：将<code>src</code>中的内容复制到<code>desc</code>中</li><li><code>boolean replaceAll(List list,Object oldVal,Object newVal)</code>:使用新值替换<code>List</code>对象的旧值</li></ul><p><strong>说明</strong>：<code>ArrayList</code>和<code>HashMap</code>都是线程不安全的，如果程序要求线程安全，我们可以将<code>ArrayList</code>和<code>HashMap</code>转换成线程安全的。使用<code>synchronizedList(List list)</code>和<code>synchronizedMap(Map map)</code></p><h3 id="_3-面试题" tabindex="-1">3.面试题 <a class="header-anchor" href="#_3-面试题" aria-label="Permalink to &quot;3.面试题&quot;">​</a></h3><p><code>Collection</code>和<code>Collections</code>的区别？</p>`,123),h=[l];function t(p,k,r,d,o,E){return a(),i("div",null,h)}const y=s(e,[["render",t]]);export{g as __pageData,y as default};
