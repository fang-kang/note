import{_ as s,a as i,o as a,aR as n}from"./chunks/framework.kUD5hkPg.js";const g=JSON.parse('{"title":"09.Java 常用类","description":"","frontmatter":{},"headers":[],"relativePath":"articles/02-后端/Java/01-基础/09.Java 常用类.md","filePath":"articles/02-后端/Java/01-基础/09.Java 常用类.md"}'),l={name:"articles/02-后端/Java/01-基础/09.Java 常用类.md"},e=n(`<h1 id="_09-java-常用类" tabindex="-1">09.Java 常用类 <a class="header-anchor" href="#_09-java-常用类" aria-label="Permalink to &quot;09.Java 常用类&quot;">​</a></h1><h2 id="一-string-类" tabindex="-1">一.String 类 <a class="header-anchor" href="#一-string-类" aria-label="Permalink to &quot;一.String 类&quot;">​</a></h2><h3 id="_1-概述" tabindex="-1">1.概述 <a class="header-anchor" href="#_1-概述" aria-label="Permalink to &quot;1.概述&quot;">​</a></h3><p><strong>String:字符串，使用一对“”引起来表示</strong></p><ul><li><code>String</code>声明为 <code>final</code>的，不可被继承</li><li><code>String</code>实现了 <code>Serializable</code>接口：表示字符串是支持序列化的。 实现了 <code>Comparable</code>接口：表示 <code>String</code> 可以比较大小</li><li><code>String</code>内部定义了 <code>final chat[] value</code> 用于存储字符串数据</li><li>通过字面量的方式（区别于 <code>new</code>的方式）给一个字符串赋值，此时的字符串值声明在字符串常量池中。</li><li>字符串常量池中是不会存储相同内容的字符串的。</li></ul><h3 id="_2-string-的不可变性" tabindex="-1">2.String 的不可变性 <a class="header-anchor" href="#_2-string-的不可变性" aria-label="Permalink to &quot;2.String 的不可变性&quot;">​</a></h3><h4 id="_2-1-说明" tabindex="-1">2.1 说明 <a class="header-anchor" href="#_2-1-说明" aria-label="Permalink to &quot;2.1 说明&quot;">​</a></h4><ul><li>当对字符串重新赋值时，需要重写指定内存区域赋值，不能使用原有的<code>value</code>值进行赋值。</li><li>当对现有的字符串进行连接操作时，也需要重新指定内存区域赋值，不能使用原有的<code>value</code>值进行赋值。</li><li>当调用<code>String</code>的<code>replace()</code>方法修改指定字符或字符串时，也需要重新指定内存区域赋值，不能使用原有的<code>value</code>值进行赋值。</li></ul><h4 id="_2-2-代码举例" tabindex="-1">2.2 代码举例 <a class="header-anchor" href="#_2-2-代码举例" aria-label="Permalink to &quot;2.2 代码举例&quot;">​</a></h4><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        String s1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;abc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 字面量的定义方式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        String s2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;abc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // s1 = &quot;hello&quot;;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s2); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 比较s1和s2的地址值</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s1); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// hello</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s2); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// abc</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;**********************************************&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        String s3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;abc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        s3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;def&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s3);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//abcdef</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;**********************************************&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        String s4 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;abc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        String s5 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s4.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;m&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s4);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//abc</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s5);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//mbc</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h3 id="_3-string-实例化的不同方式" tabindex="-1">3.String 实例化的不同方式 <a class="header-anchor" href="#_3-string-实例化的不同方式" aria-label="Permalink to &quot;3.String 实例化的不同方式&quot;">​</a></h3><h4 id="_3-1-方式说明" tabindex="-1">3.1 方式说明 <a class="header-anchor" href="#_3-1-方式说明" aria-label="Permalink to &quot;3.1 方式说明&quot;">​</a></h4><ul><li>方式一：通过<code>字面量定义</code>的方式</li><li>方式二：通过<code>new + 构造器</code>的方式</li></ul><h4 id="_3-2-代码举例" tabindex="-1">3.2 代码举例 <a class="header-anchor" href="#_3-2-代码举例" aria-label="Permalink to &quot;3.2 代码举例&quot;">​</a></h4><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 通过字面量定义的方式：此时的s1和s2的数据javaEE声明在方法区中的字符串常量池中</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    String s1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;javaEE&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    String s2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;javaEE&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 通过new + 构造器的方式：此时的s3和s4保存的地址值，是数据在堆空间开辟空间以后对应的地址值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    String s3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;javaEE&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    String s4 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;javaEE&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s2); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s3); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s4); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s4); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//false</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;**********************************************&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Person p1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;tom&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">13</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Person p2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;tom&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">13</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p1.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p2.name);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p1.name.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p2.name));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h4 id="_3-3-面试题" tabindex="-1">3.3 面试题 <a class="header-anchor" href="#_3-3-面试题" aria-label="Permalink to &quot;3.3 面试题&quot;">​</a></h4><p><strong>面试题：String s = new String(&quot;abc&quot;);方式创建对象，在内存中创建了几个对象？</strong> 两个：一个是堆空间中<code>new</code>结构，另一个是<code>char[]</code>对应的常量池中的数据：<code>&quot;abc&quot;</code></p><h3 id="_4-字符串拼接方式赋值的对比" tabindex="-1">4.字符串拼接方式赋值的对比 <a class="header-anchor" href="#_4-字符串拼接方式赋值的对比" aria-label="Permalink to &quot;4.字符串拼接方式赋值的对比&quot;">​</a></h3><h4 id="_4-1-说明" tabindex="-1">4.1 说明 <a class="header-anchor" href="#_4-1-说明" aria-label="Permalink to &quot;4.1 说明&quot;">​</a></h4><ul><li>常量与常量的拼接结果在常量池。且常量池中不会存在相同内容的常量。</li><li>只要其中有一个是变量，结果就在堆中。</li><li>如果拼接的结果调用<code>intern()</code>方法，返回值就在常量池中。</li></ul><h4 id="_4-2-代码举例" tabindex="-1">4.2 代码举例 <a class="header-anchor" href="#_4-2-代码举例" aria-label="Permalink to &quot;4.2 代码举例&quot;">​</a></h4><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    String s1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;javaEE&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    String s2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;hadloop&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    String s3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;javaEEhadloop&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    String s4 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;javaEE&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;hadloop&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    String s5 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;hadloop&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    String s6 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;javaEE&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s2;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    String s7 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s2;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s4);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s5);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s6);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s5 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s6);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s7);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//false</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    String s8 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s5.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">intern</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//返回值得到的s8使用的常量池中已经存在的&quot;javaEEhadloop&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s8 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s3);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h3 id="_5-常用方法" tabindex="-1">5.常用方法 <a class="header-anchor" href="#_5-常用方法" aria-label="Permalink to &quot;5.常用方法&quot;">​</a></h3><ul><li><code>int length()</code>：返回字符串的长度：<code>return value.length</code></li><li><code>char charAt(int index)</code>:返回某索引处的字符<code>return value[index]</code></li><li><code>boolean isEmpty()</code>:判断是否是空字符串：<code>return value.length == 0</code></li><li><code>String toLowerCase()</code>:使用默认语言环境，将<code>String</code>中的所有字符转换为小写</li><li><code>String toUpperCase()</code>:使用默认语言环境，将<code>String</code>中的所有字符转换为大写</li><li><code>String trim()</code>:返回字符串的副本，忽略前导空白和尾部空白</li><li><code>boolean equals(Object obj)</code>: 比较字符串的内容是否相同</li><li><code>boolean equalsIgnoreCase(String anotherString)</code>: 与<code>equals</code>方法类似，忽略大小写</li><li><code>String concat(String str)</code>: 将指定字符串连接到此字符串的结尾。等价于用<code>“+”</code></li><li><code>int compareTo(String anotherString)</code>: 比较两个字符串的大小</li><li><code>String substring(int beginIndex)</code>: 返回一个新的字符串，它是此字符串的从<code>beginIndex</code>开始截取</li><li><code>String substring(int beginIndex,int endIndex)</code>： 返回一个新的字符串，它是此字符串的从<code>beginIndex</code>开始截取到<code>endIndex</code>（不包含）的一个新的字符串</li><li><code>boolean contains(CharSequences)</code>:当且仅当此字符串包含指定的<code>char</code>值序列时，返回<code>true</code></li><li><code>int indexOf(String str)</code>:返回指定子字符串在此字符串中第一次出现处的索引</li><li><code>int indexOf(String str,int fromIndex)</code>:返回指定子字符串在此字符串中第一次出现处的索引,从指定的索引开始</li><li><code>int lastIndexOf(String str)</code>:返回指定子字符串在此字符串中最右边出现处的索引</li><li><code>int lastIndexOf(String str,int fromIndex)</code>:返回指定子字符串在此字符串中最后一次出现处的索引,从指定的索引开始反向搜索 <strong>注：</strong><code>**indexOf**</code><strong>和</strong><code>**lastIndexOf**</code><strong>方法如果未找到都是返回</strong><code>**-1**</code></li><li><code>boolean endsWith(String suffix)</code>:测试此字符串是否以指定的后缀结束</li><li><code>boolean startsWith(String preix)</code>:测试此字符串是否以指定的前缀开始</li><li><code>boolean startsWith(String preix,int toffset)</code>:测试此字符串是否从指定索引开始的子字符串是否以指定前缀开始</li></ul><p><strong>替换</strong>：</p><ul><li><code>String replace(char oldChar,char newChar)</code>：返回一个新的字符串，它是通过用<code>newChar</code>替换此字符串中出现的<code>oldChar</code>得到的。</li></ul><h3 id="_6-string-与其他结构的转换" tabindex="-1">6.String 与其他结构的转换 <a class="header-anchor" href="#_6-string-与其他结构的转换" aria-label="Permalink to &quot;6.String 与其他结构的转换&quot;">​</a></h3><h4 id="_6-1-与基本数据类型、包装类之间的转换" tabindex="-1">6.1 与基本数据类型、包装类之间的转换 <a class="header-anchor" href="#_6-1-与基本数据类型、包装类之间的转换" aria-label="Permalink to &quot;6.1 与基本数据类型、包装类之间的转换&quot;">​</a></h4><ul><li><code>String</code> <code>=&gt;</code> 基本数据类型、包装类：调用包装类的静态方法：<code>parseXxx(str)</code></li><li>基本数据类型、包装类 <code>=&gt;</code> <code>String</code> ：调用<code>String</code>重载的<code>valueOf(xxx)</code></li></ul><h4 id="_6-2-与字符数组之间的转换" tabindex="-1">6.2 与字符数组之间的转换 <a class="header-anchor" href="#_6-2-与字符数组之间的转换" aria-label="Permalink to &quot;6.2 与字符数组之间的转换&quot;">​</a></h4><ul><li><code>String</code> <code>=&gt;</code> <code>char[]</code>：调用<code>String</code>的<code>toCharArray()</code></li></ul><h4 id="_6-3-与字节数组之间的转换" tabindex="-1">6.3 与字节数组之间的转换 <a class="header-anchor" href="#_6-3-与字节数组之间的转换" aria-label="Permalink to &quot;6.3 与字节数组之间的转换&quot;">​</a></h4><ul><li><p>编码：<code>String</code> <code>=&gt;</code> <code>byte[]</code>：调用<code>String</code>的<code>getBytes()</code></p></li><li><p>解码：<code>byte[]</code> <code>=&gt;</code> <code>String</code> ：调用<code>String</code>的构造器</p></li><li><p>编码：字符串 <code>=&gt;</code> 字节：(看得懂 <code>=&gt;</code> 看不懂的二进制数据)</p></li><li><p>解码：编码的逆过程， 字节 <code>=&gt;</code> 字符串（看不懂的二进制数据<code>=&gt;</code> 看得懂)</p></li></ul><div class="tip custom-block"><p class="custom-block-title">说明</p><p>解码时，要求解码使用的字符集必须与编码时使用的字符集一致，否则会出现乱码。</p></div><h4 id="_6-4-与-stringbuffer、stringbuilder-之间的转换" tabindex="-1">6.4 与 StringBuffer、StringBuilder 之间的转换 <a class="header-anchor" href="#_6-4-与-stringbuffer、stringbuilder-之间的转换" aria-label="Permalink to &quot;6.4 与 StringBuffer、StringBuilder 之间的转换&quot;">​</a></h4><ul><li><code>String</code> <code>=&gt;</code> <code>StringBuffer、StringBulder</code>：调用<code>StringBuffer、StringBulder</code>的构造器</li><li><code>StringBuffer、StringBulder</code> <code>=&gt;</code> <code>String</code> ：调用<code>String</code>的构造器 <code>StringBuffer、StringBulder</code>的<code>toString()</code></li></ul><h3 id="_7-jvm-中字符串常量池存放位置" tabindex="-1">7.JVM 中字符串常量池存放位置 <a class="header-anchor" href="#_7-jvm-中字符串常量池存放位置" aria-label="Permalink to &quot;7.JVM 中字符串常量池存放位置&quot;">​</a></h3><ul><li><code>jdk 1.6(jdk 6.0, java 6.0)</code>：字符串常量池存储在方法区(永久区)</li><li><code>jdk 1.7</code>：字符串常量池存储在堆空间</li><li><code>jdk 1.8</code>：字符串常量池存储在方法区(元空间)</li></ul><h3 id="_8-常见算法题目的考查" tabindex="-1">8.常见算法题目的考查 <a class="header-anchor" href="#_8-常见算法题目的考查" aria-label="Permalink to &quot;8.常见算法题目的考查&quot;">​</a></h3><ul><li>模拟一个<code>trim</code>方法，去除字符串两端的空格</li><li>将一个字符串进行反转。将字符串中指定部分进行反转。比如<code>abcdefg</code>反转为<code>abfedcg</code></li><li>获取一个字符串在另一个字符串中出现的次数</li><li>获取两个字符串中最大相同子串</li><li>对字符串中字符进行自然顺序排序</li></ul><h2 id="二-stringbuffer、stringbuilder" tabindex="-1">二.StringBuffer、StringBuilder <a class="header-anchor" href="#二-stringbuffer、stringbuilder" aria-label="Permalink to &quot;二.StringBuffer、StringBuilder&quot;">​</a></h2><h3 id="_1-string、stringbuffer、stringbuilder-三者的对比" tabindex="-1">1.String、StringBuffer、StringBuilder 三者的对比 <a class="header-anchor" href="#_1-string、stringbuffer、stringbuilder-三者的对比" aria-label="Permalink to &quot;1.String、StringBuffer、StringBuilder 三者的对比&quot;">​</a></h3><ul><li><code>String</code>：不可变的字符序列：底层使用<code>char[]</code>存储</li><li><code>StringBuffer</code>：可变的字符序列;线程安全的，效率低；底层使用<code>char[]</code>存储</li><li><code>StringBuilder</code>：可变的字符序列；<code>jdk5.0</code>新增的，线程不安全的，效率高；底层使用<code>char[]</code>存储</li></ul><h3 id="_2-stringbuffer、stringbuilder-的内存解析" tabindex="-1">2.StringBuffer、StringBuilder 的内存解析 <a class="header-anchor" href="#_2-stringbuffer、stringbuilder-的内存解析" aria-label="Permalink to &quot;2.StringBuffer、StringBuilder 的内存解析&quot;">​</a></h3><p><strong>以 StringBuffer 为例</strong>:</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// char[] value = new char[0];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String str1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;abc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// char[] value = new char[]{&#39;a&#39;,&#39;b&#39;,&#39;c&#39;};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">StringBuffer sb1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> StringBuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// char[] value = new char[16];底层创建了一个长度是16的数组</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sb1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sb1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//value[0] = &#39;a&#39;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sb1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;b&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//value[1] = &#39;b&#39;;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">StringBuffer sb2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> StringBuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;abc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// char[] value = new char[&quot;abc.&quot;length() + 16];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 问题1：System.out.println(sb2.length()); // 3</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 问题2：扩容问题：如果要添加的数据底层数组乘不下了，那就需要扩容底层的数组。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   默认情况下，扩容为原来的2倍 + 2，同时将原数组中的元素复制到新的数组中。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 指导意义：开发中建议大家使用：StringBuffer、StringBuilder</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="_3-对比-string、stringbuffer、stringbuilder-三者的执行效率" tabindex="-1">3.对比 String、StringBuffer、StringBuilder 三者的执行效率 <a class="header-anchor" href="#_3-对比-string、stringbuffer、stringbuilder-三者的执行效率" aria-label="Permalink to &quot;3.对比 String、StringBuffer、StringBuilder 三者的执行效率&quot;">​</a></h3><p>从高到低排列：<code>StringBuilder</code> &gt; <code>StringBuffer</code> &gt; <code>String</code></p><h3 id="_4-stringbuffer、stringbuilder-中的常用方法" tabindex="-1">4.StringBuffer、StringBuilder 中的常用方法 <a class="header-anchor" href="#_4-stringbuffer、stringbuilder-中的常用方法" aria-label="Permalink to &quot;4.StringBuffer、StringBuilder 中的常用方法&quot;">​</a></h3><ul><li>增：<code>append(xxx)</code></li><li>删：<code>delete(int start,int end)</code></li><li>改：<code>setCharAt(int n,char ch)</code> / <code>replace(int start,int end,String str)</code></li><li>查：<code>charAt(int n)</code></li><li>插：<code>insert(int offest,xxx)</code></li><li>长度：<code>length()</code></li><li>遍历：<code>for() + charAt() / toString()</code></li></ul><h2 id="三-jdk8-之前日期时间-api" tabindex="-1">三.JDK8 之前日期时间 API <a class="header-anchor" href="#三-jdk8-之前日期时间-api" aria-label="Permalink to &quot;三.JDK8 之前日期时间 API&quot;">​</a></h2><h3 id="_1-获取系统当前时间" tabindex="-1">1.获取系统当前时间 <a class="header-anchor" href="#_1-获取系统当前时间" aria-label="Permalink to &quot;1.获取系统当前时间&quot;">​</a></h3><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> time </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">currentTimeMillis</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 返回当前时间与1970年1月1日0时0分0秒之间以毫秒为单位的时间差</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 称为时间戳</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_2-java-util-date-类与-java-sql-date-类" tabindex="-1">2.java.util.Date 类与 java.sql.Date 类 <a class="header-anchor" href="#_2-java-util-date-类与-java-sql-date-类" aria-label="Permalink to &quot;2.java.util.Date 类与 java.sql.Date 类&quot;">​</a></h3><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">java.utils.Date类</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      |---</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">java.sql.Date类</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>两个构造器的使用： <ul><li>构造器一：<code>Date()</code>:创建一个对应当前时间的<code>Date</code>对象</li><li>构造器二：创建指定毫秒数的<code>Date</code>对象</li></ul></li><li>两个方法的使用： <ul><li><code>toString()</code>：显示当前的年、月、日、时、分、秒</li><li><code>getTime()</code>：获取当前<code>Date()</code>对象对应的毫秒数。（时间戳）</li></ul></li><li><code>java.sql.Date</code>对应着数据库中的日期类型的变量 <ul><li>如何实例化</li><li>如何将<code>java.util.Date</code>对象转换为<code>java.sql.Date</code>对象</li></ul></li></ul><h3 id="_3-java-text-simpledataformat-类" tabindex="-1">3.java.text.SimpleDataFormat 类 <a class="header-anchor" href="#_3-java-text-simpledataformat-类" aria-label="Permalink to &quot;3.java.text.SimpleDataFormat 类&quot;">​</a></h3><p><code>SimpleDataFormat</code>对日期<code>Date</code>类的格式化和解析</p><h4 id="_3-1-两个操作" tabindex="-1">3.1 两个操作 <a class="header-anchor" href="#_3-1-两个操作" aria-label="Permalink to &quot;3.1 两个操作&quot;">​</a></h4><p>格式化：日期 =&gt; 字符串 解析：字符串 =&gt; 日期</p><h4 id="_3-2-simpledataformat-的实例化-new-构造器" tabindex="-1">3.2 SimpleDataFormat 的实例化： new + 构造器 <a class="header-anchor" href="#_3-2-simpledataformat-的实例化-new-构造器" aria-label="Permalink to &quot;3.2 SimpleDataFormat 的实例化： new + 构造器&quot;">​</a></h4><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// *****************按照指定的方法格式化和解析：调用带参的构造器*****************//</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Date date1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SimpleDataFormat sdf  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SimpleDataFormat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;yyyy-MM-dd hh:mm:ss&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 格式化</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String format1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sdf.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(date);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 解析：要求字符串必须是符合SimpleDataFormat识别的格式（通过构造器参数提现），</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 否则抛异常</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Date date2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sdf.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(format1);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="_4-calendar-类-日历类、抽象类" tabindex="-1">4.Calendar 类：日历类、抽象类 <a class="header-anchor" href="#_4-calendar-类-日历类、抽象类" aria-label="Permalink to &quot;4.Calendar 类：日历类、抽象类&quot;">​</a></h3><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1.实例化</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 方式一：创建其子类（GregorianCalendar）的对象</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 方式二：调用其静态方法getInsatnce();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Calendar calendar </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Calendar.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getInsatnce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// System.out.println(calendar.getClass());</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 2.常用方法</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// get()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> days </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> calendar.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Calendar.DAY_OF_MONTH);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(days);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(calendar.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Calendar.DAY_OF_YEAR));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// set()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// calendar可变性</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">calendar.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Calendar.DAY_OF_MONTH,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">22</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">days </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> calendar.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Calendar.DAY_OF_MONTH);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(days);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// add()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">calendar.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Calendar.DAY_OF_MONTH,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">days </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> calendar.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Calendar.DAY_OF_MONTH);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(days);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// getTime() 日历类 =&gt; Date</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Date date </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> calendar.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(date);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// setTime() Date =&gt; 日历类</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Date date1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">calendar.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(date1);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">days </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> calendar.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Calendar.DAY_OF_MONTH);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(days);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><h2 id="四-jdk8-中新日期时间-api" tabindex="-1">四.JDK8 中新日期时间 API <a class="header-anchor" href="#四-jdk8-中新日期时间-api" aria-label="Permalink to &quot;四.JDK8 中新日期时间 API&quot;">​</a></h2><h3 id="_1-日期时间-api-的更迭" tabindex="-1">1.日期时间 API 的更迭 <a class="header-anchor" href="#_1-日期时间-api-的更迭" aria-label="Permalink to &quot;1.日期时间 API 的更迭&quot;">​</a></h3><p>第一代：<code>jdk1.0 Date类</code> 第二代：<code>jdk1.1 Calendar类</code>，一定程度上替换<code>Date</code>类 第三代：<code>jdk1.8</code>提出了新的一套 API</p><h3 id="_2-前两代存在的问题举例" tabindex="-1">2.前两代存在的问题举例 <a class="header-anchor" href="#_2-前两代存在的问题举例" aria-label="Permalink to &quot;2.前两代存在的问题举例&quot;">​</a></h3><ul><li>可变性：像日期时间这样的类应该是不可变的。</li><li>偏移性：<code>Date</code>中的年份是从<code>1900</code>开始的，而月份都从<code>0</code>开始的</li><li>格式化：格式化只对<code>Date</code>用，<code>Calendar</code>则不行。</li><li>此外，它们也不是线程安全的；不能处理闰秒等；</li></ul><h3 id="_3-java8-中新的日期时间-api-涉及到的包" tabindex="-1">3.java8 中新的日期时间 API 涉及到的包 <a class="header-anchor" href="#_3-java8-中新的日期时间-api-涉及到的包" aria-label="Permalink to &quot;3.java8 中新的日期时间 API 涉及到的包&quot;">​</a></h3><ul><li><code>java.time</code> 包含值对象的基础包</li><li><code>java.time.chrono</code> 提供对不同的日历系统的访问</li><li><code>java.time.format</code> 格式化和解析时间和日期</li><li><code>java.time.temporal</code> 包括底层框架和扩展特性</li><li><code>java.time.zone</code> 包含时区支持的类</li></ul><h3 id="_4-本地日期、本地时间、本地日期时间的使用-localdate-localtime-localdatetime" tabindex="-1">4.本地日期、本地时间、本地日期时间的使用：LocalDate/LocalTime/LocalDateTime <a class="header-anchor" href="#_4-本地日期、本地时间、本地日期时间的使用-localdate-localtime-localdatetime" aria-label="Permalink to &quot;4.本地日期、本地时间、本地日期时间的使用：LocalDate/LocalTime/LocalDateTime&quot;">​</a></h3><h4 id="_4-1-说明-1" tabindex="-1">4.1 说明 <a class="header-anchor" href="#_4-1-说明-1" aria-label="Permalink to &quot;4.1 说明&quot;">​</a></h4><ul><li>分别表示使用 <code>ISO-8601</code>日历系统的日期、时间、日期时间。它们提供了简单的本地日期或时间，并不包含当前的时间信息，也不包含与时区相关的信息。</li><li><code>LocalDateTime</code>相较于<code>LocalDate</code>、<code>LocalTime</code>使用频率要高</li><li>类似于<code>Calendar</code></li></ul><h4 id="_4-2-常用方法" tabindex="-1">4.2 常用方法 <a class="header-anchor" href="#_4-2-常用方法" aria-label="Permalink to &quot;4.2 常用方法&quot;">​</a></h4><p><img src="https://fang-kang.gitee.io/blog-img/java18.png#id=j6zR2&amp;originHeight=459&amp;originWidth=801&amp;originalType=binary&amp;ratio=1&amp;status=done&amp;style=none" alt="" data-fancybox="gallery"></p><h3 id="_5-时间点-instant" tabindex="-1">5.时间点 Instant <a class="header-anchor" href="#_5-时间点-instant" aria-label="Permalink to &quot;5.时间点 Instant&quot;">​</a></h3><h4 id="_5-1-说明" tabindex="-1">5.1 说明 <a class="header-anchor" href="#_5-1-说明" aria-label="Permalink to &quot;5.1 说明&quot;">​</a></h4><ul><li>时间线上的一个瞬时点。概念上讲，它只是简单的表示自 1970 年 1 月 1 日 0 时 0 分 0 秒（UTC 开始的秒数）</li><li>类似于<code>java.util.Date</code>类</li></ul><h4 id="_5-2-常用方法" tabindex="-1">5.2 常用方法 <a class="header-anchor" href="#_5-2-常用方法" aria-label="Permalink to &quot;5.2 常用方法&quot;">​</a></h4><p><img src="https://fang-kang.gitee.io/blog-img/java19.png#id=fPR8U&amp;originHeight=386&amp;originWidth=796&amp;originalType=binary&amp;ratio=1&amp;status=done&amp;style=none" alt="" data-fancybox="gallery"></p><h3 id="_6-日期时间格式化类-datetimeformatter" tabindex="-1">6.日期时间格式化类：DateTimeFormatter <a class="header-anchor" href="#_6-日期时间格式化类-datetimeformatter" aria-label="Permalink to &quot;6.日期时间格式化类：DateTimeFormatter&quot;">​</a></h3><h4 id="_6-1-说明" tabindex="-1">6.1 说明 <a class="header-anchor" href="#_6-1-说明" aria-label="Permalink to &quot;6.1 说明&quot;">​</a></h4><ul><li>格式化或解析时间、日期</li><li>类似于<code>SimpleDataFormat</code></li></ul><h4 id="_6-2-常用方法" tabindex="-1">6.2 常用方法 <a class="header-anchor" href="#_6-2-常用方法" aria-label="Permalink to &quot;6.2 常用方法&quot;">​</a></h4><p><strong>实例化方式</strong></p><ul><li>预定义的标准格式。如：<code>ISO_LOCAL_DATE_TIME</code>;<code>ISO_LOCAL_DATE</code>;<code>ISO_LOCAL_TIME</code>;</li><li>本地化相关的格式。如：<code>ofLocalizeDateTime(FormatStyle.LONG)</code></li><li>自定义的格式。如：<code>ofPattern(&quot;yyyy-MM-dd hh:mm:ss&quot;)</code></li></ul><p><strong>常用方法</strong></p><ul><li><code>ofPattern(String pattern)</code>：静态方法，返回一个指定字符串格式的<code>DateTimeFormatter</code></li><li><code>format(TemporalAccessor t)</code>：格式化一个日期、时间，返回字符串</li><li><code>parse(CharSequence text)</code>：将指定格式的字符序列解析为一个时间、日期</li></ul><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 重点：自定义的格式。如：\`ofPattern(&quot;yyyy-MM-dd hh:mm:ss&quot;)\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DateTimeFormatter formatter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DateTimeFormatter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ofPattern</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;yyyy-MM-dd hh:mm:ss&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 格式化</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> formatter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(LocalDateTime.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">now</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 解析</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">TemporalAccessor accessor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> formatter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(str);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="五-java-比较器" tabindex="-1">五.Java 比较器 <a class="header-anchor" href="#五-java-比较器" aria-label="Permalink to &quot;五.Java 比较器&quot;">​</a></h2><h3 id="_1-java-比较器的使用背景" tabindex="-1">1.Java 比较器的使用背景 <a class="header-anchor" href="#_1-java-比较器的使用背景" aria-label="Permalink to &quot;1.Java 比较器的使用背景&quot;">​</a></h3><p><code>Java</code>中的对象，正常情况下，只能进行比较：<code>==</code>或<code>!=</code>。不能使用<code>&gt;</code>或<code>&lt;</code>的。但是在开发场景中，我们需要对多个对象进行排序，言外之意，就需要比较两个对象的大小。如何实现？使用两个接口中的任何一个：<code>Comparable</code>或<code>Comparator</code></p><h3 id="_2-自然顺序-使用-comparable-接口" tabindex="-1">2.自然顺序：使用 Comparable 接口 <a class="header-anchor" href="#_2-自然顺序-使用-comparable-接口" aria-label="Permalink to &quot;2.自然顺序：使用 Comparable 接口&quot;">​</a></h3><h4 id="_2-1-说明-1" tabindex="-1">2.1 说明 <a class="header-anchor" href="#_2-1-说明-1" aria-label="Permalink to &quot;2.1 说明&quot;">​</a></h4><ol><li>像<code>String</code>、包装类实现了<code>Comparable</code>接口，重写了<code>compareTo(obj)</code>方法，给出了比较两个对象大小的方式。</li><li>像<code>String</code>、包装类重写了<code>compareTo(obj)</code>方法以后，进行了从小到大的排列。</li><li>重写<code>compareTo(obj)</code>的规则： <ul><li>如果当前对象<code>this</code>大于形参对象<code>obj</code>,则返回正整数</li><li>如果当前对象<code>this</code>小于形参对象<code>obj</code>,则返回负整数</li><li>如果当前对象<code>this</code>等于形参对象<code>obj</code>,则返回零</li></ul></li><li>对于自定义类来说，如果需要排序，我们可以让自定义类实现<code>Comparable</code>接口，，重写<code>compareTo(obj)</code>方法。在<code>compareTo(obj)</code>方法中指定如何排序。</li></ol><h4 id="_2-2-自定义类代码举例" tabindex="-1">2.2 自定义类代码举例 <a class="header-anchor" href="#_2-2-自定义类代码举例" aria-label="Permalink to &quot;2.2 自定义类代码举例&quot;">​</a></h4><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// getter、setter、toString()、构造器：省略</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Goods</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Comparable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String name;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> price;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //指明商品比较大小的方式：按照价格从低到高排序，再照产品名称从高到低排序</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CompareTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Object </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">o</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(o </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Goods){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Goods goods </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Goods)o;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 方式一</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.price </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> goods.price){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.price </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> goods.price){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 方式二</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">           // return Double.compare(this.price,goods.price);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RuntimeException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;传入的数据类型不一致&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h3 id="_3-定制排序-使用-comparator-接口" tabindex="-1">3.定制排序：使用 Comparator 接口 <a class="header-anchor" href="#_3-定制排序-使用-comparator-接口" aria-label="Permalink to &quot;3.定制排序：使用 Comparator 接口&quot;">​</a></h3><h4 id="_3-1-说明" tabindex="-1">3.1 说明 <a class="header-anchor" href="#_3-1-说明" aria-label="Permalink to &quot;3.1 说明&quot;">​</a></h4><ul><li>背景：当元素的类型没实现<code>java.lang.Comparable</code>接口而又不方便修改代码，或者实现了<code>java.lang.Comparable</code>接口的排序规则不适合当前的操作，那么可以考虑使用<code>Comparator</code>的对象来排序</li><li>重新<code>compare(Object o1,Object o2)</code>方法，比较<code>o1</code>和<code>o2</code>的大小：如果返回正整数，则表示<code>o1</code>大于<code>o2</code>;如果返回<code>0</code>,表示相等;返回负整数，表示<code>o1</code>小于<code>o2</code>;</li></ul><h4 id="_3-2-代码举例-1" tabindex="-1">3.2 代码举例 <a class="header-anchor" href="#_3-2-代码举例-1" aria-label="Permalink to &quot;3.2 代码举例&quot;">​</a></h4><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Comparator com </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Comparator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //指明商品比较大小的方式：按照价格从低到高排序，再照产品名称从高到低排序</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Compare</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Object </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">o1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,Object </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">o2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(o1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Goods </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> o2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Goods){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Goods g1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Goods)o1;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Goods g2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Goods)o2;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(g1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(g2.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Double.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">compare</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(g1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getPrice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),g2.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getPrice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g1.getName.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">compareTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(g2.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RuntimeException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;传入的数据类型不一致&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h3 id="_4-两种排序方法对比" tabindex="-1">4.两种排序方法对比 <a class="header-anchor" href="#_4-两种排序方法对比" aria-label="Permalink to &quot;4.两种排序方法对比&quot;">​</a></h3><ul><li><code>Comparable</code>接口的方式一旦一定，保证<code>Comparable</code>接口实现类的对象在任何位置都可以比较大小。</li><li><code>Comparator</code>接口属于临时性的比较</li></ul><h2 id="六-其他类" tabindex="-1">六.其他类 <a class="header-anchor" href="#六-其他类" aria-label="Permalink to &quot;六.其他类&quot;">​</a></h2><h3 id="_1-system-类" tabindex="-1">1.System 类 <a class="header-anchor" href="#_1-system-类" aria-label="Permalink to &quot;1.System 类&quot;">​</a></h3><ul><li><code>System</code>类代表系统，系统级的很多属性和控制方法都放置在该类的内部。该类位于<code>java.lang</code>包</li><li>由于该类的构造器是<code>private</code>的，所以无法创建该类的对象，也就是无法实例化该类。其内部的成员变量和成员方法都是<code>static</code>的，所有也可以很方便的进行调用。</li><li>方法 <ul><li><code>native long currentTimeMills()</code></li><li><code>void exit(int status)</code></li><li><code>void gc()</code></li><li><code>String getProperty(String key)</code></li></ul></li></ul><h3 id="_2-math-类" tabindex="-1">2.Math 类 <a class="header-anchor" href="#_2-math-类" aria-label="Permalink to &quot;2.Math 类&quot;">​</a></h3><p><code>java.lang.Math</code>提供了一系列静态方法用于科学计算。其方法的参数和返回值一般为<code>double</code>型。</p><h3 id="_3-biginteger-类、bigdecimal-类" tabindex="-1">3.BigInteger 类、BigDecimal 类 <a class="header-anchor" href="#_3-biginteger-类、bigdecimal-类" aria-label="Permalink to &quot;3.BigInteger 类、BigDecimal 类&quot;">​</a></h3><p><strong>说明</strong>：</p><ul><li><code>java.math</code>包的<code>BigInteger</code>可以表示不可变的任意精度的整数</li><li>要求数字精度比较高，故用到<code>java.math.BigDecimal</code>类</li></ul><p><strong>具体代码</strong>：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> testBigInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    BigInteger bi </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BigInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;121212121212121&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    BigDecimal bd </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BigDecimal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;12345.351&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    BigDecimal bd2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BigDecimal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;11&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(bi);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(bd.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">divide</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(bd2,BigDecimal.ROUND_HALF_UP));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(bd.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">divide</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(bd2,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">15</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,BigDecimal.ROUND_HALF_UP));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>`,115),t=[e];function h(p,r,k,d,E,o){return a(),i("div",null,t)}const y=s(l,[["render",h]]);export{g as __pageData,y as default};
