import{_ as t,a,o as l,aR as e}from"./chunks/framework.kUD5hkPg.js";const b=JSON.parse('{"title":"07.子查询","description":"","frontmatter":{},"headers":[],"relativePath":"articles/02-后端/Mysql/07.子查询.md","filePath":"articles/02-后端/Mysql/07.子查询.md"}'),r={name:"articles/02-后端/Mysql/07.子查询.md"},i=e('<h1 id="_07-子查询" tabindex="-1">07.子查询 <a class="header-anchor" href="#_07-子查询" aria-label="Permalink to &quot;07.子查询&quot;">​</a></h1><h2 id="_1-子查询概述" tabindex="-1">1. 子查询概述 <a class="header-anchor" href="#_1-子查询概述" aria-label="Permalink to &quot;1. 子查询概述&quot;">​</a></h2><h3 id="_1-1-定义" tabindex="-1">1.1 定义 <a class="header-anchor" href="#_1-1-定义" aria-label="Permalink to &quot;1.1 定义&quot;">​</a></h3><ul><li>概念：出现在 <strong>其他语句内部</strong> 的 select 语句，称为 <strong>子查询或内查询</strong></li><li><strong>内部嵌套其他 select 语句</strong> 的查询，称为 <strong>外查询或主查询</strong></li></ul><h3 id="_1-2-分类" tabindex="-1">1.2 分类 <a class="header-anchor" href="#_1-2-分类" aria-label="Permalink to &quot;1.2 分类&quot;">​</a></h3><h4 id="_1-按结果集的行列数不同" tabindex="-1">（1）按结果集的行列数不同 <a class="header-anchor" href="#_1-按结果集的行列数不同" aria-label="Permalink to &quot;（1）按结果集的行列数不同&quot;">​</a></h4><ul><li>标量子查询（结果集只有一行一列）</li><li>列子查询（结果集只有一列多行）</li><li>行子查询（结果集有一行多列）</li><li>表子查询（结果集一般为多行多列）</li></ul><h4 id="_2-按子查询出现的位置" tabindex="-1">（2）按子查询出现的位置 <a class="header-anchor" href="#_2-按子查询出现的位置" aria-label="Permalink to &quot;（2）按子查询出现的位置&quot;">​</a></h4><ul><li>select 后面：仅仅支持标量子查询</li><li>from 后面：支持表子查询</li><li>where 或 having 后面： <ul><li><strong>标量子查询（单行）</strong></li><li><strong>列子查询（多行）</strong></li><li>行子查询</li></ul></li><li>exists 后面（相关子查询）：表子查询</li></ul><h3 id="_1-3-子查询的使用" tabindex="-1">1.3 子查询的使用 <a class="header-anchor" href="#_1-3-子查询的使用" aria-label="Permalink to &quot;1.3 子查询的使用&quot;">​</a></h3><h4 id="_1-放在-where-或-having-后面" tabindex="-1">（1）放在 where 或 having 后面 <a class="header-anchor" href="#_1-放在-where-或-having-后面" aria-label="Permalink to &quot;（1）放在 where 或 having 后面&quot;">​</a></h4><ol><li>标量子查询（单行子查询）</li><li>列子查询（多行子查询）</li><li>行子查询（多列多行）</li></ol><h5 id="_1-标量子查询" tabindex="-1">① 标量子查询 <a class="header-anchor" href="#_1-标量子查询" aria-label="Permalink to &quot;① 标量子查询&quot;">​</a></h5><p><strong>子查询特点</strong>：</p><ul><li>子查询放在 <strong>小括号内</strong></li><li>子查询一般放在 <strong>条件的右侧</strong></li><li>标量子查询，一般搭配着 <strong>单行操作符</strong> 使用 <code>&gt;&lt;&gt;=&lt;= =&lt; &lt;&gt;</code></li><li>列子查询，一般搭配着多行操作符使用 <code>IN、ANY/ SOME、ALL</code></li><li>子查询的执行 <strong>优先于主查询执行，因为主查询的条件需要使用子查询的结果</strong></li></ul><h5 id="_2-多行子查询" tabindex="-1">② 多行子查询 <a class="header-anchor" href="#_2-多行子查询" aria-label="Permalink to &quot;② 多行子查询&quot;">​</a></h5><ul><li>返回多行</li><li>使用多行操作比较操作符 <table><thead><tr><th>操作符</th><th>含义</th></tr></thead><tbody><tr><td>IN/NOT IN</td><td>等于列表中 <strong>任意一个</strong></td></tr><tr><td>ANY/SOME</td><td>和子查询返回的 <strong>某一个值</strong> 比较</td></tr><tr><td>ALL+</td><td>和子查询返回的 <strong>所有值</strong> 比较</td></tr></tbody></table></li></ul><h5 id="_3-行子查询" tabindex="-1">③ 行子查询 <a class="header-anchor" href="#_3-行子查询" aria-label="Permalink to &quot;③ 行子查询&quot;">​</a></h5><p>行子查询：结果为一行多列或多行多列。（不常用）</p>',19),o=[i];function n(s,h,d,_,c,u){return l(),a("div",null,o)}const q=t(r,[["render",n]]);export{b as __pageData,q as default};
