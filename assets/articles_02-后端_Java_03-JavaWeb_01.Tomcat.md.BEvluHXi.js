import{_ as a,a as t,o as e,aR as s}from"./chunks/framework.kUD5hkPg.js";const o="/note/assets/1.B1mFRuVf.png",n="/note/assets/2.BGpA4W1i.png",r="/note/assets/3.BlMrEIhj.png",l="/note/assets/4.BAp97rv8.png",i="/note/assets/5.TD7lLclA.png",p="/note/assets/6.Bcx7UFtC.png",c="/note/assets/7.fZ6C59KM.png",h="/note/assets/7.fZ6C59KM.png",m="/note/assets/9.Cu00QYjY.png",b="/note/assets/10.D4YcTOjB.png",d="/note/assets/11.CGT9OHBg.png",g="/note/assets/12.Dyh_jbOG.png",_="/note/assets/13.Bili8gFS.png",u="/note/assets/14.pCvfmbNK.png",k="/note/assets/15.DpU_FL2k.png",f="/note/assets/16.BR5ilJYj.png",y="/note/assets/17.Ch0vbCZA.png",x="/note/assets/18.D2pvzX7z.png",T="/note/assets/19.Xuz9L9FT.png",q="/note/assets/20.PdMmAbwK.png",v="/note/assets/21.eQv80eVr.png",E="/note/assets/22.D3u5seF0.png",A="/note/assets/23.Cos5VNb8.png",w="/note/assets/24.DDBhr7oO.png",P="/note/assets/25.DJPWqciw.png",J="/note/assets/26.BSymSLsF.png",B="/note/assets/27.BpLALwQS.png",C="/note/assets/28.C6_BTkvX.png",D="/note/assets/29.BXUnfWz6.png",W="/note/assets/30.CTSdbyUl.png",F="/note/assets/31.CXjzAY2J.png",U=JSON.parse('{"title":"01. Tomcat","description":"","frontmatter":{},"headers":[],"relativePath":"articles/02-后端/Java/03-JavaWeb/01.Tomcat.md","filePath":"articles/02-后端/Java/03-JavaWeb/01.Tomcat.md"}'),j={name:"articles/02-后端/Java/03-JavaWeb/01.Tomcat.md"},S=s('<h1 id="_01-tomcat" tabindex="-1">01. Tomcat <a class="header-anchor" href="#_01-tomcat" aria-label="Permalink to &quot;01. Tomcat&quot;">​</a></h1><h2 id="_1-javaweb-的概念" tabindex="-1">1.JavaWeb 的概念 <a class="header-anchor" href="#_1-javaweb-的概念" aria-label="Permalink to &quot;1.JavaWeb 的概念&quot;">​</a></h2><h3 id="_1-1-什么是-javaweb" tabindex="-1">1.1 什么是 JavaWeb <a class="header-anchor" href="#_1-1-什么是-javaweb" aria-label="Permalink to &quot;1.1 什么是 JavaWeb&quot;">​</a></h3><p>JavaWeb 是指，所有通过 Java 语言编写可以通过浏览器访问的程序的总称，叫 JavaWeb。</p><p>JavaWeb 是基于请求和响应来开发的。</p><h3 id="_1-2-什么是请求" tabindex="-1">1.2 什么是请求 <a class="header-anchor" href="#_1-2-什么是请求" aria-label="Permalink to &quot;1.2 什么是请求&quot;">​</a></h3><p>请求是指客户端给服务器发送数据，叫请求 Request。</p><h3 id="_1-3-什么是响应" tabindex="-1">1.3 什么是响应 <a class="header-anchor" href="#_1-3-什么是响应" aria-label="Permalink to &quot;1.3 什么是响应&quot;">​</a></h3><p>响应是指服务器给客户端回传数据，叫响应 Response。</p><h3 id="_1-4-请求和响应的关系" tabindex="-1">1.4 请求和响应的关系 <a class="header-anchor" href="#_1-4-请求和响应的关系" aria-label="Permalink to &quot;1.4 请求和响应的关系&quot;">​</a></h3><p>请求和响应是成对出现的，有请求就有响应。</p><h2 id="_2-web-资源的分类" tabindex="-1">2. Web 资源的分类 <a class="header-anchor" href="#_2-web-资源的分类" aria-label="Permalink to &quot;2. Web 资源的分类&quot;">​</a></h2><p>web 资源按实现的技术和呈现的效果的不同，又分为静态资源和动态资源两种。</p><p>静态资源： html、css、js、txt、mp4 视频 , jpg 图片</p><p>动态资源： jsp 页面、Servlet 程序</p><h2 id="_3-常用的-web-服务器" tabindex="-1">3.常用的 Web 服务器 <a class="header-anchor" href="#_3-常用的-web-服务器" aria-label="Permalink to &quot;3.常用的 Web 服务器&quot;">​</a></h2><ul><li><p>Tomcat：由 Apache 组织提供的一种 Web 服务器，提供对 jsp 和 Servlet 的支持。它是一种轻量级的 javaWeb 容器（服务器），也是当前应用最广的 JavaWeb 服务器（免费）。</p></li><li><p>Jboss：是一个遵从 JavaEE 规范的、开放源代码的、纯 Java 的 EJB 服务器，它支持所有的 JavaEE 规范（免费）。</p></li><li><p>GlassFish： 由 Oracle 公司开发的一款 JavaWeb 服务器，是一款强健的商业服务器，达到产品级质量（应用很少）。</p></li><li><p>Resin：是 CAUCHO 公司的产品，是一个非常流行的服务器，对 <a href="http://baike.baidu.com/view/25169.htm" target="_blank" rel="noreferrer">servlet</a>和 <a href="http://baike.baidu.com/subview/3387/16963334.htm" target="_blank" rel="noreferrer">JSP</a>提供了良好的支持，性能也比较优良，resin 自身采用 JAVA 语言开发（收费，应用比较多）。</p></li><li><p>WebLogic：是 Oracle 公司的产品，是目前应用最广泛的 Web 服务器，支持 JavaEE 规范，而且不断的完善以适应新的开发要求，适合大型项目（收费，用的不多，适合大公司）。</p></li></ul><h2 id="_4-tomcat-服务器和-servlet-版本的对应关系" tabindex="-1">4.Tomcat 服务器和 Servlet 版本的对应关系 <a class="header-anchor" href="#_4-tomcat-服务器和-servlet-版本的对应关系" aria-label="Permalink to &quot;4.Tomcat 服务器和 Servlet 版本的对应关系&quot;">​</a></h2><p>当前企业常用的版本 7.<em>、8.</em><img src="'+o+`" alt="" data-fancybox="gallery"></p><p>Servlet 程序从 2.5 版本是现在世面使用最多的版本（xml 配置）</p><p>到了 Servlet3.0 之后。就是注解版本的 Servlet 使用。</p><p>以 2.5 版本为主线讲解 Servlet 程序。</p><h2 id="_5-tomcat-的使用" tabindex="-1">5.Tomcat 的使用 <a class="header-anchor" href="#_5-tomcat-的使用" aria-label="Permalink to &quot;5.Tomcat 的使用&quot;">​</a></h2><h3 id="_5-1-安装" tabindex="-1">5.1 安装 <a class="header-anchor" href="#_5-1-安装" aria-label="Permalink to &quot;5.1 安装&quot;">​</a></h3><p>找到你需要用的 Tomcat 版本对应的 zip 压缩包，解压到需要安装的目录即可。</p><h3 id="_5-2-目录介绍" tabindex="-1">5.2 目录介绍 <a class="header-anchor" href="#_5-2-目录介绍" aria-label="Permalink to &quot;5.2 目录介绍&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>bin 专门用来存放 Tomcat 服务器的可执行程序</span></span>
<span class="line"><span>conf 专门用来存放 Tocmat 服务器的配置文件</span></span>
<span class="line"><span>lib 专门用来存放 Tomcat 服务器的 jar 包</span></span>
<span class="line"><span>logs 专门用来存放 Tomcat 服务器运行时输出的日记信息</span></span>
<span class="line"><span>temp 专门用来存放 Tomcdat 运行时产生的临时数据</span></span>
<span class="line"><span>webapps 专门用来存放部署的 Web 工程</span></span>
<span class="line"><span>work 是 Tomcat 工作时的目录，用来存放 Tomcat 运行时 jsp 翻译为 Servlet 的源码，和 Session 钝化的目录。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="_5-3-如何启动-tomcat-服务器" tabindex="-1">5.3 如何启动 Tomcat 服务器 <a class="header-anchor" href="#_5-3-如何启动-tomcat-服务器" aria-label="Permalink to &quot;5.3 如何启动 Tomcat 服务器&quot;">​</a></h3><p>找到 Tomcat 目录下的 bin 目录下的 startup.bat 文件，双击，就可以启动 Tomcat 服务器。</p><p><strong>如何测试 Tomcat 服务器启动成功？？？</strong></p><p>打开浏览器，在浏览器地址栏中输入以下地址测试：</p><p>1、<code>http://localhost:8080</code></p><p>2、<code>http://127.0.0.1:8080</code></p><p>3、<code>http://真实ip:8080</code></p><p>当出现如下界面，说明 Tomcat 服务器启动成功！！！ <img src="`+n+'" alt="" data-fancybox="gallery"></p><p>常见的启动失败的情况有，双击 startup.bat 文件，就会出现一个小黑窗口一闪而来。</p><p>这个时候，失败的原因基本上都是因为没有配置好 <strong>JAVA_HOME</strong>环境变量。</p><p><strong>配置 JAVA_HOME 环境变量：</strong><img src="'+r+'" alt="" data-fancybox="gallery"></p><p>常见的 JAVA_HOME 配置错误有以下几种情况：</p><ul><li><p>JAVA_HOME 必须全大写。</p></li><li><p>JAVA_HOME 中间必须是下划线，不是减号-</p></li><li><p>JAVA_HOME 配置的路径只需要配置到 jdk 的安装目录即可。不需要带上 bin 目录。</p></li></ul><h3 id="_5-4-另一种启动-tomcat-服务器的方式" tabindex="-1">5.4 另一种启动 tomcat 服务器的方式 <a class="header-anchor" href="#_5-4-另一种启动-tomcat-服务器的方式" aria-label="Permalink to &quot;5.4 另一种启动 tomcat 服务器的方式&quot;">​</a></h3><p>1、打开命令行 2、cd 到 你的 Tomcat 的 bin 目录下 3、敲入启动命令： catalina run</p><h3 id="_5-5-tomcat-的停止" tabindex="-1">5.5 Tomcat 的停止 <a class="header-anchor" href="#_5-5-tomcat-的停止" aria-label="Permalink to &quot;5.5 Tomcat 的停止&quot;">​</a></h3><p>1、点击 tomcat 服务器窗口的 x 关闭按钮</p><p>2、把 Tomcat 服务器窗口置为当前窗口，然后按快捷键 Ctrl+C</p><p>3、<strong>找到</strong> <strong>Tomcat</strong> <strong>的</strong> <strong>bin</strong> <strong>目录下的</strong> <strong>shutdown.bat</strong> <strong>双击，就可以停止</strong> <strong>Tomcat</strong> <strong>服务器</strong></p><h3 id="_5-6-如何修改-tomcat-的端口号" tabindex="-1">5.6 如何修改 Tomcat 的端口号 <a class="header-anchor" href="#_5-6-如何修改-tomcat-的端口号" aria-label="Permalink to &quot;5.6 如何修改 Tomcat 的端口号&quot;">​</a></h3><p>Mysql 默认的端口号是：3306</p><p>Tomcat 默认的端口号是：8080</p><p>找到 Tomcat 目录下的 conf 目录，找到 server.xml 配置文件。 <img src="'+l+'" alt="" data-fancybox="gallery"></p><p>平时上百度：<a href="http://www.baidu.com:80" target="_blank" rel="noreferrer">http://www.baidu.com:80</a></p><p>HTTP 协议默认的端口号是：80</p><h3 id="_5-7-如何部暑-web-工程到-tomcat-中" tabindex="-1">5.7 如何部暑 web 工程到 Tomcat 中 <a class="header-anchor" href="#_5-7-如何部暑-web-工程到-tomcat-中" aria-label="Permalink to &quot;5.7 如何部暑 web 工程到 Tomcat 中&quot;">​</a></h3><p><strong>第一种部署方法：只需要把 web 工程的目录拷贝到 Tomcat 的 webapps 目录下即可。</strong></p><p><strong>1、在 webapps 目录下创建一个 book 工程：</strong><img src="'+i+'" alt="" data-fancybox="gallery"><strong>2、把上午做的书城第一阶段的内容拷贝到里面：</strong><img src="'+p+`" alt="" data-fancybox="gallery"></p><p><strong>3、如何访问 Tomcat 下的 web 工程。</strong></p><p>只需要在浏览器中输入访问地址格式如下：</p><p><code>http://ip:port/工程名/目录下/文件名</code></p><p><strong>第二种部署方法：</strong></p><p>找到 Tomcat 下的 conf 目录\\Catalina\\localhost\\ 下,创建如下的配置文件：</p><p>abc.xml 配置文件内容如下：</p><div class="language-xml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- Context 表示一个工程上下文</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">path 表示工程的访问路径:/abc</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">docBase 表示你的工程目录在哪里 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Context</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/abc&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> docBase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;E:\\book&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>访问这个工程的路径如下:<code>&lt;http://ip:port/abc/&gt;</code> 就表示访问 E:\\book 目录</p><h3 id="_5-8-手托-html-页面到浏览器和在浏览器中输入-http-ip-端口号-工程名-访问的区别" tabindex="-1">5.8 手托 html 页面到浏览器和在浏览器中输入 <a href="http://ip:%E7%AB%AF%E5%8F%A3%E5%8F%B7/%E5%B7%A5%E7%A8%8B%E5%90%8D/%E8%AE%BF%E9%97%AE%E7%9A%84%E5%8C%BA%E5%88%AB" target="_blank" rel="noreferrer">http://ip:端口号/工程名/访问的区别</a> <a class="header-anchor" href="#_5-8-手托-html-页面到浏览器和在浏览器中输入-http-ip-端口号-工程名-访问的区别" aria-label="Permalink to &quot;5.8 手托 html 页面到浏览器和在浏览器中输入 &lt;http://ip:端口号/工程名/访问的区别&gt;&quot;">​</a></h3><p>手托 html 页面的原理： <img src="`+c+'" alt="" data-fancybox="gallery"><img src="'+h+'" alt="" data-fancybox="gallery"></p><h3 id="_5-9-root-的工程的访问-以及-默认-index-html-页面的访" tabindex="-1">5.9 ROOT 的工程的访问，以及 默认 index.html 页面的访 <a class="header-anchor" href="#_5-9-root-的工程的访问-以及-默认-index-html-页面的访" aria-label="Permalink to &quot;5.9 ROOT 的工程的访问，以及 默认 index.html 页面的访&quot;">​</a></h3><h3 id="问" tabindex="-1">问 <a class="header-anchor" href="#问" aria-label="Permalink to &quot;问&quot;">​</a></h3><p>当我们在浏览器地址栏中输入访问地址如下： <code>&lt;http://ip:port/&gt;</code> 没有工程名的时候，默认访问的是 ROOT 工程。 当我们在浏览器地址栏中输入的访问地址如下： <code>&lt;http://ip:port/工程名/&gt;</code> 没有资源名，默认访问 index.html 页面</p><h2 id="_6-idea-整合-tomcat-服务器" tabindex="-1">6.IDEA 整合 Tomcat 服务器 <a class="header-anchor" href="#_6-idea-整合-tomcat-服务器" aria-label="Permalink to &quot;6.IDEA 整合 Tomcat 服务器&quot;">​</a></h2><p>操作的菜单如下：File | Settings | Build, Execution, Deployment | Application Servers <img src="'+m+'" alt="" data-fancybox="gallery"> 配置你的 Tomcat 安装目录： <img src="'+b+'" alt="" data-fancybox="gallery"> 就可以通过创建一个 Model 查看是不是配置成功！！！ <img src="'+d+'" alt="" data-fancybox="gallery"></p><h2 id="_7-idea-中动态-web-工程的操作" tabindex="-1">7.IDEA 中动态 web 工程的操作 <a class="header-anchor" href="#_7-idea-中动态-web-工程的操作" aria-label="Permalink to &quot;7.IDEA 中动态 web 工程的操作&quot;">​</a></h2><h3 id="_7-1-idea-中如何创建动态-web-工程" tabindex="-1">7.1 IDEA 中如何创建动态 web 工程 <a class="header-anchor" href="#_7-1-idea-中如何创建动态-web-工程" aria-label="Permalink to &quot;7.1 IDEA 中如何创建动态 web 工程&quot;">​</a></h3><p>1、创建一个新模块： <img src="'+g+'" alt="" data-fancybox="gallery"> 2、选择你要创建什么类型的模块： <img src="'+_+'" alt="" data-fancybox="gallery"> 3、输入你的模块名，点击【Finish】完成创建。 <img src="'+u+'" alt="" data-fancybox="gallery"> 4、创建成功如下图： <img src="'+k+'" alt="" data-fancybox="gallery"></p><h3 id="_7-2-web-工程的目录介绍" tabindex="-1">7.2 Web 工程的目录介绍 <a class="header-anchor" href="#_7-2-web-工程的目录介绍" aria-label="Permalink to &quot;7.2 Web 工程的目录介绍&quot;">​</a></h3><p><img src="'+f+'" alt="" data-fancybox="gallery"></p><h3 id="_7-3-如何给动态-web-工程添加额外-jar-包" tabindex="-1">7.3 如何给动态 web 工程添加额外 jar 包 <a class="header-anchor" href="#_7-3-如何给动态-web-工程添加额外-jar-包" aria-label="Permalink to &quot;7.3 如何给动态 web 工程添加额外 jar 包&quot;">​</a></h3><p>1、可以打开项目结构菜单操作界面，添加一个自己的类库： <img src="'+y+'" alt="" data-fancybox="gallery"> 2、添加你你类库需要的 jar 包文件。 <img src="'+x+'" alt="" data-fancybox="gallery"> 3、选择你添加的类库，给哪个模块使用： <img src="'+T+'" alt="" data-fancybox="gallery"> 4、选择 Artifacts 选项，将类库，添加到打包部署中： <img src="'+q+'" alt="" data-fancybox="gallery"></p><h3 id="_7-4-如何在-idea-中部署工程到-tomcat-上运行" tabindex="-1">7.4 如何在 IDEA 中部署工程到 Tomcat 上运行 <a class="header-anchor" href="#_7-4-如何在-idea-中部署工程到-tomcat-上运行" aria-label="Permalink to &quot;7.4 如何在 IDEA 中部署工程到 Tomcat 上运行&quot;">​</a></h3><p>1、建议修改 web 工程对应的 Tomcat 运行实例名称： <img src="'+v+'" alt="" data-fancybox="gallery"> 2、确认你的 Tomcat 实例中有你要部署运行的 web 工程模块： <img src="'+E+'" alt="" data-fancybox="gallery"> 3、你还可以修改你的 Tomcat 实例启动后默认的访问地址： <img src="'+A+'" alt="" data-fancybox="gallery"> 4、在 IDEA 中如何运行，和停止 Tomcat 实例。 4.1、正常启动 Tomcat 实例： <img src="'+w+'" alt="" data-fancybox="gallery"> 4.2、Debug 方式启动 Tomcat 运行实例： <img src="'+P+'" alt="" data-fancybox="gallery"> 4.3、停止 Tomcat 运行实例： <img src="'+J+'" alt="" data-fancybox="gallery"> 4.4、重启 Tomcat 运行实例： <img src="'+B+'" alt="" data-fancybox="gallery"></p><h3 id="_7-5-修改工程访问路径" tabindex="-1">7.5 修改工程访问路径 <a class="header-anchor" href="#_7-5-修改工程访问路径" aria-label="Permalink to &quot;7.5 修改工程访问路径&quot;">​</a></h3><p><img src="'+C+'" alt="" data-fancybox="gallery"></p><h3 id="_7-6-修改运行的端口号" tabindex="-1">7.6 修改运行的端口号 <a class="header-anchor" href="#_7-6-修改运行的端口号" aria-label="Permalink to &quot;7.6 修改运行的端口号&quot;">​</a></h3><p><img src="'+D+'" alt="" data-fancybox="gallery"></p><h3 id="_7-7-修改运行使用的浏览器" tabindex="-1">7.7 修改运行使用的浏览器 <a class="header-anchor" href="#_7-7-修改运行使用的浏览器" aria-label="Permalink to &quot;7.7 修改运行使用的浏览器&quot;">​</a></h3><p><img src="'+W+'" alt="" data-fancybox="gallery"></p><h3 id="_7-8-配置资源热部署" tabindex="-1">7.8 配置资源热部署 <a class="header-anchor" href="#_7-8-配置资源热部署" aria-label="Permalink to &quot;7.8 配置资源热部署&quot;">​</a></h3><p><img src="'+F+'" alt="" data-fancybox="gallery"></p>',87),O=[S];function V(I,M,R,H,L,z){return e(),t("div",null,O)}const X=a(j,[["render",V]]);export{U as __pageData,X as default};
