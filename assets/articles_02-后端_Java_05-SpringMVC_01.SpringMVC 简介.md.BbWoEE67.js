import{_ as e,a as o,o as r,aR as c}from"./chunks/framework.kUD5hkPg.js";const C=JSON.parse('{"title":"01.SpringMVC 简介","description":"","frontmatter":{},"headers":[],"relativePath":"articles/02-后端/Java/05-SpringMVC/01.SpringMVC 简介.md","filePath":"articles/02-后端/Java/05-SpringMVC/01.SpringMVC 简介.md"}'),d={name:"articles/02-后端/Java/05-SpringMVC/01.SpringMVC 简介.md"},t=c('<h1 id="_01-springmvc-简介" tabindex="-1">01.SpringMVC 简介 <a class="header-anchor" href="#_01-springmvc-简介" aria-label="Permalink to &quot;01.SpringMVC 简介&quot;">​</a></h1><h2 id="_1、什么是-mvc" tabindex="-1">1、什么是 MVC <a class="header-anchor" href="#_1、什么是-mvc" aria-label="Permalink to &quot;1、什么是 MVC&quot;">​</a></h2><p><code>MVC</code>是一种软件架构的思想，将软件按照模型、视图、控制器来划分</p><p><code>M：Model</code>，模型层，指工程中的<code>JavaBean</code>，作用是处理数据</p><p><code>JavaBean</code>分为两类：</p><ul><li>一类称为实体类<code>Bean</code>：专门存储业务数据的，如 <code>Student</code>、<code>User</code>等</li><li>一类称为业务处理 <code>Bean</code>：指 <code>Service</code>或 <code>Dao</code>对象，专门用于处理业务逻辑和数据访问。</li></ul><p><code>V：View</code>，视图层，指工程中的<code>html</code>或<code>jsp</code>等页面，作用是与用户进行交互，展示数据</p><p><code>C：Controller</code>，控制层，指工程中的<code>servlet</code>，作用是接收请求和响应浏览器</p><p><code>MVC</code>的工作流程： 用户通过视图层发送请求到服务器，在服务器中请求被<code>Controller</code>接收，<code>Controller</code>调用相应的<code>Model</code>层处理请求，处理完毕将结果返回到<code>Controller</code>，<code>Controller</code>再根据请求处理的结果找到相应的 View 视图，渲染数据后最终响应给浏览器</p><h2 id="_2、什么是-springmvc" tabindex="-1">2、什么是 SpringMVC <a class="header-anchor" href="#_2、什么是-springmvc" aria-label="Permalink to &quot;2、什么是 SpringMVC&quot;">​</a></h2><p><code>SpringMVC</code>是<code>Spring</code>的一个后续产品，是<code>Spring</code>的一个子项目</p><p><code>SpringMVC</code>是 <code>Spring</code>为表述层开发提供的一整套完备的解决方案。在表述层框架历经 <code>Strust</code>、<code>WebWork</code>、<code>Strust2</code>等诸多产品的历代更迭之后，目前业界普遍选择了 <code>SpringMVC</code>作为 <code>Java EE</code> 项目表述层开发的<strong>首选方案</strong>。</p><blockquote><p>注：三层架构分为表述层（或表示层）、业务逻辑层、数据访问层，表述层表示前台页面和后台 servlet</p></blockquote><h2 id="_3、springmvc-的特点" tabindex="-1">3、SpringMVC 的特点 <a class="header-anchor" href="#_3、springmvc-的特点" aria-label="Permalink to &quot;3、SpringMVC 的特点&quot;">​</a></h2><ul><li><strong>Spring 家族原生产品</strong>，与 IOC 容器等基础设施无缝对接</li><li><strong>基于原生的 Servlet</strong>，通过了功能强大的<strong>前端控制器 DispatcherServlet</strong>，对请求和响应进行统一处理</li><li>表述层各细分领域需要解决的问题<strong>全方位覆盖</strong>，提供<strong>全面解决方案</strong></li><li><strong>代码清新简洁</strong>，大幅度提升开发效率</li><li>内部组件化程度高，可插拔式组件<strong>即插即用</strong>，想要什么功能配置相应组件即可</li><li><strong>性能卓著</strong>，尤其适合现代大型、超大型互联网项目要求</li></ul>',15),a=[t];function n(i,l,s,p,g,_){return r(),o("div",null,a)}const h=e(d,[["render",n]]);export{C as __pageData,h as default};
