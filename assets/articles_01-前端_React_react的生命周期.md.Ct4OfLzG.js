import{_ as s,a,o as n,aR as e}from"./chunks/framework.kUD5hkPg.js";const i="/note/assets/01.DLjqP_Jz.png",t="/note/assets/02.CaIPnjL-.png",p="/note/assets/03.CgnJRC5V.png",l="/note/assets/04.DPBrHeDl.png",y=JSON.parse('{"title":"react 的生命周期","description":"","frontmatter":{},"headers":[],"relativePath":"articles/01-前端/React/react的生命周期.md","filePath":"articles/01-前端/React/react的生命周期.md"}'),r={name:"articles/01-前端/React/react的生命周期.md"},o=e('<h1 id="react-的生命周期" tabindex="-1">react 的生命周期 <a class="header-anchor" href="#react-的生命周期" aria-label="Permalink to &quot;react 的生命周期&quot;">​</a></h1><h2 id="_1-组件生命周期的三个阶段" tabindex="-1">1. 组件生命周期的三个阶段 <a class="header-anchor" href="#_1-组件生命周期的三个阶段" aria-label="Permalink to &quot;1. 组件生命周期的三个阶段&quot;">​</a></h2><ol><li><code>Mounting</code>（加载阶段）</li><li><code>Updating</code>（更新阶段）</li><li><code>Unmounting</code>（卸载阶段）</li></ol><h2 id="_2-旧的生命周期" tabindex="-1">2. 旧的生命周期 <a class="header-anchor" href="#_2-旧的生命周期" aria-label="Permalink to &quot;2. 旧的生命周期&quot;">​</a></h2><p><img src="'+i+`" alt="image" data-fancybox="gallery"></p><h3 id="_2-1-mounting-加载阶段-涉及-6-个钩子函数" tabindex="-1">2.1 Mounting（加载阶段：涉及 6 个钩子函数） <a class="header-anchor" href="#_2-1-mounting-加载阶段-涉及-6-个钩子函数" aria-label="Permalink to &quot;2.1 Mounting（加载阶段：涉及 6 个钩子函数）&quot;">​</a></h3><h4 id="constructor" tabindex="-1">constructor() <a class="header-anchor" href="#constructor" aria-label="Permalink to &quot;constructor()&quot;">​</a></h4><p>加载的时候调用一次，可以初始化 <code>state</code></p><h4 id="getdefaultprops" tabindex="-1">getDefaultProps() <a class="header-anchor" href="#getdefaultprops" aria-label="Permalink to &quot;getDefaultProps()&quot;">​</a></h4><p>设置默认的 <code>props</code>，也可以用 <code>dufaultProps</code> 设置组件的默认属性。</p><h4 id="getinitialstate" tabindex="-1">getInitialState() <a class="header-anchor" href="#getinitialstate" aria-label="Permalink to &quot;getInitialState()&quot;">​</a></h4><p>初始化 <code>state</code>，可以直接在 <code>constructor</code> 中定义 <code>this.state</code></p><h4 id="componentwillmount" tabindex="-1">componentWillMount() <a class="header-anchor" href="#componentwillmount" aria-label="Permalink to &quot;componentWillMount()&quot;">​</a></h4><p>组件加载时只调用，以后组件更新不调用，整个生命周期只调用一次，此时可以修改 <code>state</code></p><h4 id="render" tabindex="-1">render() <a class="header-anchor" href="#render" aria-label="Permalink to &quot;render()&quot;">​</a></h4><p><code>react</code> 最重要的步骤，创建虚拟 <code>dom</code>，进行 <code>diff</code> 算法，更新 <code>dom</code> 树都在此进行</p><h4 id="componentdidmount" tabindex="-1">componentDidMount() <a class="header-anchor" href="#componentdidmount" aria-label="Permalink to &quot;componentDidMount()&quot;">​</a></h4><p>组件渲染之后调用，只调用一次</p><h3 id="_2-2-updating-更新阶段-涉及-5-个钩子函数" tabindex="-1">2.2 Updating（更新阶段：涉及 5 个钩子函数） <a class="header-anchor" href="#_2-2-updating-更新阶段-涉及-5-个钩子函数" aria-label="Permalink to &quot;2.2 Updating（更新阶段：涉及 5 个钩子函数）&quot;">​</a></h3><h4 id="componentwillreceiveprops-nextprops" tabindex="-1">componentWillReceiveProps(nextProps) <a class="header-anchor" href="#componentwillreceiveprops-nextprops" aria-label="Permalink to &quot;componentWillReceiveProps(nextProps)&quot;">​</a></h4><p>组件加载时不调用，组件接受新的 <code>props</code> 时调用</p><h4 id="shouldcomponentupdate-nextprops-nextstate" tabindex="-1">shouldComponentUpdate(nextProps, nextState) <a class="header-anchor" href="#shouldcomponentupdate-nextprops-nextstate" aria-label="Permalink to &quot;shouldComponentUpdate(nextProps, nextState)&quot;">​</a></h4><p>组件接收到新的 <code>props</code> 或者 <code>state</code> 时调用，<code>return true</code> 就会更新 dom（使用 diff 算法更新），<code>return false</code> 能阻止更新（不调用 <code>render</code>）</p><h4 id="componentwillupdata-nextprops-nextstate" tabindex="-1">componentWillUpdata(nextProps, nextState) <a class="header-anchor" href="#componentwillupdata-nextprops-nextstate" aria-label="Permalink to &quot;componentWillUpdata(nextProps, nextState)&quot;">​</a></h4><p>组件加载时不调用，只有在组件将要更新时才调用，此时可以修改 <code>state</code></p><h4 id="render-1" tabindex="-1">render() <a class="header-anchor" href="#render-1" aria-label="Permalink to &quot;render()&quot;">​</a></h4><p><code>react</code> 最重要的步骤，创建虚拟 <code>dom</code>，进行 <code>diff</code> 算法，更新 <code>dom</code> 树都在此进行</p><h4 id="componentdidupdate-prevprops-prevstate" tabindex="-1">componentDidUpdate(prevProps, prevState) <a class="header-anchor" href="#componentdidupdate-prevprops-prevstate" aria-label="Permalink to &quot;componentDidUpdate(prevProps, prevState)&quot;">​</a></h4><p>组件加载时不调用，组件更新完成后调用</p><h3 id="_2-3-unmounting-卸载阶段-涉及-1-个钩子函数" tabindex="-1">2.3 Unmounting（卸载阶段：涉及 1 个钩子函数） <a class="header-anchor" href="#_2-3-unmounting-卸载阶段-涉及-1-个钩子函数" aria-label="Permalink to &quot;2.3 Unmounting（卸载阶段：涉及 1 个钩子函数）&quot;">​</a></h3><h4 id="componentwillunmount" tabindex="-1">componentWillUnmount() <a class="header-anchor" href="#componentwillunmount" aria-label="Permalink to &quot;componentWillUnmount()&quot;">​</a></h4><p>组件渲染之后调用，只调用一次</p><h4 id="组件的基本写法" tabindex="-1">组件的基本写法 <a class="header-anchor" href="#组件的基本写法" aria-label="Permalink to &quot;组件的基本写法&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> React, { Component } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;react&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OldReactComponent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(props)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // getDefaultProps：接收初始props</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // getInitialState：初始化state</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  state</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  componentWillMount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 组件挂载前触发</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Old React.Component&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  componentDidMount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 组件挂载后触发</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  componentWillReceiveProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">nextProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 接收到新的props时触发</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  shouldComponentUpdate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">nextProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">nextState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 组件Props或者state改变时触发，true：更新，false：不更新</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  componentWillUpdate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">nextProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">nextState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 组件更新前触发</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  componentDidUpdate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 组件更新后触发</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  componentWillUnmount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 组件卸载时触发</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><h2 id="_3-新的生命周期" tabindex="-1">3. 新的生命周期 <a class="header-anchor" href="#_3-新的生命周期" aria-label="Permalink to &quot;3. 新的生命周期&quot;">​</a></h2><h3 id="_3-1-mounting-加载阶段-涉及-4-个钩子函数" tabindex="-1">3.1 Mounting（加载阶段：涉及 4 个钩子函数） <a class="header-anchor" href="#_3-1-mounting-加载阶段-涉及-4-个钩子函数" aria-label="Permalink to &quot;3.1 Mounting（加载阶段：涉及 4 个钩子函数）&quot;">​</a></h3><h4 id="constructor-1" tabindex="-1">constructor() <a class="header-anchor" href="#constructor-1" aria-label="Permalink to &quot;constructor()&quot;">​</a></h4><p>加载的时候调用一次，可以初始化<code>state</code></p><h4 id="static-getderivedstatefromprops-props-state" tabindex="-1">static getDerivedStateFromProps(props, state) <a class="header-anchor" href="#static-getderivedstatefromprops-props-state" aria-label="Permalink to &quot;static getDerivedStateFromProps(props, state)&quot;">​</a></h4><p>组件每次被 <code>rerender</code> 的时候，包括在组件构建之后(虚拟 <code>dom</code> 之后，实际 <code>dom</code> 挂载之前)，每次获取新的 <code>props</code> 或 <code>state</code> 之后；每次接收新的 <code>props</code> 之后都会返回一个对象作为新的 <code>state</code>，返回 <code>null</code> 则说明不需要更新 <code>state</code>；配合 <code>componentDidUpdate</code>，可以覆盖 <code>componentWillReceiveProps</code> 的所有用法</p><h4 id="render-2" tabindex="-1">render() <a class="header-anchor" href="#render-2" aria-label="Permalink to &quot;render()&quot;">​</a></h4><p><code>react</code> 最重要的步骤，创建虚拟 <code>dom</code>，进行<code>diff</code> 算法，更新 <code>dom</code> 树都在此进行</p><h4 id="componentdidmount-1" tabindex="-1">componentDidMount() <a class="header-anchor" href="#componentdidmount-1" aria-label="Permalink to &quot;componentDidMount()&quot;">​</a></h4><p>组件渲染之后调用，只调用一次</p><h3 id="_3-2-updating-更新阶段-涉及-5-个钩子函数" tabindex="-1">3.2 Updating（更新阶段：涉及 5 个钩子函数） <a class="header-anchor" href="#_3-2-updating-更新阶段-涉及-5-个钩子函数" aria-label="Permalink to &quot;3.2 Updating（更新阶段：涉及 5 个钩子函数）&quot;">​</a></h3><h4 id="static-getderivedstatefromprops-props-state-1" tabindex="-1">static getDerivedStateFromProps(props, state) <a class="header-anchor" href="#static-getderivedstatefromprops-props-state-1" aria-label="Permalink to &quot;static getDerivedStateFromProps(props, state)&quot;">​</a></h4><p>组件每次被 <code>rerender</code> 的时候，包括在组件构建之后(虚拟 <code>dom</code> 之后，实际 <code>dom</code> 挂载之前)，每次获取新的 <code>props</code> 或 <code>state</code> 之后；每次接收新的 <code>props</code> 之后都会返回一个对象作为新的 <code>state</code>，返回 <code>null</code> 则说明不需要更新 <code>state</code>；配合 <code>componentDidUpdate</code>，可以覆盖 <code>componentWillReceiveProps</code> 的所有用法</p><h4 id="shouldcomponentupdate-nextprops-nextstate-1" tabindex="-1">shouldComponentUpdate(nextProps, nextState) <a class="header-anchor" href="#shouldcomponentupdate-nextprops-nextstate-1" aria-label="Permalink to &quot;shouldComponentUpdate(nextProps, nextState)&quot;">​</a></h4><p>组件接收到新的 <code>props</code> 或者 <code>state</code> 时调用，<code>return true</code> 就会更新 dom（使用 diff 算法更新），<code>return false</code> 能阻止更新（不调用 render）</p><h4 id="render-3" tabindex="-1">render() <a class="header-anchor" href="#render-3" aria-label="Permalink to &quot;render()&quot;">​</a></h4><p><code>react</code> 最重要的步骤，创建虚拟 <code>dom</code>，进行<code>diff</code> 算法，更新 <code>dom</code> 树都在此进行</p><h4 id="getsnapshotbeforeupdate-prevprops-prevstate" tabindex="-1">getSnapshotBeforeUpdate(prevProps, prevState) <a class="header-anchor" href="#getsnapshotbeforeupdate-prevprops-prevstate" aria-label="Permalink to &quot;getSnapshotBeforeUpdate(prevProps, prevState)&quot;">​</a></h4><p>触发时间: <code>update</code> 发生的时候，在 <code>render</code> 之后，在组件 <code>dom</code> 渲染之前；返回一个值，作为 <code>componentDidUpdate</code> 的第三个参数；配合 <code>componentDidUpdate</code>, 可以覆盖 <code>componentWillUpdate</code> 的所有用法</p><h4 id="componentdidupdate-prevprops-prevstate-snapshot" tabindex="-1">componentDidUpdate(prevProps, prevState, snapshot) <a class="header-anchor" href="#componentdidupdate-prevprops-prevstate-snapshot" aria-label="Permalink to &quot;componentDidUpdate(prevProps, prevState, snapshot)&quot;">​</a></h4><p>组件加载时不调用，组件更新完成后调用</p><h3 id="_3-3-unmounting-卸载阶段-涉及-1-个钩子函数" tabindex="-1">3.3 Unmounting（卸载阶段：涉及 1 个钩子函数） <a class="header-anchor" href="#_3-3-unmounting-卸载阶段-涉及-1-个钩子函数" aria-label="Permalink to &quot;3.3 Unmounting（卸载阶段：涉及 1 个钩子函数）&quot;">​</a></h3><p>组件渲染之后调用，只调用一次</p><h3 id="_3-4-error-handling-错误处理" tabindex="-1">3.4 Error Handling(错误处理) <a class="header-anchor" href="#_3-4-error-handling-错误处理" aria-label="Permalink to &quot;3.4 Error Handling(错误处理)&quot;">​</a></h3><h4 id="componentdidcatch-error-info" tabindex="-1">componentDidCatch(error，info) <a class="header-anchor" href="#componentdidcatch-error-info" aria-label="Permalink to &quot;componentDidCatch(error，info)&quot;">​</a></h4><p>任何一处的 <code>javascript</code> 报错会触发</p><h4 id="组件的基本写法-1" tabindex="-1">组件的基本写法 <a class="header-anchor" href="#组件的基本写法-1" aria-label="Permalink to &quot;组件的基本写法&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> React, { Component } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;react&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NewReactComponent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(props)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // getDefaultProps：接收初始props</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // getInitialState：初始化state</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  state</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  static</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getDerivedStateFromProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 组件每次被rerender的时候，包括在组件构建之后(虚拟dom之后，实际dom挂载之前)，每次获取新的props或state之后；;每次接收新的props之后都会返回一个对象作为新的state，返回null则说明不需要更新state</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> state</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  componentDidCatch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 获取到javascript错误</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;New React.Component&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  componentDidMount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 挂载后</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  shouldComponentUpdate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">nextProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">nextState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 组件Props或者state改变时触发，true：更新，false：不更新</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  getSnapshotBeforeUpdate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">prevProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">prevState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 组件更新前触发</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  componentDidUpdate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 组件更新后触发</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  componentWillUnmount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 组件卸载时触发</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p><strong>旧的生命周期</strong></p><p><img src="`+t+'" alt="image" data-fancybox="gallery"></p><p><strong>新的生命周期</strong></p><p>React16.3 生命周期</p><p><img src="'+p+'" alt="image" data-fancybox="gallery"></p><p>React16.4+生命周期</p><p><img src="'+l+'" alt="image" data-fancybox="gallery"></p><ol><li>React16 新的生命周期弃用了 <code>componentWillMount</code>、<code>componentWillReceiveProps</code>，<code>componentWillUpdate</code></li><li>新增了 <code>getDerivedStateFromProps</code>、<code>getSnapshotBeforeUpdate</code>来代替弃用的三个钩子函数（<code>componentWillMount</code>、<code>componentWillReceiveProps</code>，<code>componentWillUpdate</code>）</li><li>React16 并没有删除这三个钩子函数，但是不能和新增的钩子函数（<code>getDerivedStateFromProps</code>、<code>getSnapshotBeforeUpdate</code>）混用，React17 将会删除 <code>componentWillMount</code>、<code>componentWillReceiveProps</code>，<code>componentWillUpdate</code></li><li>新增了对错误的处理（<code>componentDidCatch</code>）</li></ol>',71),h=[o];function d(c,k,E,u,m,g){return n(),a("div",null,h)}const F=s(r,[["render",d]]);export{y as __pageData,F as default};
