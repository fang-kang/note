import{_ as s,a,o as i,aR as n}from"./chunks/framework.kUD5hkPg.js";const c=JSON.parse('{"title":"11.拦截器","description":"","frontmatter":{},"headers":[],"relativePath":"articles/02-后端/Java/05-SpringMVC/11.拦截器.md","filePath":"articles/02-后端/Java/05-SpringMVC/11.拦截器.md"}'),t={name:"articles/02-后端/Java/05-SpringMVC/11.拦截器.md"},p=n(`<h1 id="_11-拦截器" tabindex="-1">11.拦截器 <a class="header-anchor" href="#_11-拦截器" aria-label="Permalink to &quot;11.拦截器&quot;">​</a></h1><h2 id="_1、拦截器的配置" tabindex="-1">1、拦截器的配置 <a class="header-anchor" href="#_1、拦截器的配置" aria-label="Permalink to &quot;1、拦截器的配置&quot;">​</a></h2><p>SpringMVC 中的拦截器用于拦截控制器方法的执行</p><p>SpringMVC 中的拦截器需要实现 HandlerInterceptor</p><p>SpringMVC 的拦截器必须在 SpringMVC 的配置文件中进行配置：</p><div class="language-xml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">bean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.atguigu.interceptor.FirstInterceptor&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">bean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ref</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;firstInterceptor&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 以上两种配置方式都是对DispatcherServlet所处理的所有的请求进行拦截 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">mvc:interceptor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">mvc:mapping</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/**&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">mvc:exclude-mapping</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/testRequestEntity&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ref</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;firstInterceptor&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">mvc:interceptor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!--</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	以上配置方式可以通过ref或bean标签设置拦截器，通过mvc:mapping设置需要拦截的请求，通过mvc:exclude-mapping设置需要排除的请求，即不需要拦截的请求</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="_2、拦截器的三个抽象方法" tabindex="-1">2、拦截器的三个抽象方法 <a class="header-anchor" href="#_2、拦截器的三个抽象方法" aria-label="Permalink to &quot;2、拦截器的三个抽象方法&quot;">​</a></h2><p>SpringMVC 中的拦截器有三个抽象方法：</p><p>preHandle：控制器方法执行之前执行 preHandle()，其 boolean 类型的返回值表示是否拦截或放行，返回 true 为放行，即调用控制器方法；返回 false 表示拦截，即不调用控制器方法</p><p>postHandle：控制器方法执行之后执行 postHandle()</p><p>afterComplation：处理完视图和模型数据，渲染视图完毕之后执行 afterComplation()</p><h2 id="_3、多个拦截器的执行顺序" tabindex="-1">3、多个拦截器的执行顺序 <a class="header-anchor" href="#_3、多个拦截器的执行顺序" aria-label="Permalink to &quot;3、多个拦截器的执行顺序&quot;">​</a></h2><p>a&gt;若每个拦截器的 preHandle()都返回 true</p><p>此时多个拦截器的执行顺序和拦截器在 SpringMVC 的配置文件的配置顺序有关：</p><p>preHandle()会按照配置的顺序执行，而 postHandle()和 afterComplation()会按照配置的反序执行</p><p>b&gt;若某个拦截器的 preHandle()返回了 false</p><p>preHandle()返回 false 和它之前的拦截器的 preHandle()都会执行，postHandle()都不执行，返回 false 的拦截器之前的拦截器的 afterComplation()会执行</p>`,17),e=[p];function l(h,r,k,E,d,g){return i(),a("div",null,e)}const u=s(t,[["render",l]]);export{c as __pageData,u as default};
