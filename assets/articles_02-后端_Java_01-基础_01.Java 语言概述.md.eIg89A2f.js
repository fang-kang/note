import{_ as a,a as i,o as s,aR as l}from"./chunks/framework.kUD5hkPg.js";const e="/note/assets/1.CfIyWYL8.png",n="/note/assets/2.Bee6-d5s.png",g=JSON.parse('{"title":"01.Java 语言概述","description":"","frontmatter":{},"headers":[],"relativePath":"articles/02-后端/Java/01-基础/01.Java 语言概述.md","filePath":"articles/02-后端/Java/01-基础/01.Java 语言概述.md"}'),t={name:"articles/02-后端/Java/01-基础/01.Java 语言概述.md"},h=l('<h1 id="_01-java-语言概述" tabindex="-1">01.Java 语言概述 <a class="header-anchor" href="#_01-java-语言概述" aria-label="Permalink to &quot;01.Java 语言概述&quot;">​</a></h1><h2 id="一-整体内容概述" tabindex="-1">一.整体内容概述 <a class="header-anchor" href="#一-整体内容概述" aria-label="Permalink to &quot;一.整体内容概述&quot;">​</a></h2><p><img src="'+e+'" alt="" data-fancybox="gallery"><img src="'+n+`" alt="" data-fancybox="gallery"></p><h2 id="二-java-语言概述" tabindex="-1">二.Java 语言概述 <a class="header-anchor" href="#二-java-语言概述" aria-label="Permalink to &quot;二.Java 语言概述&quot;">​</a></h2><h3 id="_1-基础常识" tabindex="-1">1.基础常识 <a class="header-anchor" href="#_1-基础常识" aria-label="Permalink to &quot;1.基础常识&quot;">​</a></h3><p><strong>软件</strong>：即一系列按照特定顺序组织的计算机数据和指令集合。分为：系统软件 和 应用软件</p><p><strong>系统软件</strong>：window、mac os、linux、unix、Android、iOS</p><p>应用软件**：word、ppt、画图板...**</p><p>**应用程序 = 算法 + 数据结构</p><p>人机交互方式:** 图形化界面 vs 命令行方式</p><p>常用 DOS 命令：</p><ul><li>dir：列出当前目录下的文件以及文件夹</li><li>md：创建目录</li><li>rd：删除目录</li><li>cd：进入指定目录</li><li>cd..：退回到上一级目录</li><li>cd:退回到根目录</li><li>del:删除文件</li><li>exit：退出 dos 命令行</li></ul><h3 id="_2-计算机语言的发展迭代史" tabindex="-1">2.计算机语言的发展迭代史 <a class="header-anchor" href="#_2-计算机语言的发展迭代史" aria-label="Permalink to &quot;2.计算机语言的发展迭代史&quot;">​</a></h3><ul><li>第一代：机器语言</li><li>第二代：汇编语言</li><li>第三代：高级语言 <ul><li>面向对象：Java、Js、Python...</li><li>面向过程：C</li></ul></li></ul><h3 id="_3-java-语言版本迭代概述" tabindex="-1">3.Java 语言版本迭代概述 <a class="header-anchor" href="#_3-java-语言版本迭代概述" aria-label="Permalink to &quot;3.Java 语言版本迭代概述&quot;">​</a></h3><ul><li>1991 年 Green 项目，开发语言最初命名为 Oak(橡树)</li><li>1994 年，开发组意识到 Oak 非常适合与互联网</li><li>1996 年，发布 JDK1.0,约 8.3 个网页应用 Java 技术来制作</li><li>1997 年，发布 JDK1.1,JavaOne 会议召开，创当时全球同类会议规模之最</li><li>1998 年，发布 JDK1.2，同年发布企业平台 J2EE</li><li>1999 年，Java 分成 J2SE、J2EE 和 J2ME,JSP/Servle 技术诞生</li><li><strong>2004 年，发布里程碑式版本，JDK1.5，为突出次版本的重要性，更名为 JDK5.0</strong></li><li>2005 年，J2SE-&gt;JavaSE，J2EE-&gt;JavaEE，J2ME-&gt;JavaME</li><li>2009 年，Oracle 公司收购 SUN，交易价格 74 亿美元</li><li>2011 年，发布 JDK7.0</li><li><strong>2014 年，发布 JDK8.0，是继 JDK5.0 以来变化最大的版本</strong></li><li>2017 年，发布 JDK9.0，最大限度实现模块化</li><li>2018 年 3 月，发布 JDK10.0，版本号也称为 18.3</li><li>2018 年 9 月，发布 JDK11.0，版本号也称为 18.9</li></ul><h3 id="_4-java-语言应用的领域" tabindex="-1">4.Java 语言应用的领域 <a class="header-anchor" href="#_4-java-语言应用的领域" aria-label="Permalink to &quot;4.Java 语言应用的领域&quot;">​</a></h3><ul><li>Java Web 开发：后台开发</li><li>大数据开发</li><li>Android 应用程度开发：客户端开发</li></ul><h3 id="_5-java-语言的特点" tabindex="-1">5.Java 语言的特点 <a class="header-anchor" href="#_5-java-语言的特点" aria-label="Permalink to &quot;5.Java 语言的特点&quot;">​</a></h3><ul><li>面向对象性： <ul><li>两个要素：类、对象</li><li>三个特征：封装、继承、多态</li></ul></li><li>健壮性： <ul><li>去除了 C 语言中的指针</li><li>自动的垃圾回收机制（仍然会出现内存溢出、内存泄漏）</li></ul></li><li>跨平台性：一次编译，到处运行</li></ul><h2 id="三-开发环境的搭建-重点" tabindex="-1">三.开发环境的搭建（重点） <a class="header-anchor" href="#三-开发环境的搭建-重点" aria-label="Permalink to &quot;三.开发环境的搭建（重点）&quot;">​</a></h2><h3 id="_1-jdk-jre-jvm-三者之间的关系-以及-jdk、jre-包含的主要结构有哪些" tabindex="-1">1.JDK,JRE,JVM 三者之间的关系，以及 JDK、JRE 包含的主要结构有哪些 <a class="header-anchor" href="#_1-jdk-jre-jvm-三者之间的关系-以及-jdk、jre-包含的主要结构有哪些" aria-label="Permalink to &quot;1.JDK,JRE,JVM 三者之间的关系，以及 JDK、JRE 包含的主要结构有哪些&quot;">​</a></h3><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> JDK</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> JRE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Java的开发工具</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> （javac.exe,java.exe,javadoc.exe）</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> JRE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> JVM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Java核心类库</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_2-jdk-的下载、安装" tabindex="-1">2.JDK 的下载、安装 <a class="header-anchor" href="#_2-jdk-的下载、安装" aria-label="Permalink to &quot;2.JDK 的下载、安装&quot;">​</a></h3><p>下载：官网，github</p><p>安装：傻瓜式安装</p><p>注意问题（路径中不能包含中文、空格）</p><h3 id="_3-为什么要配置-path-环境变量-如何配置" tabindex="-1">3.为什么要配置 path 环境变量？如何配置？ <a class="header-anchor" href="#_3-为什么要配置-path-环境变量-如何配置" aria-label="Permalink to &quot;3.为什么要配置 path 环境变量？如何配置？&quot;">​</a></h3><p>path 环境变量：windows 操作系统执行命令时所要搜寻的路径</p><p>希望 java 的开发工具（javac.exe,java.exe,javadoc.exe）在任何文件路径下都可以执行成功</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> JAVA_HOME</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 的上层目录</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> path</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> %JAVA_HOME%</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">in</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="四-第一个-java-程序" tabindex="-1">四.第一个 Java 程序 <a class="header-anchor" href="#四-第一个-java-程序" aria-label="Permalink to &quot;四.第一个 Java 程序&quot;">​</a></h2><h3 id="_1-开发体验-helloworld" tabindex="-1">1.开发体验-HelloWorld <a class="header-anchor" href="#_1-开发体验-helloworld" aria-label="Permalink to &quot;1.开发体验-HelloWorld&quot;">​</a></h3><h4 id="_1-1-编写" tabindex="-1">1.1 编写 <a class="header-anchor" href="#_1-1-编写" aria-label="Permalink to &quot;1.1 编写&quot;">​</a></h4><p>创建一个 java 源文件 HelloWorld.java</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HelloWorld</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello,World!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="_1-2-编译" tabindex="-1">1.2 编译 <a class="header-anchor" href="#_1-2-编译" aria-label="Permalink to &quot;1.2 编译&quot;">​</a></h4><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> javac</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> HelloWorld.java</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="_1-3-运行" tabindex="-1">1.3 运行 <a class="header-anchor" href="#_1-3-运行" aria-label="Permalink to &quot;1.3 运行&quot;">​</a></h4><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> java</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> HelloWorld</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_2-常见问题的解决" tabindex="-1">2.常见问题的解决 <a class="header-anchor" href="#_2-常见问题的解决" aria-label="Permalink to &quot;2.常见问题的解决&quot;">​</a></h3><ul><li>源文件名不存在或者写错</li><li>当前路径错误</li><li>后缀名隐藏问题</li><li>类文件名写错，尤其文件名与类名不一致时，要小心</li><li>类文件不能在当前路径下，或者不在 classpath 指定路径下</li></ul><h3 id="_3-总结第一个程序" tabindex="-1">3.总结第一个程序 <a class="header-anchor" href="#_3-总结第一个程序" aria-label="Permalink to &quot;3.总结第一个程序&quot;">​</a></h3><ol><li>java 程序编写-编译-运行的过程编写：我们将编写的 java 代码报错在以.java 结尾的源文件中编译：使用 javac.exe 命令编译我们的 java 源文件。格式 javac 源文件名.java 运行: 使用 java.exe 命令解释运行我们的字节码文件。格式 java 类名</li><li>在一个 java 源文件中可以声明多个 class。但是，最多只能有一个类声明为 public 的，而且要求声明为 public 的类的类名必须与源文件名相同。</li><li>程序的入口是 main()方法。格式是固定的</li><li>输出语句： <ul><li>System.out.println():先输出数据，然后换行</li><li>System.out.print():只输出数据</li></ul></li><li>每一行执行语句都以;结束。</li><li>编译的过程：编译以后，会生成一个或多个字节码文件。字节码文件的文件名与 java 源文件中的类名相同</li></ol><h2 id="五-注释与-api-文档等" tabindex="-1">五.注释与 API 文档等 <a class="header-anchor" href="#五-注释与-api-文档等" aria-label="Permalink to &quot;五.注释与 API 文档等&quot;">​</a></h2><h3 id="_1-注释-comment" tabindex="-1">1.注释：Comment <a class="header-anchor" href="#_1-注释-comment" aria-label="Permalink to &quot;1.注释：Comment&quot;">​</a></h3><p><strong>分类：</strong></p><ul><li>单行注释：//</li><li>多行注释：/* */</li><li>文档注释：/** */</li></ul><p><strong>作用：</strong></p><ul><li>对所写的程序进行解释说明，增强可读性。方便自己，方便别人</li><li>调试所写的代码</li></ul><p><strong>特点：</strong></p><ul><li>单行注释和多行注释，注释了的内容不参与编译。换句话说，变异以后生成的.class 结尾的字节码文件中不包含注释掉的信息</li><li>注释内容可以被 JDK 提供的工具 javadoc 所解析，生成一套以网页文件形式体现的该程序的说明文档。</li><li>多行注释不可以嵌套使用</li></ul><h3 id="_2-java-api-文档" tabindex="-1">2.Java API 文档 <a class="header-anchor" href="#_2-java-api-文档" aria-label="Permalink to &quot;2.Java API 文档&quot;">​</a></h3><p>API 习惯上：将语言提供的类库，都称为 api</p><p>API 文档：针对于提供的类库如何使用，给的一个说明书。类似于《新华字典》。</p><h3 id="_3-良好的编程风格" tabindex="-1">3.良好的编程风格 <a class="header-anchor" href="#_3-良好的编程风格" aria-label="Permalink to &quot;3.良好的编程风格&quot;">​</a></h3><ul><li>正确的注释和注释风格 <ul><li>使用文档注释来注释整个类或整个方法。</li><li>如果注释方法中的某一个步骤，使用单行或多行注释。</li></ul></li><li>正确的缩进和空白 <ul><li>使用一次 tab 操作，实现缩进</li><li>运算符两边习惯性各加一个空格。比如:2 + 4 = 6</li></ul></li><li>块的风格 <ul><li>Java API 源码选择了行尾风格</li></ul></li></ul>`,57),r=[h];function p(d,o,k,c,u,b){return s(),i("div",null,r)}const m=a(t,[["render",p]]);export{g as __pageData,m as default};
