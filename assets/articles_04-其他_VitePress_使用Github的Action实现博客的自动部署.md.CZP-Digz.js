import{_ as a,a as i,o as n,aR as l}from"./chunks/framework.kUD5hkPg.js";const e="/note/assets/10.DIj_lzVs.png",s="/note/assets/11.Dv0CuCX6.png",p="/note/assets/12.0g4rw1HU.png",t="/note/assets/9.B9FFbRk_.png",m=JSON.parse('{"title":"使用 Github 的 Action 实现博客的自动部署","description":"","frontmatter":{},"headers":[],"relativePath":"articles/04-其他/VitePress/使用Github的Action实现博客的自动部署.md","filePath":"articles/04-其他/VitePress/使用Github的Action实现博客的自动部署.md"}'),h={name:"articles/04-其他/VitePress/使用Github的Action实现博客的自动部署.md"},r=l(`<h1 id="使用-github-的-action-实现博客的自动部署" tabindex="-1">使用 Github 的 Action 实现博客的自动部署 <a class="header-anchor" href="#使用-github-的-action-实现博客的自动部署" aria-label="Permalink to &quot;使用 Github 的 Action 实现博客的自动部署&quot;">​</a></h1><h2 id="一-自动化部署脚本" tabindex="-1">一.自动化部署脚本 <a class="header-anchor" href="#一-自动化部署脚本" aria-label="Permalink to &quot;一.自动化部署脚本&quot;">​</a></h2><p>先来分享一种简单的自动化部署方案 - 自动化部署脚本</p><p>我们每次部署项目时，会有几个步骤是固定的，既然它是固定的，那么我们就可以通过写脚本来帮助我们完成，这样不仅能够提高我们的开发效率，还能避免人为操作时可能出现的纰漏。</p><h3 id="_1-添加脚本" tabindex="-1">1.添加脚本 <a class="header-anchor" href="#_1-添加脚本" aria-label="Permalink to &quot;1.添加脚本&quot;">​</a></h3><p>我们直接在项目根目录下新建一个脚本文件<code>deploy.sh</code></p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/usr/bin/env sh</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">set</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -x</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 这里是为了看错误日志</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 打包项目</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 进入打包后的文件夹</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dist</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -A</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;auto deploy&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 将打包后的文件推送到指定分支</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/xxx</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="_2-执行脚本" tabindex="-1">2.执行脚本 <a class="header-anchor" href="#_2-执行脚本" aria-label="Permalink to &quot;2.执行脚本&quot;">​</a></h3><p>现在我们可以执行<code>sh deploy.sh</code>，然后就会执行我们脚本文件中的内容，先是打包，然后将打包产物推送到远程指定分支（static-pages）。我们可以到 github 仓库中查看打包产物。</p><p><img src="`+e+'" alt="" data-fancybox="gallery"></p><p>部署完我们怎么访问这个页面呢？</p><p>在仓库的<code>Setting -&gt; Pages</code>中可以查看到该页面的访问地址</p><p><img src="'+s+'" alt="" data-fancybox="gallery"></p><p>最后我们访问这个地址,就能看到我们部署的页面了。</p><p>这种方案最后再与<code>GitHooks</code>结合，可以在某个分支提交时自动完成打包部署，这里就不再介绍了。下面我们再来看另一种更加优雅的方案。</p><h2 id="二-cicd" tabindex="-1">二.CICD <a class="header-anchor" href="#二-cicd" aria-label="Permalink to &quot;二.CICD&quot;">​</a></h2><blockquote><p>CICD 翻译过来就是持续构建、持续交付。</p></blockquote><h3 id="_1-ci-持续集成-continuous-integration" tabindex="-1">1. CI 持续集成（Continuous Integration） <a class="header-anchor" href="#_1-ci-持续集成-continuous-integration" aria-label="Permalink to &quot;1. CI 持续集成（Continuous Integration）&quot;">​</a></h3><p>持续集成：频繁的将代码合并到主分支中，强调通过集成测试反馈给开发一个结果，不管失败还是成功。</p><p>持续集成分成三个阶段：</p><ul><li>持续集成准备阶段：根据软件开发的需要，准备 CI 的一些前置工作 <ul><li>集成 CI 工具的代码仓库（Gitlab、Github、Jenkins 等）</li><li>单元测试或者集成测试的脚本</li><li>触发 CI 的配置文件，实现各种功能的 Jobs</li></ul></li><li>持续集成进行阶段 <ul><li>推送代码出发 CI 系统</li><li>通过 CI 系统监听代码的测试、构建，反馈集成结果</li><li>通过版本管理系统实现版本的管理</li></ul></li><li>接续集成完成阶段：反馈集成结果</li></ul><h3 id="_2-cd-持续交付-continuous-delivery" tabindex="-1">2. CD 持续交付（Continuous Delivery） <a class="header-anchor" href="#_2-cd-持续交付-continuous-delivery" aria-label="Permalink to &quot;2. CD 持续交付（Continuous Delivery）&quot;">​</a></h3><p>持续交付：主要面向测试人员和产品，可以保证一键部署，常常要交付的内容包括</p><ul><li>源代码：缺点，代码依赖的环境不容易控制</li><li>打包的二进制文件或者系统包：存在兼容性问题和环境差异出现的部署失败</li><li>虚拟机镜像交付：系统隔离最好，但占用系统资源严重</li><li>Docker 交付：容器交付，成本最低，兼容性最好</li></ul><p>持续部署：此时要提供一个稳定的版本，包括所需的环境和依赖，主要面向用户提供服务，发生错误要能快速回滚。</p><p>CICD 是目前大多数互联网公司选择的一种部署方案，因为它能够灵活配置项目部署过程中的各个阶段。下面再来介绍下如何使用 GitHub 的 CICD 来部署前端项目。</p><h3 id="_3-github-action" tabindex="-1">3.GitHub Action <a class="header-anchor" href="#_3-github-action" aria-label="Permalink to &quot;3.GitHub Action&quot;">​</a></h3><p><code>GitHub Actions</code> 是一个持续集成 (Continuous integration)和持续交付 (Continuous delivery)的平台，它可以做到自动化构建、测试、部署。你可以创建工作流，构建和测试每一个 <code>pull request</code> 或者部署合并后的代码到生产环境。</p><h4 id="workflows-工作流" tabindex="-1">Workflows(工作流) <a class="header-anchor" href="#workflows-工作流" aria-label="Permalink to &quot;Workflows(工作流)&quot;">​</a></h4><p>工作流是一个可配置的自动化的程序。创建一个工作流，你需要定义一个 YAML 文件，当你的仓库触发某个事件的时候，工作流就会运行，当然也可以手动触发，或者定义一个时间表。一个仓库可以创建多个工作流，每一个工作流都可以执行不同的步骤。</p><h4 id="events-事件" tabindex="-1">Events(事件) <a class="header-anchor" href="#events-事件" aria-label="Permalink to &quot;Events(事件)&quot;">​</a></h4><p>事件是指仓库触发运行工作流的具体的行为，比如创建一个 <code>pull request</code>、新建一个 <code>issue</code>、或者推送一个 <code>commit</code>。你也可以使用时间表触发一个工作流，或者通过请求一个 REST API，再或者手动触发。</p><h4 id="jobs-任务" tabindex="-1">Jobs(任务) <a class="header-anchor" href="#jobs-任务" aria-label="Permalink to &quot;Jobs(任务)&quot;">​</a></h4><p>任务是在同一个运行器上执行的一组步骤。一个步骤要么是一个 shell 脚本要么是一个动作。步骤会顺序执行，并彼此独立。因为每一个步骤都在同一个运行器上被执行，所以你可以从一个步骤传递数据到另一个步骤 。</p><p>你可以配置一个任务依赖其他任务，默认情况下，任务没有依赖，并行执行。当一个任务需要另外一个任务的时候，它会等到依赖的任务完成再执行。</p><h4 id="actions-动作" tabindex="-1">Actions(动作) <a class="header-anchor" href="#actions-动作" aria-label="Permalink to &quot;Actions(动作)&quot;">​</a></h4><p>动作是 <code>GitHub Actions</code> 平台的一个自定义的应用，它会执行一个复杂但是需要频繁重复的作业。使用动作可以减少重复代码。比如一个 action 可以实现从 GitHub 拉取你的 git 仓库，为你的构建环境创建合适的工具链等。你可以写自己的动作 ，或者在 GitHub 市场找已经实现好的动作。</p><h4 id="runners-运行器" tabindex="-1">Runners(运行器) <a class="header-anchor" href="#runners-运行器" aria-label="Permalink to &quot;Runners(运行器)&quot;">​</a></h4><p>一个运行器是一个可以运行工作流的服务。每一个运行器一次只运行一个单独的任务。GitHub 提供 Ubuntu Linux，Microsoft Windows 和 macOS 运行器，每一个工作流都运行在一个独立新建的虚拟机中。如果你需要一个不同的操作系统，你可以自定义运行器。</p><p>了解完上面这些有关<code>GitHub Actions</code>的概念，我们开始搭建一条自己的工作流用于项目的部署。</p><h3 id="_4-搭建工作流" tabindex="-1">4.搭建工作流 <a class="header-anchor" href="#_4-搭建工作流" aria-label="Permalink to &quot;4.搭建工作流&quot;">​</a></h3><p><strong>.github/workflows</strong></p><p>我们在之前建好的仓库中点击<code>New workflow</code>来新建一条工作流。</p><p><img src="'+s+'" alt="" data-fancybox="gallery"></p><p>然后会到选择工作流的页面</p><p><img src="'+p+`" alt="" data-fancybox="gallery"></p><p>这里你可以选择一条别人建好的工作流，也可以选择新建自己的工作流。</p><p>我们还是选择新建自己的工作流</p><h3 id="_5-起步" tabindex="-1">5.起步 <a class="header-anchor" href="#_5-起步" aria-label="Permalink to &quot;5.起步&quot;">​</a></h3><p>首先在仓库的根目录下，创建 <code>.github/workflows/deploy.yml</code> 文件，这就是 <code>GitHub Actions</code> 功能的配置文件，用于告诉 <code>GitHub</code> 要做哪些事情，写入以下内容</p><div class="language-yaml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">deploy</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 每当 push 到 master 分支时触发部署</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    branches</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 手动触发部署</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  workflow_dispatch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">jobs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  deploy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    runs-on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ubuntu-latest</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    steps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">uses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">actions/checkout@v2</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          # “最近更新时间” 等 git 日志相关信息，需要拉取全部提交记录</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          fetch-depth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Setup Node.js</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        uses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">actions/setup-node@v1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          # 选择要使用的 node 版本</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          node-version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;14&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 安装pnpm</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Setup pnpm</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">npm i -g pnpm</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # 如果缓存没有命中，安装依赖</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Install dependencies</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">pnpm install --no-frozen-lockfile</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # 执行发布到库</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # 运行构建脚本</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Build Blog</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">pnpm docs:build</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # 查看 workflow 的文档来获取更多信息</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # @see https://github.com/crazy-max/ghaction-github-pages</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Deploy to GitHub Pages</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        uses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">crazy-max/ghaction-github-pages@v2</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          # 部署到 gh-pages 分支</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          target_branch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">gh-pages</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          # 部署目录为</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          build_dir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">docs/.vitepress/dist/</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          # @see https://docs.github.com/cn/actions/reference/authentication-in-a-workflow#about-the-github_token-secret</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          GITHUB_TOKEN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${{ secrets.GITHUB_TOKEN }}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br></div></div><p><code>GitHub Actions</code> 工作流需要的全部内容，遵循 YAML 格式，这里我做一个大致的说明：</p><ul><li><code>on</code> 表示触发条件</li><li><code>jobs</code> 表示要做的工作</li><li><code>jobs</code> 下的 <code>step</code> 表示要做的步骤，前一步失败，后面不会继续执行。</li><li><code>jobs</code> 下的 <code>step</code> 下有 <code>name、uses、with</code> 等，表示一个 action。</li><li><code>name</code> 表示 <code>action</code> 的名称，<code>uses</code> 表示使用哪个插件，<code>with</code> 表示传给插件的参数。</li><li><code>secrets.XXX</code> 这个 XXX 表示本仓库的环境变量，配置在仓库设置里面的 <code>secrets</code> 菜单拦，都是加密的。</li></ul><p><code>uses</code> 中用的就是别人写好的插件，持续集成由很多操作组成，比如抓取代码、运行测试、登录远程服务器，发布到第三方服务等等，这些操作都用共性，GitHub 就允许其他人把写好的插件共享到插件市场供其他人使用，因此如果你需要某个 <code>action</code>，不必自己写复杂的脚本，直接引用他人写好的 <code>action</code> 即可，你说方便不方便，插件市场见本文的学习资源小节。。</p><p>上述文件 <code>.github/workflows/deploy.yml</code> 写好之后，先别着急 push，一旦 push，这些 <code>actions</code> 就会执行，在参数正确的配置之前，报错那是肯定的。</p><h3 id="_6-参数" tabindex="-1">6.参数 <a class="header-anchor" href="#_6-参数" aria-label="Permalink to &quot;6.参数&quot;">​</a></h3><p><strong>secrets.GITHUB_TOKEN</strong></p><p><img src="`+t+'" alt="" data-fancybox="gallery"></p><h2 id="三-学习资源" tabindex="-1">三.学习资源 <a class="header-anchor" href="#三-学习资源" aria-label="Permalink to &quot;三.学习资源&quot;">​</a></h2><p>如果要学习 GitHub Actions 来实现自己的部署流程，以下学习资源供你参考：</p><ol><li><a href="https://link.zhihu.com/?target=http%3A//www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html" target="_blank" rel="noreferrer">GitHub Actions 入门教程</a>。</li><li><a href="https://link.zhihu.com/?target=https%3A//docs.github.com/en/actions" target="_blank" rel="noreferrer">GitHub Actions 官方文档</a>。</li><li><a href="https://link.zhihu.com/?target=https%3A//github.com/marketplace%3Ftype%3Dactions" target="_blank" rel="noreferrer">GitHub Actions 官方插件市场</a>。</li><li><a href="https://link.zhihu.com/?target=https%3A//github.com/sdras/awesome-actions" target="_blank" rel="noreferrer">awesome-actions</a>。</li></ol>',61),k=[r];function c(o,d,b,u,g,E){return n(),i("div",null,k)}const F=a(h,[["render",c]]);export{m as __pageData,F as default};
