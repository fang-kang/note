import{_ as a,a as i,o as e,aR as s}from"./chunks/framework.kUD5hkPg.js";const g=JSON.parse('{"title":"02.基本语法","description":"","frontmatter":{},"headers":[],"relativePath":"articles/02-后端/Java/01-基础/02.基本语法.md","filePath":"articles/02-后端/Java/01-基础/02.基本语法.md"}'),l={name:"articles/02-后端/Java/01-基础/02.基本语法.md"},o=s('<h1 id="_02-基本语法" tabindex="-1">02.基本语法 <a class="header-anchor" href="#_02-基本语法" aria-label="Permalink to &quot;02.基本语法&quot;">​</a></h1><h2 id="一-关键字与标识符" tabindex="-1">一.关键字与标识符 <a class="header-anchor" href="#一-关键字与标识符" aria-label="Permalink to &quot;一.关键字与标识符&quot;">​</a></h2><h3 id="_1-java-关键字的使用" tabindex="-1">1.java 关键字的使用 <a class="header-anchor" href="#_1-java-关键字的使用" aria-label="Permalink to &quot;1.java 关键字的使用&quot;">​</a></h3><p><strong>定义</strong>：被<code>java</code>语言赋予了特殊含义，用做专门用途的字符串（单词）</p><p><strong>特点</strong>：关键字中的所有字母都为小写</p><p><strong>具体哪些关键字</strong>：</p><p><img src="https://fang-kang.gitee.io/blog-img/java03.png#id=VRgJO&amp;originHeight=283&amp;originWidth=704&amp;originalType=binary&amp;ratio=1&amp;status=done&amp;style=none" alt="" data-fancybox="gallery"></p><p><img src="https://fang-kang.gitee.io/blog-img/java04.png#id=Dposd&amp;originHeight=382&amp;originWidth=711&amp;originalType=binary&amp;ratio=1&amp;status=done&amp;style=none" alt="" data-fancybox="gallery"></p><h3 id="_2-保留字" tabindex="-1">2.保留字 <a class="header-anchor" href="#_2-保留字" aria-label="Permalink to &quot;2.保留字&quot;">​</a></h3><p><strong>定义</strong> ：现 java 版本尚未使用，但以后版本可能会作为关键字使用。</p><p><strong>具体哪些保留字</strong>： <code>goto</code>、<code>const</code></p><p><strong>注意：自己命名标识符时要避免使用这些保留字</strong></p><h3 id="_3-标识符的使用" tabindex="-1">3.标识符的使用 <a class="header-anchor" href="#_3-标识符的使用" aria-label="Permalink to &quot;3.标识符的使用&quot;">​</a></h3><p><strong>定义</strong>：凡是自己可以起名字的地方都叫标识符。</p><p><strong>涉及到的结构</strong>：包名、类名、接口名、变量名、方法名、常量名</p><p><strong>规则</strong>：</p><ul><li>由 26 个英文字母大小写，0-9，或<code>$</code>组成。</li><li>数字不可以开头。</li><li>不可以使用关键字和保留字，但能包含关键字和保留字。</li><li><code>java</code>严格区分大小写，长度无限制。</li><li>标识符不能包含空格。</li></ul><p><strong>规范</strong>：</p><ul><li>包名：多单词组成时所有字母都小写：<code>xxxyyyzzz</code></li><li>类名、接口名：多单词组成时，所有单词都首字母大写：<code>XxxYyyZzz</code></li><li>变量名、方法名：多单词组成时，第一个单词首字母小写，第二个单词开始每个单词首字母大写<code>xxxYyyZzz</code></li><li>常量名：所有字母都大写。多单词时每个单词用下划线连接：<code>XXX_YYY_ZZZ</code></li></ul><p><strong>注意点</strong>：</p><ul><li>在起名字时，为了提高阅读性，要尽量有意义，“见名知意”。</li><li><code>java</code>采用<code>unicode</code>字符集，因此标识符也可以用汉字声明，但是不建议使用</li></ul><h2 id="二-变量的使用-重点" tabindex="-1">二.变量的使用(重点) <a class="header-anchor" href="#二-变量的使用-重点" aria-label="Permalink to &quot;二.变量的使用(重点)&quot;">​</a></h2><h3 id="_1-变量的分类" tabindex="-1">1.变量的分类 <a class="header-anchor" href="#_1-变量的分类" aria-label="Permalink to &quot;1.变量的分类&quot;">​</a></h3><h4 id="_1-1-按数据类型分类" tabindex="-1">1.1 按数据类型分类 <a class="header-anchor" href="#_1-1-按数据类型分类" aria-label="Permalink to &quot;1.1 按数据类型分类&quot;">​</a></h4><p><strong>数据类型</strong></p><ul><li>基本数据类型 <ul><li>数值型 <ul><li>整数类型 <code>byte</code> <code>short</code> <code>int</code> <code>long</code></li><li>浮点类型 <code>float</code> <code>double</code></li></ul></li><li>字符型 <code>char</code></li><li>布尔型 <code>boolean</code></li></ul></li><li>引用数据类型 <ul><li>类 <code>class</code></li><li>接口 <code>interface</code></li><li>数组 <code>[]</code></li></ul></li></ul><p><strong>详细说明</strong></p><ul><li>整型：<code>byte</code>(1 字节=8bit) <code>short</code>(2 字节) <code>int</code>(4 字节) <code>long</code>(8 字节) <ul><li><code>byte</code>范围：-128 - 127</li><li>声明<code>long</code>型变量，必须以<code>l</code>或<code>L</code>结尾</li><li>通常，定义整型变量时，使用<code>int</code>型</li><li>整型的常量，默认类型是：<code>int</code>型</li></ul></li><li>浮点型： <code>float</code>(4 字节) <code>double</code>(8 字节) <ul><li>浮点型，表示带小数点的数值</li><li><code>float</code>表示数值的范围比<code>long</code>还大</li><li>定义<code>float</code>类型变量时，变量要以<code>f</code>或<code>F</code>结尾</li><li>通常，定义浮点型变量时，使用<code>double</code>型</li><li>浮点型的常量，默认类型是：<code>double</code>型</li></ul></li><li>字符型： <code>char</code>(1 字符=2 字节) <ul><li>定义<code>char</code>型变量，通常使用一对<code>&#39;&#39;</code>,内部只能写一个字符</li><li>表示方式： <ul><li>1.声明一个字符</li><li>2.转义字符</li><li>3.直接使用<code>Unicode</code>值来表示字符型常量</li></ul></li></ul></li><li>布尔型： <code>boolean</code><ul><li>只能取两个值之一：<code>ture</code>,<code>false</code></li><li>常常在条件判断、循环结构中使用</li></ul></li></ul><h4 id="_1-2-按声明的位置分类-了解" tabindex="-1">1.2 按声明的位置分类（了解） <a class="header-anchor" href="#_1-2-按声明的位置分类-了解" aria-label="Permalink to &quot;1.2 按声明的位置分类（了解）&quot;">​</a></h4><p><strong>所有变量</strong></p><ul><li>成员变量 <ul><li>实例变量(不以<code>static</code>修饰)</li><li>类变量(以<code>static</code>修饰)</li></ul></li><li>局部变量 <ul><li>形参（方法、构造器中定义的变量）</li><li>方法局部变量（在方法内定义）</li><li>代码块局部变量（在代码块中定义）</li></ul></li></ul><h3 id="_2-定义变量的格式" tabindex="-1">2.定义变量的格式 <a class="header-anchor" href="#_2-定义变量的格式" aria-label="Permalink to &quot;2.定义变量的格式&quot;">​</a></h3><p>数据类型 变量名 = 变量值;</p><p>或</p><p>数据类型 变量名;</p><p>变量名 = 变量值;</p><h3 id="_3-变量使用的注意点" tabindex="-1">3.变量使用的注意点 <a class="header-anchor" href="#_3-变量使用的注意点" aria-label="Permalink to &quot;3.变量使用的注意点&quot;">​</a></h3><ul><li>变量必须先声明，后使用</li><li>变量都定义在其作用域内，在作用域内，它是有效的。换句话说，出了作用域，就失效了。</li><li>同一个作用域内，不可以声明两个同名的变量。</li></ul><h3 id="_4-基本数据类型变量间运算规则" tabindex="-1">4.基本数据类型变量间运算规则 <a class="header-anchor" href="#_4-基本数据类型变量间运算规则" aria-label="Permalink to &quot;4.基本数据类型变量间运算规则&quot;">​</a></h3><h4 id="_4-1-涉及到的基本数据类型" tabindex="-1">4.1 涉及到的基本数据类型 <a class="header-anchor" href="#_4-1-涉及到的基本数据类型" aria-label="Permalink to &quot;4.1 涉及到的基本数据类型&quot;">​</a></h4><p>除了<code>boolean</code>之外的 7 种</p><h4 id="_4-2-自动类型转换-只涉及-7-种基本数据类型" tabindex="-1">4.2 自动类型转换（只涉及 7 种基本数据类型） <a class="header-anchor" href="#_4-2-自动类型转换-只涉及-7-种基本数据类型" aria-label="Permalink to &quot;4.2 自动类型转换（只涉及 7 种基本数据类型）&quot;">​</a></h4><p><strong>结论</strong>：当容量小的数据类型的变量与容量大的数据类型的变量做运算时，结果自动提升为容量大的数据类型。</p><p><code>byte</code>、<code>char</code>、<code>short</code> =&gt; <code>int</code> =&gt; <code>long</code> =&gt; <code>float</code> =&gt; <code>double</code></p><p><strong>特别的</strong>： 当<code>byte</code>、<code>char</code>、<code>short</code>三种类型的变量做运算时，结果为<code>int</code>型。</p><blockquote><p>说明:此时的容量大小指的是，表示数的范围的大和小。比如：<code>float</code>的容量要大于<code>long</code>的容量。</p></blockquote><h4 id="_4-3-强制类型转换-只涉及-7-种基本数据类型" tabindex="-1">4.3 强制类型转换（只涉及 7 种基本数据类型） <a class="header-anchor" href="#_4-3-强制类型转换-只涉及-7-种基本数据类型" aria-label="Permalink to &quot;4.3 强制类型转换（只涉及 7 种基本数据类型）&quot;">​</a></h4><blockquote><p>自动类型提升运算的逆运算</p></blockquote><ul><li>需要使用强转符:()</li><li>注意点：强制类型转换，可能导致精度损失。</li></ul><h4 id="_4-4-string与-8-种基本数据类型间的运算" tabindex="-1">4.4 <code>String</code>与 8 种基本数据类型间的运算 <a class="header-anchor" href="#_4-4-string与-8-种基本数据类型间的运算" aria-label="Permalink to &quot;4.4 `String`与 8 种基本数据类型间的运算&quot;">​</a></h4><ol><li><code>String</code>属于引用数据类型，翻译为：字符串</li><li>声明<code>String</code>类型变量时，使用一对<code>&quot;&quot;</code></li><li><code>String</code>可以和 8 种基本数据类型变量做运算，且运算只能是连接运算：<code>+</code></li><li>运算的结果仍然是<code>String</code>类型</li></ol><p>避免：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 编译错误</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String s1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;123&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)s1; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 编译错误</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="三-进制-了解" tabindex="-1">三.进制（了解） <a class="header-anchor" href="#三-进制-了解" aria-label="Permalink to &quot;三.进制（了解）&quot;">​</a></h2><h3 id="_1-编程中涉及到的进制及表示方式" tabindex="-1">1.编程中涉及到的进制及表示方式 <a class="header-anchor" href="#_1-编程中涉及到的进制及表示方式" aria-label="Permalink to &quot;1.编程中涉及到的进制及表示方式&quot;">​</a></h3><p>| 二进制 | 0,1 | 满 2 进 1，以<code>0b</code> 或<code>0B</code> 开头。 | | --- | --- | --- | | 十进制 | 0,9 | 满 10 进 1。 | | 八进制 | 0,7 | 满 8 进 1，以数字<code>0</code> 开头表示。 | | 十六进制 | 0,9 及<code>A-F</code> | 满 16 进 1，以<code>0x</code> 或<code>0X</code> 开头表示。此处的<code>A-F</code> 不区分大小写。 |</p><h3 id="_2-二进制的使用说明" tabindex="-1">2.二进制的使用说明 <a class="header-anchor" href="#_2-二进制的使用说明" aria-label="Permalink to &quot;2.二进制的使用说明&quot;">​</a></h3><h4 id="_2-1-计算机底层的存储方式" tabindex="-1">2.1 计算机底层的存储方式 <a class="header-anchor" href="#_2-1-计算机底层的存储方式" aria-label="Permalink to &quot;2.1 计算机底层的存储方式&quot;">​</a></h4><p>所有的数字在计算机底层都以<strong>二进制</strong>形式存在</p><h4 id="_2-2-二进制数据的存储方式" tabindex="-1">2.2 二进制数据的存储方式 <a class="header-anchor" href="#_2-2-二进制数据的存储方式" aria-label="Permalink to &quot;2.2 二进制数据的存储方式&quot;">​</a></h4><p>所有的数值，不管正负，底层都以补码的形式存储。</p><h4 id="_2-3-原码、反码、补码的说明" tabindex="-1">2.3 原码、反码、补码的说明 <a class="header-anchor" href="#_2-3-原码、反码、补码的说明" aria-label="Permalink to &quot;2.3 原码、反码、补码的说明&quot;">​</a></h4><ul><li>正数：三码合一</li><li>负数： <ul><li>原码：直接将一个数值换成二进制数。最高位是符号位。</li><li>负数的反码：是对原码按位取反，只是最高位（符号位）确定为 1。</li><li>负数的补码：其反码加 1。</li></ul></li></ul><h3 id="_3-进制间的转换" tabindex="-1">3.进制间的转换 <a class="header-anchor" href="#_3-进制间的转换" aria-label="Permalink to &quot;3.进制间的转换&quot;">​</a></h3><p><img src="https://fang-kang.gitee.io/blog-img/java05.png#id=SRPyJ&amp;originHeight=105&amp;originWidth=507&amp;originalType=binary&amp;ratio=1&amp;status=done&amp;style=none" alt="" data-fancybox="gallery"></p><h2 id="四-运算符" tabindex="-1">四.运算符 <a class="header-anchor" href="#四-运算符" aria-label="Permalink to &quot;四.运算符&quot;">​</a></h2><h3 id="_1-算数运算符" tabindex="-1">1.算数运算符 <a class="header-anchor" href="#_1-算数运算符" aria-label="Permalink to &quot;1.算数运算符&quot;">​</a></h3><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> %</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> （前）++</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> （后）++</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> （前）--</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> （后）--</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>特别说明</strong>：</p><ul><li>(前)++ 先自增 1，后运算。 (后)++先运算，后自增 1。</li><li>连接符：<code>+</code> 只能使用在<code>String</code>与其他数据类型变量之间使用。</li></ul><h3 id="_2-赋值运算符" tabindex="-1">2.赋值运算符 <a class="header-anchor" href="#_2-赋值运算符" aria-label="Permalink to &quot;2.赋值运算符&quot;">​</a></h3><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">= </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> %=</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>特别说明</strong>：</p><ul><li>运算的结果不会改变变量本身的数据类型</li></ul><h3 id="_3-比较运算符" tabindex="-1">3.比较运算符 <a class="header-anchor" href="#_3-比较运算符" aria-label="Permalink to &quot;3.比较运算符&quot;">​</a></h3><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">== </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> instanceof</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>特别说明</strong>：</p><ul><li>比较运算符的结果是<code>boolean</code>类型</li><li><code>&gt;</code> <code>&lt;</code> <code>&gt;=</code> <code>&lt;=</code> 只能在数值类型的数据之间。</li><li><code>==</code> 和 <code>!=</code> 不仅可以可以使用在数值类型的数据之间，还可以使用在其他引用类型变量之间。</li></ul><h3 id="_4-逻辑运算符" tabindex="-1">4.逻辑运算符 <a class="header-anchor" href="#_4-逻辑运算符" aria-label="Permalink to &quot;4.逻辑运算符&quot;">​</a></h3><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&amp; &amp;&amp; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ^</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>特别说明</strong>：</p><ul><li>逻辑运算符操作的都是<code>boolean</code>类型的变量。而且结果也是<code>boolean</code>类型。</li></ul><h3 id="_5-位运算符" tabindex="-1">5.位运算符 <a class="header-anchor" href="#_5-位运算符" aria-label="Permalink to &quot;5.位运算符&quot;">​</a></h3><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &gt;&gt;&gt; &lt;&lt;&lt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>[<strong>面试题</strong>] 你能否写出最高效的 2 * 8 的实现方式？</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//答案：</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 或</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><strong>特别说明</strong>：</p><ul><li>位运算符操作的都是整型的数据</li><li><code>&lt;&lt;</code>：在一定范围内，每向左移 1 位，相当于 * 2</li><li><code>&gt;&gt;</code>：在一定范围内，每向右移 1 位，相当于 / 2</li></ul><h3 id="_6-三元运算符" tabindex="-1">6.三元运算符 <a class="header-anchor" href="#_6-三元运算符" aria-label="Permalink to &quot;6.三元运算符&quot;">​</a></h3><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">条件表达式</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 表达式1 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 表达式2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>特别说明</strong>：</p><ul><li>条件表达式的结果是<code>boolean</code>类型。</li><li>根据条件表达式真或假，决定执行表达式 1，还是表达式 2。 <ul><li>如果表达式为<code>true</code>，则执行表达式 1.</li><li>如果表达式为<code>false</code>，则执行表达式 2.</li></ul></li><li>表达式 1 和表达式 2 的要求是一致的。</li><li>三元运算符可以嵌套使用。</li><li>凡是可以使用三元运算符的地方，都可以改写为<code>if-else</code>。反之，不成立。</li><li>如果程序既可以使用三元运算符，又可以使用<code>if-else</code>结构，那么优先选择三元运算符。 <ul><li>原因：简洁、执行效率高。</li></ul></li></ul><h2 id="五-流程控制" tabindex="-1">五.流程控制 <a class="header-anchor" href="#五-流程控制" aria-label="Permalink to &quot;五.流程控制&quot;">​</a></h2><h3 id="_1-分支结构" tabindex="-1">1.分支结构 <a class="header-anchor" href="#_1-分支结构" aria-label="Permalink to &quot;1.分支结构&quot;">​</a></h3><h4 id="_1-1if-else-if-else" tabindex="-1">1.1<code>if-else-if-else</code> <a class="header-anchor" href="#_1-1if-else-if-else" aria-label="Permalink to &quot;1.1`if-else-if-else`&quot;">​</a></h4><p><strong>说明</strong>：</p><ul><li><code>else</code>结构是可选的</li><li>针对于条件表达式： <ul><li>如果多个表达式之间是“互斥”关系（或没有交集的关系），哪个判断和执行语句声明在上面还是下面，无所谓。</li><li>如果多个表达式之间有交集的关系，需要根据实际情况，考虑清楚应该将哪个结构声明在上面。</li><li>如果多个表达式之间有包含的关系，通常情况下，需要将范围小的声明在范围大的上面。否则，范围小的就没机会执行了。</li></ul></li><li><code>if-else</code>结构是可以相互嵌套的。</li><li>如果<code>if-else</code>结构中的执行语句只有一行时，对应的一对<code>{}</code>可以省略掉。但是，不建议省略。</li></ul><h4 id="_1-2switch-case" tabindex="-1">1.2<code>switch-case</code> <a class="header-anchor" href="#_1-2switch-case" aria-label="Permalink to &quot;1.2`switch-case`&quot;">​</a></h4><p><strong>说明</strong>：</p><ul><li>根据<code>switch</code>表达式中的值，依次匹配各个<code>case</code>中的常量。一旦匹配成功，则进入相应<code>case</code>结构中，调用其执行语句。当调用完执行语句后，则仍然继续向下执行其他<code>case</code>结构中的执行语句，直到遇到<code>break</code>关键字或此<code>switch-case</code>结构末尾结束为止。</li><li><code>break</code>,可以使用在<code>switch-case</code>结构中，表示一旦执行到此关键字，就跳出<code>switch-case</code>结构</li><li><code>switch-case</code>结构中的表达式，只能是如下的 6 种数据类型之一 <code>byte</code>、<code>short</code>、<code>char</code>、<code>int</code>、枚举类型（JDK5.0 新增）、<code>String</code>类型(JDK7.0 新增)</li><li><code>case</code>之后只能声明常量。不能声明范围。</li><li><code>break</code>关键字是可选的。</li><li><code>default</code>:相当于<code>if-else</code>结构中的<code>else</code>。 <code>default</code>结构是可选的，而且位置是灵活的。</li><li>如果<code>switch-case</code>结构中的多个<code>case</code>的执行语句相同，则可以考虑合并。</li></ul><h3 id="_2-循环结构" tabindex="-1">2.循环结构 <a class="header-anchor" href="#_2-循环结构" aria-label="Permalink to &quot;2.循环结构&quot;">​</a></h3><h4 id="_2-1-循环结构的四要素" tabindex="-1">2.1 循环结构的四要素 <a class="header-anchor" href="#_2-1-循环结构的四要素" aria-label="Permalink to &quot;2.1 循环结构的四要素&quot;">​</a></h4><ol><li>初始化条件</li><li><strong>循环条件</strong><code>**=&gt;**</code><strong>是</strong><code>**boolean**</code><strong>类型</strong></li><li>循环体</li><li>迭代条件</li></ol><h4 id="_2-2-三种循环结构" tabindex="-1">2.2 三种循环结构 <a class="header-anchor" href="#_2-2-三种循环结构" aria-label="Permalink to &quot;2.2 三种循环结构&quot;">​</a></h4><ul><li><code>for</code></li><li><code>while</code></li><li><code>do-while</code></li></ul><h3 id="_3-关键字-break和continue" tabindex="-1">3.关键字：<code>break</code>和<code>continue</code> <a class="header-anchor" href="#_3-关键字-break和continue" aria-label="Permalink to &quot;3.关键字：`break`和`continue`&quot;">​</a></h3>',106),t=[o];function n(d,c,h,r,p,k){return e(),i("div",null,t)}const b=a(l,[["render",n]]);export{g as __pageData,b as default};
