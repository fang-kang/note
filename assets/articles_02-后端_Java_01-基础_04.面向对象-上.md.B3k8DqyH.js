import{_ as s,a as i,o as a,aR as n}from"./chunks/framework.kUD5hkPg.js";const g=JSON.parse('{"title":"04.面向对象-上","description":"","frontmatter":{},"headers":[],"relativePath":"articles/02-后端/Java/01-基础/04.面向对象-上.md","filePath":"articles/02-后端/Java/01-基础/04.面向对象-上.md"}'),l={name:"articles/02-后端/Java/01-基础/04.面向对象-上.md"},e=n(`<h1 id="_04-面向对象-上" tabindex="-1">04.面向对象-上 <a class="header-anchor" href="#_04-面向对象-上" aria-label="Permalink to &quot;04.面向对象-上&quot;">​</a></h1><h2 id="一-类与对象" tabindex="-1">一.类与对象 <a class="header-anchor" href="#一-类与对象" aria-label="Permalink to &quot;一.类与对象&quot;">​</a></h2><h3 id="_1-面向对象学习的三条主线" tabindex="-1">1.面向对象学习的三条主线 <a class="header-anchor" href="#_1-面向对象学习的三条主线" aria-label="Permalink to &quot;1.面向对象学习的三条主线&quot;">​</a></h3><ul><li><code>Java</code>类及类的成员：属性、方法、构造器；代码块、内部类</li><li>面向对象的三大特征：封装性、继承性、多态性、（抽象性）</li><li>其他关键字：<code>this</code>、<code>super</code>、<code>static</code>、<code>final</code>、<code>abstract</code>、<code>interface</code>、<code>package</code>、<code>import</code>等</li></ul><h3 id="_2-面向对象与面向过程-理解" tabindex="-1">2.面向对象与面向过程(理解) <a class="header-anchor" href="#_2-面向对象与面向过程-理解" aria-label="Permalink to &quot;2.面向对象与面向过程(理解)&quot;">​</a></h3><ul><li>面向过程：强调的是功能行为，以函数为最小单位，考虑怎么做。</li><li>面向对象：强调具备了功能的对象，以类/对象为最小单位，考虑谁来做。</li></ul><h3 id="_3-面向对象中两个重要的概念" tabindex="-1">3.面向对象中两个重要的概念 <a class="header-anchor" href="#_3-面向对象中两个重要的概念" aria-label="Permalink to &quot;3.面向对象中两个重要的概念&quot;">​</a></h3><p><strong>类</strong>：对一类事物的描述，是抽象的、概念上的定义。</p><p><strong>对象</strong>：是实际存在的该类事物的每个个体，因此也称为实例(instance)。</p><ul><li>面向对象程序设计的重点是类的设计</li><li>设计类，就是设计类的成员</li></ul><p><strong>二者的关系</strong>：对象，是由类<code>new</code>出来的，派生出来的。</p><h3 id="_4-面向对象思想落地实现的规则" tabindex="-1">4.面向对象思想落地实现的规则 <a class="header-anchor" href="#_4-面向对象思想落地实现的规则" aria-label="Permalink to &quot;4.面向对象思想落地实现的规则&quot;">​</a></h3><ol><li>创建类，设计类的成员</li><li>创建类的对象</li><li>通过“对象.属性“或”对象.方法“调用对象的结构</li></ol><p><strong>补充：几个概念的使用说明</strong></p><ul><li>属性 = 成员变量 = field = 域、字段</li><li>方法 = 成员方法 = 函数 = method</li><li>创建类的对象 = 类的实例化 = 实例化类</li></ul><h3 id="_5-对象的创建与对象的内存解析" tabindex="-1">5.对象的创建与对象的内存解析 <a class="header-anchor" href="#_5-对象的创建与对象的内存解析" aria-label="Permalink to &quot;5.对象的创建与对象的内存解析&quot;">​</a></h3><p><strong>典型代码</strong>：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Person p1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Person p2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Person p3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p1; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//没有新创建一个对象，共用一个堆空间中的对象实体。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>说明</strong>：</p><p>如果创建了一个类的多个对象，则每个对象都独立的拥有一套类的属性。（非 static 的）</p><p>意味着：如果我们修改一个对象的属性<code>a</code>，则不影响另外一个对象属性<code>a</code>的值。</p><p><strong>内存解析</strong>：</p><p><img src="https://fang-kang.gitee.io/blog-img/java07.png#id=vzbbT&amp;originHeight=401&amp;originWidth=706&amp;originalType=binary&amp;ratio=1&amp;status=done&amp;style=none" alt="" data-fancybox="gallery"></p><h3 id="_6-jvm-内存结构" tabindex="-1">6.JVM 内存结构 <a class="header-anchor" href="#_6-jvm-内存结构" aria-label="Permalink to &quot;6.JVM 内存结构&quot;">​</a></h3><p>编译完源程序以后，生成一个或多个字节码文件。</p><p>我们使用<code>JVM</code>中的类的加载器和解释器对生成的字节码文件进行解释运行。意味着，需要将字节码文件对应的类加载到内存中，涉及到内存解析。</p><p><img src="https://fang-kang.gitee.io/blog-img/java08.png#id=d6fUB&amp;originHeight=373&amp;originWidth=525&amp;originalType=binary&amp;ratio=1&amp;status=done&amp;style=none" alt="" data-fancybox="gallery"></p><p>虚拟机栈，即为平时提到的栈结构。我们将局部变量储存在栈结构中</p><p>堆,我们将<code>new</code>出来的结构（比如：数组、对象）加载到<strong>堆空间</strong>中。补充：对象的属性（非 static 的）加载在堆空间中。</p><p>方法区：类的加载信息、常量池、静态域</p><h3 id="_7-匿名对象" tabindex="-1">7.匿名对象 <a class="header-anchor" href="#_7-匿名对象" aria-label="Permalink to &quot;7.匿名对象&quot;">​</a></h3><p><strong>定义</strong>： 我们创建的对象，没显示的赋给一个变量名。即为匿名对象。</p><p><strong>特点</strong>：匿名对象只能调用一次。</p><p><strong>举例</strong>：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Phone</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sendEmail</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Phone</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">playGame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Phone</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().price </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1999</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Phone</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">showPrice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><strong>应用场景</strong>：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PhoneMall mall </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PhoneMall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// mall.show(p);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 匿名对象的使用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mall.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">show</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Phone</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PhoneMall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vold </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">show</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Phone </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">phone</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        phone.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sendEmail</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        phone.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">playGame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="二-类的结构之一-属性" tabindex="-1">二.类的结构之一：属性 <a class="header-anchor" href="#二-类的结构之一-属性" aria-label="Permalink to &quot;二.类的结构之一：属性&quot;">​</a></h2><p>对比：属性 vs 局部变量</p><h3 id="_1-相同点" tabindex="-1">1.相同点 <a class="header-anchor" href="#_1-相同点" aria-label="Permalink to &quot;1.相同点&quot;">​</a></h3><ul><li>定义变量的格式：数据类型 变量名 = 变量值</li><li>先声明，后使用</li><li>变量都其对应的作用域</li></ul><h3 id="_2-不同点" tabindex="-1">2.不同点 <a class="header-anchor" href="#_2-不同点" aria-label="Permalink to &quot;2.不同点&quot;">​</a></h3><ul><li>在类中声明的位置的不同 <ul><li>属性：直接定义在类的一对<code>{}</code>内</li><li>局部变量：声明在方法内、方法形参、代码块内、构造器形参、构造器内部的变量</li></ul></li><li>关于权限修饰符的不同 <ul><li>属性：可以在声明属性时，指明其权限，使用权限修饰符。 常用的权限修饰符：<code>private</code>、<code>public</code>、缺省、<code>protected</code> <code>=&gt;</code> 封装性</li><li>局部变量：不可以使用权限修饰符</li></ul></li><li>默认初始化值的情况 <ul><li>属性：类的属性，根据其类型，都默认初始化值 整型(<code>byte</code>、<code>short</code>、<code>int</code>、<code>long</code> : 0 ) 浮点型(<code>float</code> 、 <code>doubel</code> : 0.0 ) 字符型(<code>char</code> : 0 (或<code>&#39;\\u0000&#39;</code>)) 布尔型(<code>boolean</code> : <code>false</code>) 引用数据类型（类、数组、接口 : <code>null</code>）</li><li>局部变量：没有默认初始化值 意味着，我们在调用局部变量之前，一定要显示赋值。 特别地：形参在调用时，我们赋值即可。</li></ul></li><li>在内存中加载的位置 <ul><li>属性：加载到堆空间中（非 static）</li><li>局部变量：加载到栈空间</li></ul></li></ul><h2 id="三-类的结构之二-方法" tabindex="-1">三.类的结构之二：方法 <a class="header-anchor" href="#三-类的结构之二-方法" aria-label="Permalink to &quot;三.类的结构之二：方法&quot;">​</a></h2><h3 id="_1-方法的使用" tabindex="-1">1.方法的使用 <a class="header-anchor" href="#_1-方法的使用" aria-label="Permalink to &quot;1.方法的使用&quot;">​</a></h3><p><strong>方法</strong>：描述类应该具有的功能。</p><p><strong>方法的声明</strong>：权限修饰符 返回值类型 方法名（形参列表）{</p><p>方法体</p><p>}</p><p><strong>注意</strong>：<code>static</code>、<code>final</code>、<code>abstract</code>来修饰方法</p><p><strong>说明</strong>：</p><ul><li>关于权限修饰符：默认方法的权限修饰符先都使用<code>public</code><code>Java</code>规定四种权限修饰符:<code>private</code>、<code>public</code>、缺省、<code>protected</code></li><li>返回值类型： 返回值 vs 没返回值 <ul><li>如果方法有返回值，则必须在方法声明时，指定返回值的类型。同时，方法中，需要使用<code>return</code>关键字来返回指定类型的变量或常量：<code>return</code>数据。</li><li>如果方法没有返回值，则方法声明时，使用<code>void</code>来表示。通常，没返回值的方法中，就不需要使用<code>return</code>。但是，如果使用的话，只能<code>return;</code>表示此方法结束的意思。</li><li>定义方法该不该返回值? <ul><li>题目要求</li><li>凭经验，具体问题具体分析</li></ul></li></ul></li><li>方法名：属于标识符，遵循标识符的规则和规范，“见名知意”。</li><li>形参列表：可以声明 0 个，1 个或多个形参 <ul><li>格式：数据类型 1 形参 1，数据类型 2 形参 2</li><li>定义方法时，该不该定义形参? <ul><li>题目要求</li><li>凭经验，具体问题具体分析</li></ul></li></ul></li><li>方法体：方法功能的体现。</li><li>方法的使用中，可以调用当前类的属性和方法 <ul><li>特殊的：方法 A 中又调用了方法 A：递归方法。</li><li>方法中，不可以定义方法。</li></ul></li></ul><h3 id="_2-关键字-return" tabindex="-1">2.关键字：return <a class="header-anchor" href="#_2-关键字-return" aria-label="Permalink to &quot;2.关键字：return&quot;">​</a></h3><h4 id="_2-1-使用范围" tabindex="-1">2.1 使用范围 <a class="header-anchor" href="#_2-1-使用范围" aria-label="Permalink to &quot;2.1 使用范围&quot;">​</a></h4><p>使用在方法体中</p><h4 id="_2-2-作用" tabindex="-1">2.2 作用 <a class="header-anchor" href="#_2-2-作用" aria-label="Permalink to &quot;2.2 作用&quot;">​</a></h4><ul><li>结束方法</li><li>针对于返回值类型的方法，使用<code>return</code>数据返回所要的数据。</li></ul><h4 id="_2-3-注意点" tabindex="-1">2.3 注意点 <a class="header-anchor" href="#_2-3-注意点" aria-label="Permalink to &quot;2.3 注意点&quot;">​</a></h4><p><code>return</code>关键字后面不可以声明执行语句。</p><h3 id="_3-方法的重载" tabindex="-1">3.方法的重载 <a class="header-anchor" href="#_3-方法的重载" aria-label="Permalink to &quot;3.方法的重载&quot;">​</a></h3><h4 id="_3-1-定义" tabindex="-1">3.1 定义 <a class="header-anchor" href="#_3-1-定义" aria-label="Permalink to &quot;3.1 定义&quot;">​</a></h4><p>在同一个类中，允许存在一个以上的同名方法，只要它们的参数个数或者参数类型不同即可。</p><h4 id="_3-2-总结" tabindex="-1">3.2 总结 <a class="header-anchor" href="#_3-2-总结" aria-label="Permalink to &quot;3.2 总结&quot;">​</a></h4><p><strong>两同一不同</strong>：</p><ul><li>同一个类、相同方法名</li><li>参数列表不同：参数个数不同，参数类型不同</li></ul><h4 id="_3-3-构成重载的举例" tabindex="-1">3.3 构成重载的举例 <a class="header-anchor" href="#_3-3-构成重载的举例" aria-label="Permalink to &quot;3.3 构成重载的举例&quot;">​</a></h4><p>举例一：<code>Arrays</code>类中重载的 sort()</p><p>举例二：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getSum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> j){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getSum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d1, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d2){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getSum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String s, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getSum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i, String s){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;4&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h4 id="_3-4-不构成重载的举例" tabindex="-1">3.4 不构成重载的举例 <a class="header-anchor" href="#_3-4-不构成重载的举例" aria-label="Permalink to &quot;3.4 不构成重载的举例&quot;">​</a></h4><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getSum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> j){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getSum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n){</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getSum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> j){</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h4 id="_3-5-如何判断是否构成方法的重载" tabindex="-1">3.5 如何判断是否构成方法的重载？ <a class="header-anchor" href="#_3-5-如何判断是否构成方法的重载" aria-label="Permalink to &quot;3.5 如何判断是否构成方法的重载？&quot;">​</a></h4><p>严格按照定义判断：两同一不同。</p><p>跟方法的权限修饰符、返回值类型、形参变量名、方法体都没关系。</p><h4 id="_3-6-如何确定类中某一个方法的调用" tabindex="-1">3.6 如何确定类中某一个方法的调用 <a class="header-anchor" href="#_3-6-如何确定类中某一个方法的调用" aria-label="Permalink to &quot;3.6 如何确定类中某一个方法的调用&quot;">​</a></h4><p>方法名 <code>=&gt;</code> 参数列表</p><h3 id="_4-可变个数形参的方法" tabindex="-1">4.可变个数形参的方法 <a class="header-anchor" href="#_4-可变个数形参的方法" aria-label="Permalink to &quot;4.可变个数形参的方法&quot;">​</a></h3><h4 id="_4-1-使用说明" tabindex="-1">4.1 使用说明 <a class="header-anchor" href="#_4-1-使用说明" aria-label="Permalink to &quot;4.1 使用说明&quot;">​</a></h4><ul><li>可变个数形参的格式：数据类型...变量名</li><li>当调用可变个数形参的方法时，传入的参数个数可以是：0 个，1 个，2 个。</li><li>可变个数形参的方法与本类中方法名相同，形参不同的方法之间构成重载</li><li>可变个数形参的方法与本类中方法名相同，形参类型也相同的数组之间不构成重载。换句话说，二者不能共存</li><li>可变个数形参在方法的形参中，必须声明在末尾</li><li>可变个数形参在方法的形参中，最多只能声明一个可变形参。</li></ul><h4 id="_4-2-举例说明" tabindex="-1">4.2 举例说明 <a class="header-anchor" href="#_4-2-举例说明" aria-label="Permalink to &quot;4.2 举例说明&quot;">​</a></h4><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> show</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i){</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> show</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String s){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;show String s&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> show</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String ... strs){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;String ... strs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> strs.length;i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(strs[i]);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 不能与上一个方法同时存在</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//  public void show(String [] strs){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h3 id="_5-java-的值传递机制" tabindex="-1">5.Java 的值传递机制 <a class="header-anchor" href="#_5-java-的值传递机制" aria-label="Permalink to &quot;5.Java 的值传递机制&quot;">​</a></h3><h4 id="_5-1-针对于方法内变量的赋值举例" tabindex="-1">5.1 针对于方法内变量的赋值举例 <a class="header-anchor" href="#_5-1-针对于方法内变量的赋值举例" aria-label="Permalink to &quot;5.1 针对于方法内变量的赋值举例&quot;">​</a></h4><p><strong>规则</strong>：</p><ul><li>如果变量是基本数据类型，此时赋值的是变量所保存的数据值。</li><li>如果变量是引用数据类型，此时赋值的是变量所保存的数据的地址值。</li></ul><h4 id="_5-2-针对于方法的参数概念" tabindex="-1">5.2 针对于方法的参数概念 <a class="header-anchor" href="#_5-2-针对于方法的参数概念" aria-label="Permalink to &quot;5.2 针对于方法的参数概念&quot;">​</a></h4><p><strong>形参</strong>：方法定义时，声明的小括号内的参数</p><p><strong>实参</strong>：方法调用时，实际传递给形参的参数</p><h4 id="_5-3-java-中参数传递机制" tabindex="-1">5.3 java 中参数传递机制 <a class="header-anchor" href="#_5-3-java-中参数传递机制" aria-label="Permalink to &quot;5.3 java 中参数传递机制&quot;">​</a></h4><p><strong>规则</strong>：</p><ul><li>如果参数是基本数据类型，此时实参赋给形参的是实参真实存储的数据值。</li><li>如果参数是引用数据类型，此时实参赋给形参的是实参存储数据的地址值。</li></ul><p><strong>推广</strong>：</p><ul><li>如果变量是基本数据类型，此时赋值的是变量所保存的数据值。</li><li>如果变量是引用数据类型，此时赋值的是变量所保存的数据的地址值。</li></ul><h3 id="_6-递归方法" tabindex="-1">6.递归方法 <a class="header-anchor" href="#_6-递归方法" aria-label="Permalink to &quot;6.递归方法&quot;">​</a></h3><h4 id="_6-1-定义" tabindex="-1">6.1 定义 <a class="header-anchor" href="#_6-1-定义" aria-label="Permalink to &quot;6.1 定义&quot;">​</a></h4><p>递归方法：一个方法体内调用它自身。</p><h4 id="_6-2-如何理解递归方法" tabindex="-1">6.2 如何理解递归方法？ <a class="header-anchor" href="#_6-2-如何理解递归方法" aria-label="Permalink to &quot;6.2 如何理解递归方法？&quot;">​</a></h4><ul><li>方法递归包含了一种隐式的循环，它会重复执行某段代码，但这种重复执行无须循环控制。</li><li>递归一定要向已知方向递归，否则这种递归就变成了无穷递归，类似于死循环。</li></ul><h4 id="_6-3-举例" tabindex="-1">6.3 举例 <a class="header-anchor" href="#_6-3-举例" aria-label="Permalink to &quot;6.3 举例&quot;">​</a></h4><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 计算1-n之间所有自然数的和</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getSum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getSum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="四-面向对象的特征一-封装性" tabindex="-1">四.面向对象的特征一：封装性 <a class="header-anchor" href="#四-面向对象的特征一-封装性" aria-label="Permalink to &quot;四.面向对象的特征一：封装性&quot;">​</a></h2><h3 id="_1-为什么要引入封装性" tabindex="-1">1.为什么要引入封装性? <a class="header-anchor" href="#_1-为什么要引入封装性" aria-label="Permalink to &quot;1.为什么要引入封装性?&quot;">​</a></h3><ul><li>我们程序设计追求“高内聚，低耦合”。 <ul><li>高内聚：类的内部数据操作细节自己完成，不允许外部干涉；</li><li>低耦合：仅对外暴露少量的方法用于使用。</li></ul></li><li>隐藏对象内部的复杂性，只对外公开简单的接口。便于外界调用，从而提高系统的可扩展性、可维护性。通俗的说，把该隐藏的隐藏起来，把该暴露的暴露出来。这就是封装性的设计思想。</li></ul><h3 id="_2-问题引入" tabindex="-1">2.问题引入 <a class="header-anchor" href="#_2-问题引入" aria-label="Permalink to &quot;2.问题引入&quot;">​</a></h3><p>当我们创建一个类的对象以后，我们可以通过“对象.属性”的方式，对对象的属性进行赋值。这里，赋值操作要受到属性的数据类型和存储范围的制约。除此之外，没其他制约条件。但是，在实际问题中，我们往往需要给属性赋值加入额外的限制条件。这个条件就不能在属性声明时体现，我们只能通过方法进行限制条件的增加。（比如：<code>setLegs()</code>同时，我们需要避免用户再使用“对象.属性”的方式对属性进行赋值。则需要将属性声明为私有的(<code>private</code>)） 此时，针对与属性就体现了封装性。</p><h3 id="_3-封装性思想具体的代码体现" tabindex="-1">3.封装性思想具体的代码体现 <a class="header-anchor" href="#_3-封装性思想具体的代码体现" aria-label="Permalink to &quot;3.封装性思想具体的代码体现&quot;">​</a></h3><h4 id="_3-1-体现一" tabindex="-1">3.1 体现一 <a class="header-anchor" href="#_3-1-体现一" aria-label="Permalink to &quot;3.1 体现一&quot;">​</a></h4><p>将类的属性 xxx 私有化(<code>private</code>),同时，提供公共的(<code>public</code>)方法来获取(<code>getXxx</code>)和设置(<code>setXxx</code>)此属性的值。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> redius;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setRedius</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> redius){</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.redius </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> redius;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getRedius</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> redius){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.redius;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="_3-2-体现二" tabindex="-1">3.2 体现二 <a class="header-anchor" href="#_3-2-体现二" aria-label="Permalink to &quot;3.2 体现二&quot;">​</a></h4><p>不对外暴露私有的方法</p><h4 id="_3-3-体现三" tabindex="-1">3.3 体现三 <a class="header-anchor" href="#_3-3-体现三" aria-label="Permalink to &quot;3.3 体现三&quot;">​</a></h4><p>单例模式（将构造器私有化）</p><h4 id="_3-4-体现四" tabindex="-1">3.4 体现四 <a class="header-anchor" href="#_3-4-体现四" aria-label="Permalink to &quot;3.4 体现四&quot;">​</a></h4><p>如果不希望类在包外被调用，可以将类设置为缺省的。</p><h3 id="_4-java-规定的四种权限修饰符" tabindex="-1">4.Java 规定的四种权限修饰符 <a class="header-anchor" href="#_4-java-规定的四种权限修饰符" aria-label="Permalink to &quot;4.Java 规定的四种权限修饰符&quot;">​</a></h3><h4 id="_4-1-权限从小到大顺序为" tabindex="-1">4.1 权限从小到大顺序为 <a class="header-anchor" href="#_4-1-权限从小到大顺序为" aria-label="Permalink to &quot;4.1 权限从小到大顺序为&quot;">​</a></h4><p><code>private</code> =&gt; 缺省 =&gt; <code>protected</code> =&gt; <code>public</code></p><h4 id="_4-2-具体的修饰范围" tabindex="-1">4.2 具体的修饰范围 <a class="header-anchor" href="#_4-2-具体的修饰范围" aria-label="Permalink to &quot;4.2 具体的修饰范围&quot;">​</a></h4><table><thead><tr><th>修饰符</th><th>类内部</th><th>同一个包</th><th>不同包的子类</th><th>同一个工程</th></tr></thead><tbody><tr><td>private</td><td>Yes</td><td></td><td></td><td></td></tr><tr><td>缺省</td><td>Yes</td><td>Yes</td><td></td><td></td></tr><tr><td>protected</td><td>Yes</td><td>Yes</td><td>Yes</td><td></td></tr><tr><td>public</td><td>Yes</td><td>Yes</td><td>Yes</td><td>Yes</td></tr></tbody></table><h4 id="_4-3-权限修饰符可用来修饰的结构说明" tabindex="-1">4.3 权限修饰符可用来修饰的结构说明 <a class="header-anchor" href="#_4-3-权限修饰符可用来修饰的结构说明" aria-label="Permalink to &quot;4.3 权限修饰符可用来修饰的结构说明&quot;">​</a></h4><p>4 种权限都可以用来修饰类的内部结构：属性、方法、构造器、内部类。</p><p>修饰类的话，只能使用：缺省、<code>public</code></p><h2 id="五-类的结构-构造器" tabindex="-1">五.类的结构：构造器 <a class="header-anchor" href="#五-类的结构-构造器" aria-label="Permalink to &quot;五.类的结构：构造器&quot;">​</a></h2><h3 id="_1-构造器-或构造方法-constructor" tabindex="-1">1.构造器（或构造方法）：Constructor <a class="header-anchor" href="#_1-构造器-或构造方法-constructor" aria-label="Permalink to &quot;1.构造器（或构造方法）：Constructor&quot;">​</a></h3><p><strong>构造器的作用</strong>：</p><ol><li>创建对象</li><li>初始化对象的信息</li></ol><h3 id="_2-使用说明" tabindex="-1">2.使用说明 <a class="header-anchor" href="#_2-使用说明" aria-label="Permalink to &quot;2.使用说明&quot;">​</a></h3><ol><li>如果没显示的定义类的构造器的话，则系统默认提供一个空参的构造器。</li><li>定义构造器的格式：权限修饰符 类名（形参列表）{}</li><li>一个类中定义的多个构造器，彼此构成重载</li><li>一旦我们显示的定义了类的构造器之后，系统就不在提供默认的空参构造器</li><li>一个类中，至少会有一个构造器</li></ol><h3 id="_3-举例" tabindex="-1">3.举例 <a class="header-anchor" href="#_3-举例" aria-label="Permalink to &quot;3.举例&quot;">​</a></h3><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 构造器</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Person()&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String n){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String n,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="_4-总结-属性赋值的先后顺序" tabindex="-1">4.总结：属性赋值的先后顺序 <a class="header-anchor" href="#_4-总结-属性赋值的先后顺序" aria-label="Permalink to &quot;4.总结：属性赋值的先后顺序&quot;">​</a></h3><ol><li>默认初始化</li><li>显示初始化</li><li>构造器中初始化</li><li>通过“对象.方法”或“对象.属性”的方式赋值</li></ol><p><strong>以上操作的先后顺序：1-2-3-4</strong></p><h3 id="_5-javabean" tabindex="-1">5.JavaBean <a class="header-anchor" href="#_5-javabean" aria-label="Permalink to &quot;5.JavaBean&quot;">​</a></h3><p>所谓<code>JavaBean</code>，是指符合如下标准的<code>Java</code>类</p><ul><li>类是公共的</li><li>一个无参的公共的构造器</li><li>属性，而且对应的<code>get</code>、<code>set</code>方法</li></ul><h2 id="六-关键字-this" tabindex="-1">六.关键字：this <a class="header-anchor" href="#六-关键字-this" aria-label="Permalink to &quot;六.关键字：this&quot;">​</a></h2><h3 id="_1-可以调用的结构" tabindex="-1">1.可以调用的结构 <a class="header-anchor" href="#_1-可以调用的结构" aria-label="Permalink to &quot;1.可以调用的结构&quot;">​</a></h3><p>属性、方法、构造器</p><h3 id="_2-this-调用属性、方法" tabindex="-1">2.this 调用属性、方法 <a class="header-anchor" href="#_2-this-调用属性、方法" aria-label="Permalink to &quot;2.this 调用属性、方法&quot;">​</a></h3><p><code>this</code>理解为：当前对象 或 当前正在创建的对象</p><ul><li>在类的方法中，我们可以使用<code>this</code>.属性或<code>this</code>.方法的方式，调用当前对象属性或方法。但是，通常情况下，我们都省略<code>this</code>。特殊情况下，如果方法的形参和类的属性同名时，我们必须显示的使用<code>this</code>.变量的方式，表明此变量是属性，而非形参。</li><li>在类的构造器中，我们可以使用<code>this</code>.属性或<code>this</code>.方法的方式，调用当前正在创建的对象属性或方法。但是，通常情况下，我们都省略<code>this</code>。特殊情况下，如果构造器的形参和类的属性同名时，我们必须显示的使用<code>this</code>.变量的方式，表明此变量是属性，而非形参。</li></ul><h3 id="_3-this-调用构造器" tabindex="-1">3.this 调用构造器 <a class="header-anchor" href="#_3-this-调用构造器" aria-label="Permalink to &quot;3.this 调用构造器&quot;">​</a></h3><ol><li>我们在类的构造器中，可以显示的使用<code>this（形参列表）</code>的方式，调用本类中指定的其他构造器。</li><li>构造器中不能通过<code>this（形参列表）</code>的方式调用自己。</li><li>如果一个类中有<code>n</code>个构造器，则最多有<code>n-1</code>构造器中使用了<code>this（形参列表）</code>。</li><li>规定：<code>this（形参列表）</code>必须声明在当前构造器首行。</li><li>构造器内部，最多只能声明一个<code>this（形参列表）</code>，用来调用其他构造器。</li></ol><h2 id="七-关键字-package-import" tabindex="-1">七.关键字：package/import <a class="header-anchor" href="#七-关键字-package-import" aria-label="Permalink to &quot;七.关键字：package/import&quot;">​</a></h2><h3 id="_1-package-的使用" tabindex="-1">1.package 的使用 <a class="header-anchor" href="#_1-package-的使用" aria-label="Permalink to &quot;1.package 的使用&quot;">​</a></h3><h4 id="_1-1-使用说明" tabindex="-1">1.1 使用说明 <a class="header-anchor" href="#_1-1-使用说明" aria-label="Permalink to &quot;1.1 使用说明&quot;">​</a></h4><ul><li>为了更好的实现项目中类的管理，提供包的概念</li><li>使用<code>package</code>声明类或接口所属的包，声明在源文件的首行</li><li>包，属于标识符，遵循标识符的命名规则，规范（xxxyyyzzz）、“见名知意”</li><li>每<code>.</code>一次，就代表一层文件目录</li></ul><h4 id="_1-2jdk-的主要包介绍" tabindex="-1">1.2JDK 的主要包介绍 <a class="header-anchor" href="#_1-2jdk-的主要包介绍" aria-label="Permalink to &quot;1.2JDK 的主要包介绍&quot;">​</a></h4><p><img src="https://fang-kang.gitee.io/blog-img/java09.png#id=Em2qd&amp;originHeight=305&amp;originWidth=665&amp;originalType=binary&amp;ratio=1&amp;status=done&amp;style=none" alt="" data-fancybox="gallery"></p><h3 id="_2-import-的使用" tabindex="-1">2.import 的使用 <a class="header-anchor" href="#_2-import-的使用" aria-label="Permalink to &quot;2.import 的使用&quot;">​</a></h3><p><code>import</code>：导入</p><ul><li>在源文件中显示的使用<code>import</code>结构导入指定包下的类、接口</li><li>声明在包的声明和类的声明之间</li><li>如果需要导入多个结构，则并列写出即可</li><li>可以使用<code>xxx.*</code>的方式，表示可以导入<code>xxx</code>包下的所有结构</li><li>如果使用的类或接口是<code>java.lang</code>包下定义的，则可以省略<code>import</code>结构</li><li>如果使用的类或接口是本包下定义的，则可以省略<code>import</code>结构</li><li>如果在源文件中，使用了不同包下的同名的类，则必须至少一个类需要以全类名的方式显示</li><li>使用<code>xxx.*</code>的方式表面可以调用<code>xxx</code>包下的所有结构。但是如果使用的是<code>xxx</code>子包下的结构，则仍需要显示导入</li><li><code>import static</code>:导入指定类或接口中的静态结构：属性或方法</li></ul>`,154),t=[e];function h(p,r,k,d,o,c){return a(),i("div",null,t)}const u=s(l,[["render",h]]);export{g as __pageData,u as default};
