import{_ as s,a,o as i,aR as n}from"./chunks/framework.kUD5hkPg.js";const g=JSON.parse('{"title":"07.异常处理","description":"","frontmatter":{},"headers":[],"relativePath":"articles/02-后端/Java/01-基础/07.异常处理.md","filePath":"articles/02-后端/Java/01-基础/07.异常处理.md"}'),l={name:"articles/02-后端/Java/01-基础/07.异常处理.md"},e=n(`<h1 id="_07-异常处理" tabindex="-1">07.异常处理 <a class="header-anchor" href="#_07-异常处理" aria-label="Permalink to &quot;07.异常处理&quot;">​</a></h1><h2 id="一-异常" tabindex="-1">一.异常 <a class="header-anchor" href="#一-异常" aria-label="Permalink to &quot;一.异常&quot;">​</a></h2><h3 id="_1-异常的体系结构" tabindex="-1">1.异常的体系结构 <a class="header-anchor" href="#_1-异常的体系结构" aria-label="Permalink to &quot;1.异常的体系结构&quot;">​</a></h3><p><strong>java.lang.Throwable</strong></p><ul><li>java.lang.Error:一般不编写针对性的代码进行处理</li><li>java.lang.Exception:可以进行异常的处理 <ul><li>编译时异常(checked) <ul><li>IOException <ul><li>FileNotFoundException</li></ul></li><li>ClassNotFoundException</li></ul></li><li>运行时异常(unchecked,RuntimeException) <ul><li>NollPointerException</li><li>ArrayIndexOutBoundsException</li><li>ClassCatsException</li><li>InputMismatchException</li><li>ArithmeticException</li></ul></li></ul></li></ul><h3 id="_2-从程序执行过程-看编译时异常和运行时异常" tabindex="-1">2.从程序执行过程，看编译时异常和运行时异常 <a class="header-anchor" href="#_2-从程序执行过程-看编译时异常和运行时异常" aria-label="Permalink to &quot;2.从程序执行过程，看编译时异常和运行时异常&quot;">​</a></h3><p><img src="https://fang-kang.gitee.io/blog-img/java14.png#id=a3DGQ&amp;originHeight=313&amp;originWidth=205&amp;originalType=binary&amp;ratio=1&amp;status=done&amp;style=none" alt="" data-fancybox="gallery"></p><p><strong>编译时异常</strong>：执行<code>javac.exe</code>命令时，可能出现的异常</p><p><strong>运行时异常</strong>：执行<code>java.exe</code>命令时，出现的异常</p><h2 id="二-异常的处理" tabindex="-1">二.异常的处理 <a class="header-anchor" href="#二-异常的处理" aria-label="Permalink to &quot;二.异常的处理&quot;">​</a></h2><h3 id="_1-java-异常处理的抓抛模型" tabindex="-1">1.java 异常处理的抓抛模型 <a class="header-anchor" href="#_1-java-异常处理的抓抛模型" aria-label="Permalink to &quot;1.java 异常处理的抓抛模型&quot;">​</a></h3><p><strong>过程一</strong>：“抛”：程序在正常执行的过程中，一旦出现异常，就会在异常代码处生成一个对应异常类的对象。并将此对象抛出。一旦抛出对象以后，其后的代码就不在执行。</p><blockquote><p>关于异常对象的产生：</p></blockquote><ul><li>系统自动生成的异常对象</li><li>手动的生成一个异常对象，并抛出(<code>throw</code>)</li></ul><p><strong>过程二</strong>：“抓”：可以理解为异常的处理方式</p><ul><li><code>try-catch-finally</code></li><li><code>throws</code></li></ul><h3 id="_2-异常处理方式一-try-catch-finally" tabindex="-1">2.异常处理方式一:try-catch-finally <a class="header-anchor" href="#_2-异常处理方式一-try-catch-finally" aria-label="Permalink to &quot;2.异常处理方式一:try-catch-finally&quot;">​</a></h3><h4 id="_2-1-使用说明" tabindex="-1">2.1 使用说明 <a class="header-anchor" href="#_2-1-使用说明" aria-label="Permalink to &quot;2.1 使用说明&quot;">​</a></h4><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //可能出现异常的代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(异常类型1 变量名1){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //处理异常的方式1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(异常类型2 变量名2){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //处理异常的方式2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(异常类型3 变量名3){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //处理异常的方式3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">finally</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //一定会执行的代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p><strong>说明</strong>：</p><ul><li><code>finally</code>是可选的</li><li>使用<code>try</code>将可能出现异常代码包起来，在执行过程中，一旦出现异常，就会生成一个对应异常类的对象，根据此对象的类型，去<code>catch</code>中进行匹配</li><li>一旦<code>try</code>中的异常对象匹配到某一个<code>catch</code>时，就进入<code>catch</code>中进行异常的处理。一旦处理完成，就跳出当前的<code>try-catch</code>结构（在没有写<code>finally</code>的情况）。继续执行其后的代码</li><li><code>catch</code>中的异常类型如果没有子父类关系，则谁声明在上，谁声明在下无所谓。 <code>catch</code>中的异常类型如果满足子父类关系，则要求子类一定声明在父类的上面。否则，报错</li><li>常用的异常对象处理方式： <ul><li><code>String getMessage()</code></li><li><code>printStackTrace()</code></li></ul></li><li>在<code>try</code>结构中声明的变量，再出了<code>try</code>结构以后，就不能再被调用</li><li><code>try-catch-finally</code>结构可以嵌套</li></ul><p><strong>总结：如何看待代码中的编译时异常和运行时异常？</strong></p><p><strong>体会 1</strong>：使用<code>try-catch-finally</code>结构处理编译时异常，是得程序在编译时就不报错，但是运行时仍可能报错。相当于我们使用<code>try-catch-finally</code>将一个编译时可能出现的异常，延迟到运行时出现。</p><p><strong>体会 2</strong>：开发中，由于运行时异常比较常见，所以我们通常就不针对运行时异常编写<code>try-catch-finally</code>了。</p><p>针对于编译时异常，一定要考虑异常的处理。</p><h4 id="_2-2-finally-的再说明" tabindex="-1">2.2 finally 的再说明 <a class="header-anchor" href="#_2-2-finally-的再说明" aria-label="Permalink to &quot;2.2 finally 的再说明&quot;">​</a></h4><ul><li><code>finally</code>是可选的</li><li><code>finally</code>中声明的是一定会被执行的代码。</li><li>像数据库的连接、输入输出流、网络编程<code>Socket</code>等资源，<code>JVM</code>是不能自动回收的，我们需要自己手动的进行资源的释放。此时的资源释放，就需要声明在<code>finally</code>中。</li></ul><h4 id="_2-3-面试题" tabindex="-1">2.3 面试题 <a class="header-anchor" href="#_2-3-面试题" aria-label="Permalink to &quot;2.3 面试题&quot;">​</a></h4><p><strong>final、finally、finalize 三者的区别？</strong></p><p><strong>类似</strong>：</p><p>throw 和 thorws</p><p>Collection 和 Collections</p><p>String、StringBuffer、StringBuilder</p><p>ArrayList、LinkedList</p><p>HashMap、LinkedHashMap</p><p>重写、重载</p><p><strong>结构不相似的</strong>：</p><p>抽象类、接口</p><p>==、equals()</p><p>sleep()、wait()</p><h3 id="_3-异常处理方式二" tabindex="-1">3.异常处理方式二 <a class="header-anchor" href="#_3-异常处理方式二" aria-label="Permalink to &quot;3.异常处理方式二&quot;">​</a></h3><p>“<code>throws</code>+异常类型 ” 写在方法的声明处。指明此方法执行时，可能会抛出的异常类型。</p><p>一旦方法体执行时，出现异常，仍会在异常代码处生成一个异常类的对象，此对象满足<code>throws</code>后异常类型时，就会被抛出。异常代码后续的代码，就不再被执行。</p><h3 id="_4-对比两种处理方式" tabindex="-1">4.对比两种处理方式 <a class="header-anchor" href="#_4-对比两种处理方式" aria-label="Permalink to &quot;4.对比两种处理方式&quot;">​</a></h3><p><code>try-catch-finally</code>：真正的将异常处理掉了</p><p><code>throws</code>：只是将异常抛给了方法的调用者。并没有真正将异常处理掉</p><h3 id="_5-体会开发中应该如何选择两种处理方式" tabindex="-1">5.体会开发中应该如何选择两种处理方式？ <a class="header-anchor" href="#_5-体会开发中应该如何选择两种处理方式" aria-label="Permalink to &quot;5.体会开发中应该如何选择两种处理方式？&quot;">​</a></h3><ul><li>如果父类中被重写的方法没<code>throws</code>方式处理异常，则子类重写的方法也不能使用<code>throws</code>,意味着如果子类重写的方法中异常，必须使用<code>try-catch-finally</code>方式处理。</li><li>执行的方法<code>a</code>中，先后又调用了另外的几个方法，这几个方法是递进关系执行的。我们建议这几个方法使用<code>throws</code>的方式进行处理。而执行的方法<code>a</code>可以考虑使用<code>try-catch-finally</code>方式进行处理。</li></ul><h3 id="_6-方法重写时的注意点" tabindex="-1">6.方法重写时的注意点 <a class="header-anchor" href="#_6-方法重写时的注意点" aria-label="Permalink to &quot;6.方法重写时的注意点&quot;">​</a></h3><p>子类重写的方法抛出的异常类型不大于父类被重写的方法抛出的异常类型</p><h2 id="三-手动抛出异常对象" tabindex="-1">三.手动抛出异常对象 <a class="header-anchor" href="#三-手动抛出异常对象" aria-label="Permalink to &quot;三.手动抛出异常对象&quot;">​</a></h2><h3 id="_1-使用说明" tabindex="-1">1.使用说明 <a class="header-anchor" href="#_1-使用说明" aria-label="Permalink to &quot;1.使用说明&quot;">​</a></h3><p>在程序执行中，除了自动抛出异常对象的情况之外，我们还可以手动的<code>throw</code>一个异常类的对象。</p><h3 id="_2-面试题" tabindex="-1">2.面试题 <a class="header-anchor" href="#_2-面试题" aria-label="Permalink to &quot;2.面试题&quot;">​</a></h3><p><strong>throw 和 thorws 区别</strong></p><p><code>throw</code>表示抛出一个异常类的对象，生成一个异常对象的过程。声明在方法体内。</p><p><code>throws</code>是异常处理的一种方式，声明在方法的声明处。</p><h3 id="_3-典型例题" tabindex="-1">3.典型例题 <a class="header-anchor" href="#_3-典型例题" aria-label="Permalink to &quot;3.典型例题&quot;">​</a></h3><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Student</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> regist</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Exception{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 手动抛出异常对象</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // throw new RuntimeException(&quot;您输入的数据非法&quot;);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // throw new Exception(&quot;您输入的数据非法&quot;);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;不能输入负数&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 错误的</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // throw new String(&quot;不能输入负数&quot;);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="四-自定义异常类" tabindex="-1">四.自定义异常类 <a class="header-anchor" href="#四-自定义异常类" aria-label="Permalink to &quot;四.自定义异常类&quot;">​</a></h2><h3 id="_1-如何自定义一个异常类" tabindex="-1">1.如何自定义一个异常类？ <a class="header-anchor" href="#_1-如何自定义一个异常类" aria-label="Permalink to &quot;1.如何自定义一个异常类？&quot;">​</a></h3><ul><li>继承于现有的异常结构：<code>RuntimeException</code>、<code>Exception</code></li><li>提供全局常量：<code>serialVersionUID</code></li><li>提供重载的构造器</li></ul><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyException</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Exception</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> serialVersionUID </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7702121212L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">msg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(msg);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>`,63),t=[e];function p(h,r,c,o,d,k){return i(),a("div",null,t)}const u=s(l,[["render",p]]);export{g as __pageData,u as default};
